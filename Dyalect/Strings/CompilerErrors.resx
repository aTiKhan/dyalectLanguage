<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseNotAllowed" xml:space="preserve">
    <value>Keyword "base" is not available in the current context.</value>
  </data>
  <data name="ExpressionNoName" xml:space="preserve">
    <value>An expression doesn't have a name.</value>
  </data>
  <data name="NoEnclosingLoop" xml:space="preserve">
    <value>No enclosing loop out of which to break or continue.</value>
  </data>
  <data name="TooManyErrors" xml:space="preserve">
    <value>Too many errors (error limit exceeded).</value>
  </data>
  <data name="UnableAssignConstant" xml:space="preserve">
    <value>Unable to change a value of a constant "{0}".</value>
  </data>
  <data name="UnableAssignExpression" xml:space="preserve">
    <value>Unable to assign a value to an expression: {0}.</value>
  </data>
  <data name="UndefinedBaseVariable" xml:space="preserve">
    <value>Variable "{0}" is not declared in a parent scope.</value>
  </data>
  <data name="UndefinedModule" xml:space="preserve">
    <value>Unknown module "{0}".</value>
  </data>
  <data name="UndefinedType" xml:space="preserve">
    <value>Unknown type "{0}".</value>
  </data>
  <data name="UndefinedVariable" xml:space="preserve">
    <value>Variable "{0}" is not declared.</value>
  </data>
  <data name="VariableAlreadyDeclared" xml:space="preserve">
    <value>Variable "{0}" is already declared.</value>
  </data>
  <data name="StaticOnlyMethods" xml:space="preserve">
    <value>Function "{0}" cannot be declared as static. Only methods can be static.</value>
  </data>
  <data name="CodeIslandEmpty" xml:space="preserve">
    <value>Empty code islands are not supported.</value>
  </data>
  <data name="CodeIslandInvalid" xml:space="preserve">
    <value>Invalid code island inside of a string literal: {0}</value>
  </data>
  <data name="VarArgNoDefaultValue" xml:space="preserve">
    <value>Default values are not allowed for the argument lists.</value>
  </data>
  <data name="VarArgOnlyOne" xml:space="preserve">
    <value>Only one parameter of type argument list is allowed.</value>
  </data>
  <data name="InvalidDefaultValue" xml:space="preserve">
    <value>Default parameter value for '{0}' must be of a primitive type (integer, float, character, string or nil).</value>
  </data>
  <data name="PatternNotSupported" xml:space="preserve">
    <value>Pattern "{0}" not supported in this context.</value>
  </data>
  <data name="SliceNotSupported" xml:space="preserve">
    <value>Slicing is not supported in this context.</value>
  </data>
  <data name="NamedArgumentMultipleTimes" xml:space="preserve">
    <value>Named argument "{0}" cannot be specified multiple times.</value>
  </data>
  <data name="OverrideNotAllowed" xml:space="preserve">
    <value>Overriding of "{0}" method is not allowed.</value>
  </data>
  <data name="FunctionDeprecated" xml:space="preserve">
    <value>Function "{0}" is deprecated.</value>
  </data>
  <data name="TypeAlreadyDeclared" xml:space="preserve">
    <value>Module already contains a definition for "{0}".</value>
  </data>
  <data name="PrivateNameAccess" xml:space="preserve">
    <value>Unable to access a private module member "{0}".</value>
  </data>
  <data name="PrivateMethod" xml:space="preserve">
    <value>Methods cannot be declared inside a "private" scope.</value>
  </data>
  <data name="UnableToLinkModule" xml:space="preserve">
    <value>Unable to link module '{0}". Compilation terminated.</value>
  </data>
  <data name="PatternNeverMatch" xml:space="preserve">
    <value>Pattern "{0}" would never match.</value>
  </data>
  <data name="BindingPatternNoInit" xml:space="preserve">
    <value>Pattern matching in variable binding requires initialization clause.</value>
  </data>
  <data name="InvalidLabel" xml:space="preserve">
    <value>Label is not valid in this context.</value>
  </data>
  <data name="InvalidDirective" xml:space="preserve">
    <value>Invalid format for preprocessor directive "{0}".</value>
  </data>
  <data name="UnknownDirective" xml:space="preserve">
    <value>Unknown preprocessor directive "{0}".</value>
  </data>
  <data name="UserWarning" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="UnreachableMatchEntry" xml:space="preserve">
    <value>Match entry "{0}" is unreachable. The preceding entry "{1}" would match first.</value>
  </data>
  <data name="PrivateScopeNested" xml:space="preserve">
    <value>Nested private blocks are not allowed.</value>
  </data>
  <data name="PrivateScopeOnlyGlobal" xml:space="preserve">
    <value>Private blocks can be declared only in global scope.</value>
  </data>
  <data name="InvalidRethrow" xml:space="preserve">
    <value>A "throw" statement with no arguments is only valid inside a "catch" block.</value>
  </data>
  <data name="CtorAutoGen" xml:space="preserve">
    <value>Unable to define custom constructors for a type with auto-generated constructors (type "{0}").</value>
  </data>
  <data name="ReturnInIterator" xml:space="preserve">
    <value>Statement "return" is not allowed in iterators. Use "yield break" to terminate an iterator.</value>
  </data>
  <data name="ReturnNotAllowed" xml:space="preserve">
    <value>Statement "return" is only supported inside functions.</value>
  </data>
  <data name="InvalidSlice" xml:space="preserve">
    <value>Slice is invalid (step and exclusivity sign are not supported in slices).</value>
  </data>
  <data name="CtorNotIterator" xml:space="preserve">
    <value>A constructor function cannot be an iterator.</value>
  </data>
  <data name="PositionalArgumentAfterKeyword" xml:space="preserve">
    <value>A positional argument can't follow an argument passed by name.</value>
  </data>
  <data name="CtorOnlyStatic" xml:space="preserve">
    <value>Constructor should be a static function.</value>
  </data>
  <data name="CtorOnlyPascal" xml:space="preserve">
    <value>Constructor names should start with a capital letter.</value>
  </data>
  <data name="ReturnInConstructor" xml:space="preserve">
    <value>Statement "return" is not supported inside constructors.</value>
  </data>
  <data name="TypeNameCamel" xml:space="preserve">
    <value>Type name should start from a capital letter.</value>
  </data>
  <data name="NestedMethod" xml:space="preserve">
    <value>Method cannot be nested in other methods.</value>
  </data>
  <data name="AutoNotAllowed" xml:space="preserve">
    <value>An "auto" declaration is not allowed in this context.</value>
  </data>
  <data name="InvalidTypeDefaultValue" xml:space="preserve">
    <value>Invalid type of a default parameter value.</value>
  </data>
  <data name="NoUsing" xml:space="preserve">
    <value>Indexer and member access are only valid with an active "using" declaration.</value>
  </data>
  <data name="MethodNotRecursive" xml:space="preserve">
    <value>Methods can't be recursive. Declare a regular function instead.</value>
  </data>
  <data name="AssignmentSameVariable" xml:space="preserve">
    <value>Assignment to the same variable.</value>
  </data>
</root>