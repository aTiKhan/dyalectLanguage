<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DivideByZero.0" xml:space="preserve">
    <value>Division by zero.</value>
  </data>
  <data name="ExternalFunctionFailure.2" xml:space="preserve">
    <value>An unhandled exception occured during an execution of an external function "{0}": {1}</value>
  </data>
  <data name="OperationNotSupported.2" xml:space="preserve">
    <value>Operation "{0}" is not supported by the type "{1}".</value>
  </data>
  <data name="StackCorrupted.0" xml:space="preserve">
    <value>Stack is corrupted.</value>
  </data>
  <data name="IndexOutOfRange.0" xml:space="preserve">
    <value>An index is out of range.</value>
  </data>
  <data name="TooManyArguments.3" xml:space="preserve">
    <value>Function "{0}" accepts {1} argument(s) ({2} given).</value>
  </data>
  <data name="AssertionFailed.1" xml:space="preserve">
    <value>Assertion failed: {0}.</value>
  </data>
  <data name="RequiredArgumentMissing.2" xml:space="preserve">
    <value>No value provided for an argument "{1}" of a function "{0}".</value>
  </data>
  <data name="ArgumentNotFound.2" xml:space="preserve">
    <value>Function "{0}" doesn't have an argument "{1}".</value>
  </data>
  <data name="FormatException.1" xml:space="preserve">
    <value>lnvalid string format: {0}</value>
  </data>
  <data name="MatchFailed.0" xml:space="preserve">
    <value>Match failed.</value>
  </data>
  <data name="CollectionModified.0" xml:space="preserve">
    <value>Collection was modified after the iterator was instantiated.</value>
  </data>
  <data name="InvalidType.1" xml:space="preserve">
    <value>Type "{0}" is unexpected.</value>
  </data>
  <data name="PrivateNameAccess.1" xml:space="preserve">
    <value>Unable to access a private module member "{0}".</value>
  </data>
  <data name="KeyNotFound.0" xml:space="preserve">
    <value>Key is not present in the dictionary.</value>
  </data>
  <data name="KeyAlreadyPresent.0" xml:space="preserve">
    <value>Key is already present in the dictionary.</value>
  </data>
  <data name="MultipleValuesForArgument.2" xml:space="preserve">
    <value>Function "{0}" has multiple values for an argument "{1}".</value>
  </data>
  <data name="IndexReadOnly.0" xml:space="preserve">
    <value>An index or field is read-only.</value>
  </data>
  <data name="PrivateAccess.0" xml:space="preserve">
    <value>Unable to access private scope of an object.</value>
  </data>
  <data name="InvalidValue.1" xml:space="preserve">
    <value>Value of "{0}" is invalid.</value>
  </data>
  <data name="StackOverflow.0" xml:space="preserve">
    <value>Too many nested calls.</value>
  </data>
  <data name="ArgumentNotFound.0" xml:space="preserve">
    <value>Function argument not found.</value>
  </data>
  <data name="AssertionFailed.0" xml:space="preserve">
    <value>Assertion failed.</value>
  </data>
  <data name="ExternalFunctionFailure.0" xml:space="preserve">
    <value>An unhandled exception occured during an execution of an external function.</value>
  </data>
  <data name="FormatException.0" xml:space="preserve">
    <value>lnvalid string format.</value>
  </data>
  <data name="IndexOutOfRange.1" xml:space="preserve">
    <value>An index or field "{0}" is out of range.</value>
  </data>
  <data name="IndexReadOnly.1" xml:space="preserve">
    <value>An index or field "{0}" is read-only.</value>
  </data>
  <data name="InvalidType.0" xml:space="preserve">
    <value>Invalid type.</value>
  </data>
  <data name="InvalidValue.0" xml:space="preserve">
    <value>Value is invalid.</value>
  </data>
  <data name="InvalidValue.2" xml:space="preserve">
    <value>Values of arguments "{0}" and "{1}" are invalid.</value>
  </data>
  <data name="KeyAlreadyPresent.1" xml:space="preserve">
    <value>Key "{0}" is already present in the dictionary.</value>
  </data>
  <data name="KeyNotFound.1" xml:space="preserve">
    <value>Key "{0}" is not present in the dictionary.</value>
  </data>
  <data name="MultipleValuesForArgument.0" xml:space="preserve">
    <value>Multiple values provided for the same function argument.</value>
  </data>
  <data name="OperationNotSupported.0" xml:space="preserve">
    <value>Operation is not supported.</value>
  </data>
  <data name="PrivateNameAccess.0" xml:space="preserve">
    <value>Unable to access a private module member.</value>
  </data>
  <data name="RequiredArgumentMissing.0" xml:space="preserve">
    <value>No value provided for a mandatory function argument.</value>
  </data>
  <data name="TooManyArguments.0" xml:space="preserve">
    <value>Too many arguments to function.</value>
  </data>
  <data name="InvalidOverload.0" xml:space="preserve">
    <value>Unable to overload.</value>
  </data>
  <data name="InvalidOverload.1" xml:space="preserve">
    <value>Unable to overload function or property "{0}".</value>
  </data>
  <data name="InvalidCast.0" xml:space="preserve">
    <value>Cannot convert type.</value>
  </data>
  <data name="InvalidCast.2" xml:space="preserve">
    <value>Cannot convert type "{0}" to "{1}".</value>
  </data>
  <data name="InvalidType.2" xml:space="preserve">
    <value>Expected type "{0}", got type "{1}" instead.</value>
  </data>
  <data name="InvalidType.3" xml:space="preserve">
    <value>Expected types "{0}" or "{1}", got type "{2}" instead.</value>
  </data>
  <data name="InvalidType.4" xml:space="preserve">
    <value>Expected types "{0}", "{1}" or "{2}", got type "{3}" instead.</value>
  </data>
  <data name="InvalidType.5" xml:space="preserve">
    <value>Expected types "{0}", "{1}", "{2}" or "{3}", got type "{4}" instead.</value>
  </data>
</root>