COMPILER Dyalect

CHARACTERS
    cr = '\r'.
    lf = '\n'.
    newLine = cr + lf.
    tab = '\t'.
    letter = 'A' .. 'Z' + 'a' .. 'z' + '_'.
    digit = "0123456789".
    notDigit = ANY - digit.
    hexDigit = digit + "ABCDEFabcdef".
    stringChar = ANY - '"' - '\\' - newLine.
    char = ANY - "'" - newLine.
    esc = digit + letter + "\"\\'~`:;,./][{}!@#$%^&*-_=+?><|".

TOKENS
    identToken  = letter { letter | digit } | "_" letter { letter | digit  }.

    intToken    = digit { digit } | ("0x"|"0X") hexDigit { hexDigit }.

    floatToken  = "." digit { digit } [ ("e"|"E") [ "+" | "-" ] digit { digit } ]
                    | digit { digit } 
                        ( 
                            "." digit { digit } [ ( "e" | "E" ) ["+" | "-" ] digit { digit } ]
                            | ( "e" | "E") ["+" | "-" ] digit { digit }
                        ).

    stringToken = "\"" { stringChar | "\\" esc | ("\\(" {stringChar|"\""} ")" ) }  "\"".
    charToken = "'" { char | "\\" esc } "'".
    implicitToken = "$" digit { digit }.

    varToken            = "var".
    constToken          = "const".
    funcToken           = "func".
    returnToken         = "return".
    continueToken       = "continue".
    breakToken          = "break".
    yieldToken          = "yield".
    ifToken             = "if".
    forToken            = "for".
    whileToken          = "while".
    doToken             = "do".
    typeToken           = "type".

    arrowToken          = "=>".
    dotToken            = ".".
    commaToken          = ",".
    semicolonToken      = ";".
    colonToken          = ":".
    equalToken          = "=".
    parenLeftToken      = "(".
    parenRightToken     = ")".
    curlyLeftToken      = "{".
    curlyRightToken     = "}".
    squareLeftToken     = "[".
    squareRightToken    = "]".

    minus               = "-".
    plus                = "+".
    not                 = "!".
    bitnot              = "~".

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

    Separator = ";".

    StandardOperators = "+" | "-" | "*" | "/" | "%" | "|" | "&" | "!"
        | "==" | "!=" | ">" | "<" | ">=" | "<=" | "^" | "<<" | ">>" | "~".

    FunctionName = identToken | StandardOperators.

    Qualident<out string s1, out string s2, out string s3> =
        (. s1 = null; s2 = null; s3 = null; .)
        FunctionName (. s1 = t.val; .) 
        [ 
            ["."] FunctionName  (. s2 = t.val; .) 
            [ ["."] FunctionName (. s3 = t.val; .) ]
        ].
        
    Import =
        "import"
        (. var inc = new DImport(t); .)
        identToken
        (. inc.ModuleName = t.val; .)
        [
            "=" identToken
            (.
                inc.Alias = inc.ModuleName;
                inc.ModuleName = t.val;
            .)
        ]
        [
            "(" stringToken (. inc.Dll = ParseSimpleString(); .) ")"
        ]
        (. Imports.Add(inc); .).

    Type<out DNode node> =
        "type"
        (.  
            var typ = new DTypeDeclaration(t);
            node = typ;
        .)
        identToken (. typ.Name = t.val; node = typ; .).

    Statement<out DNode node> =
        (. node = null; .)
        (
              ControlFlow<out node> Separator
            | Type<out node> Separator
            | Match<out node>
            | SimpleExpr<out node> Separator
            | If<out node>
            | Loops<out node>
            | Function<out node>
        ).

    Block<out DNode node> =
        (. node = null; .)
        (
            "{"
                (. var block = new DBlock(t); .)
                [
                    Statement<out node> (. block.Nodes.Add(node); .)
                    { Statement<out node> (. block.Nodes.Add(node); .) }
                ]
                (. node = block; .)
            "}"
        ).

    Function<out DNode node> =
        (. node = null; bool st = false; bool auto = false; .)
        (
            [ "static" (. st = true; .) ] 
            [ "auto" (. auto = true; .) ]
            "func"
            (.
                var f = new DFunctionDeclaration(t) { IsStatic = st, IsAuto = auto };
                functions.Push(f);
            .)
            Qualident<out var s1, out var s2, out var s3>
            (.
                if (s2 == null && s3 == null)
                    f.Name = s1;
                else if (s3 == null)
                {
                    f.Name = s2;
                    f.TypeName = new Qualident(s1);
                }
                else
                {
                    f.Name = s3;
                    f.TypeName = new Qualident(s1, s2);
                }
            .)
            FunctionArguments<f>
            (
                Block<out node>
            )
            (.
                f.Body = node;
                node = f;
                functions.Pop();
            .)
        ).

    FunctionArgument<out DParameter arg> =
        (. arg = null; .)
        identToken (. arg = new DParameter(t) { Name = t.val }; .)
        [
            "=" Expr<out var cnode>
            (. arg.DefaultValue = cnode; .)
        ]
        [ "..." (. arg.IsVarArgs = true; .) ].

    FunctionArguments<DFunctionDeclaration node> =
        "("
            [
                FunctionArgument<out var arg> (. node.Parameters.Add(arg); .)
                { "," FunctionArgument<out arg> (. node.Parameters.Add(arg); .) }
            ]
        ")".

    Binding<out DNode node> = 
        (
            ( "var" | "const" )
            (. var bin = new DBinding(t) { Constant = t.val == "const" }; .)
            OrPattern<out var pat> (. bin.Pattern = pat; .)
            [ "=" Expr<out node> (. bin.Init = node; .) ]
            (. node = bin; .)
        ).

    Rebinding<out DNode node> = 
        (
            "set"
            (. var bin = new DRebinding(t); .)
            OrPattern<out var pat> (. bin.Pattern = pat; .)
            "=" Expr<out node> (. bin.Init = node; .)
            (. node = bin; .)
        ).

    Expr<out DNode node> =
        (. node = null; .)
        (
              If<out node>
            | SimpleExpr<out node>
            | Loops<out node>
            | Match<out node>
        ).

    //Patterns
    Match<out DNode node> =
        (. node = null; .)
        (
            "match"
            (. var m = new DMatch(t); .)
            Expr<out node>
            (. m.Expression = node; .)
            "{"
                MatchEntry<out var entry> (. m.Entries.Add(entry); .)
                { "," MatchEntry<out entry>  (. m.Entries.Add(entry); .) }
            "}"
            (. node = m; .)
        ).

    MatchEntry<out DMatchEntry me> =
        (
            (. me = new DMatchEntry(t); .)
            OrPattern<out var p> 
            (. me.Pattern = p; .)
            [ "when" Expr<out var node> (. me.Guard = node; .) ]
            "=>" Expr<out var exp> (. me.Expression = exp; .)
        ).

    OrPattern<out DPattern node> =
        (. node = null; .)
        AndPattern<out node>
        {
            (. var por = new DOrPattern(t) { Left = node }; .)
            "||" AndPattern<out node>
            (. por.Right = node; node = por; .)
        }.

    AndPattern<out DPattern node> =
        (. node = null; .)
        RangePattern<out node>
        {
            (. var pa = new DAndPattern(t) { Left = node }; .)
            "&&" RangePattern<out node>
            (. pa.Right = node; node = pa; .)
        }.

    RangePattern<out DPattern node> =
        (. node = null; .)
        (
            Pattern<out node>
            [
                (. var r = new DRangePattern(t) { From = node }; .)
                ".." Pattern<out node>
                (. r.To = node; node = r; .)
            ]
        ).

    Pattern<out DPattern node> =
        (. node = null; .)
        (
              NamePattern<out node>
            | IntegerPattern<out node>
            | FloatPattern<out node>
            | CharPattern<out node>
            | StringPattern<out node>
            | BooleanPattern<out node>
            | NilPattern<out node>
            | IF (IsRecordPattern()) RecordPattern<out node>
            | IF (IsTuple(allowFields: false)) TuplePattern<out node>
            | GroupPattern<out node>
            | ArrayPattern<out node>
            | MethodCheckPattern<out node>
        ) 
        [ 
            "as" (. var asp = new DAsPattern(t) { Pattern = node }; .) 
            identToken (. asp.Name = t.val; node = asp; .) 
        ].

    MethodCheckPattern<out DPattern node> =
        (. node = null; .)
        (
            "." identToken (. node = new DMethodCheckPattern(t) { Name = t.val }; .)
            "?"
        ).

    GroupPattern<out DPattern node> =
        (. node = null; .)
        (
            "(" OrPattern<out node> ")"
        ).

    ArrayPattern<out DPattern node> =
        (. node = null; .)
        (
            "["
                (. var tup = new DArrayPattern(t); .)
                RangePattern<out node> (. tup.Elements.Add(node); .)
                { "," RangePattern<out node> (. tup.Elements.Add(node); .) }
                (. node = tup; .)
            "]"
        ).

    TuplePattern<out DPattern node> =
        (. node = null; .)
        (
            "("
                (. var tup = new DTuplePattern(t); .)
                OrPattern<out node> (. tup.Elements.Add(node); .)
                { "," OrPattern<out node> (. tup.Elements.Add(node); .) }
                (. node = tup; .)
            ")"
        ).

    RecordPattern<out DPattern node> =
        (. node = null; .)
        (
            "("
                (. var rec = new DRecordPattern(t); .)
                FieldPattern<out var lab> (. rec.Elements.Add(lab); .)
                { "," FieldPattern<out lab> (. rec.Elements.Add(lab); .) }
                (. node = rec; .)
            ")"
        ).

    FieldPattern<out DLabelPattern node> =
        (. node = null; .)
        (
            identToken 
            (. var la = new DLabelPattern(t) { Label = t.val }; .)
            ":" RangePattern<out var pat>
            (. la.Pattern = pat; node = la; .)
        ).

    NamePattern<out DPattern node> = 
        (. node = null; string nm2 = null; string nm1 = null; Token ot = null; .)
        (
            identToken (. nm1 = t.val; ot = t; .)
            [ "." identToken (. nm2 = null; .) ]
            (. 
                if (nm2 == null) {
                    if (t.val == "_") 
                        node = new DWildcardPattern(ot);
                    else
                        node = new DNamePattern(ot) { Name = nm1 };
                } else {
                    var q = new Qualident(nm2, nm1);
                    node = new DTypeTestPattern(ot) { TypeName = q };
                }
            .)
        ).

    NilPattern<out DPattern node> = "nil" (. node = new DNilPattern(t); .).
    IntegerPattern<out DPattern node> = intToken (. node = new DIntegerPattern(t) { Value = ParseInteger() }; .).
    FloatPattern<out DPattern node> = floatToken (. node = new DFloatPattern(t) { Value = ParseFloat() }; .).
    CharPattern<out DPattern node> = charToken (. node = new DCharPattern(t) { Value = ParseChar() }; .).
    StringPattern<out DPattern node> = stringToken (. node = new DStringPattern(t) { Value = ParseString() }; .).
    BooleanPattern<out DPattern node> = ("true"|"false") (. node = new DBooleanPattern(t) { Value = t.val == "true" }; .).
    //End patterns

    If<out DNode node> =
        (. node = null; .)
        (
            "if"
            (. var @if = new DIf(t); .)
            Expr<out node> (. @if.Condition = node; .)
            Block<out node>  (. @if.True = node; .)
            [
                "else"
                (
                    (
                        Block<out node>
                        (. @if.False = node; .)
                    )
                    |
                    (
                        If<out node>
                        (. @if.False = node; .)
                    )
                )
            ]
            (. node = @if; .)
        ).

    Loops<out DNode node> =
        (. node = null; .)
        (
              While<out node>
            | For<out node>
        ).

    While<out DNode node> =
        (. node = null; .)
        (
            "while"
            (. var @while = new DWhile(t); .)
            Expr<out node> (. @while.Condition = node; .)
            Block<out node>
            (.
                @while.Body = node;
                node = @while;
            .)
        ).

    For<out DNode node> =
        (. node = null; .)
        (
            "for"
            (. var @for = new DFor(t); .)
            OrPattern<out var pattern> (. @for.Pattern = pattern; .)
            "in" Expr<out node> (. @for.Target = node; .)
            [ "when" Expr<out node> (. @for.Guard = node; .) ]
            Block<out node>
            (.
                @for.Body = node;
                node = @for;
            .)
        ).

    ControlFlow<out DNode node> =
        (. node = null; .)
        (
              Break<out node>
            | Continue<out node>
            | Return<out node>
            | Yield<out node>
        ).

    Yield<out DNode node> =
        "yield" 
        (. 
            var yield = new DYield(t);
            node = yield;
            functions.Peek().IsIterator = true; 
        .)
        Expr<out var exp> (. yield.Expression = exp; .).

    Break<out DNode node> = 
        "break" 
        (. var br = new DBreak(t); node = br; .)
        [ 
            (. if (la.AfterEol) return; .)
            Expr<out var exp> (. br.Expression = exp; .) 
        ].

    Return<out DNode node> = 
        "return" 
        (. var br = new DReturn(t); node = br; .)
        [ Expr<out var exp> (. br.Expression = exp; .) ].

    Continue<out DNode node> = "continue" (. node = new DContinue(t); .).

    SimpleExpr<out DNode node> = 
        (. node = null; .)
        (
              Binding<out node>
            | Rebinding<out node>
            | IF (IsFunction()) FunctionExpr<out node>
            | IF (IsLabel()) Label<out node>
            | Assignment<out node>
            | TryCatch<out node>
            | Throw<out node>
        )
        (.
            if (implicits != null)
            {
                var func = new DFunctionDeclaration(node.Location)
                {
                    Body = node
                };
                implicits.Sort();
                func.Parameters.AddRange(implicits.Distinct().Select(i => new DParameter(t) { Name = "p" + i }));
                node = func;
                implicits = null;
            }
        .).

    Throw<out DNode node> =
        (. node = null; .)
        (
            "throw" (. var th = new DThrow(t); .)
            Expr<out node>
            (. th.Expression = node; node = th; .)
        ).

    TryCatch<out DNode node> =
        (. node =  null; .)
        (
            "try" (. var tc = new DTryCatch(t); .)
            Block<out node> (. tc.Expression = node; .)
            "catch" 
            (
                (
                    (. var m = new DMatch(t); tc.Catch = m; .)
                    "{"
                        MatchEntry<out var entry> (. m.Entries.Add(entry); .)
                        { "," MatchEntry<out entry>  (. m.Entries.Add(entry); .) }
                    "}"
                )
                |
                (
                    identToken (. tc.BindVariable = new DName(t) { Value = t.val }; .)
                    Block<out node> (. tc.Catch = node; .)
                )
            )
            (. node = tc; .)
        ).

    FunctionExpr<out DNode node> =
        (. 
            var f = new DFunctionDeclaration(t);
            node = f;
        .)
        (
            (
                
                  ( FunctionArgument<out var a> (. f.Parameters.Add(a); .) )
                | FunctionArguments<f>
            )
            (. functions.Push(f); .)
            "=>" Expr<out var exp>
            (. f.Body = exp; .)
        ).

    Assignment<out DNode node> =
        Coalesce<out node>
        [
            (.
                var ass = new DAssignment(t) { Target = node };
                node = ass;
                BinaryOperator? op = null;
            .)
            (
                  "="
                | "+="  (. op = BinaryOperator.Add; .)
                | "-="  (. op = BinaryOperator.Sub; .)
                | "*="  (. op = BinaryOperator.Mul; .)
                | "/="  (. op = BinaryOperator.Div; .)
                | "%="  (. op = BinaryOperator.Rem; .)
                | "&="  (. op = BinaryOperator.And; .)
                | "|="  (. op = BinaryOperator.Or; .)
                | "^="  (. op = BinaryOperator.Xor; .)
                | "<<=" (. op = BinaryOperator.ShiftLeft; .)
                | ">>=" (. op = BinaryOperator.ShiftRight; .)
            )
            Expr<out node>
            (.
                ass.Value = node;
                ass.AutoAssign = op;
                node = ass;
            .)
        ].

    Coalesce<out DNode node> =
        Or<out node>
        {
            "??" (. var ot = t; .) Or<out DNode exp>
            (. node = new DBinaryOperation(node, exp, BinaryOperator.Coalesce, ot); .)
        }.

    Or<out DNode node> = 
        And<out node>
        {
            "||" (. var ot = t; .) And<out DNode exp>
            (. node = new DBinaryOperation(node, exp, BinaryOperator.Or, ot); .)
        }.
        
    And<out DNode node> = 
        Eq<out node>
        {
            "&&" (. var ot = t; .) Eq<out DNode exp>
            (. node = new DBinaryOperation(node, exp, BinaryOperator.And, ot); .)
        }.

    /*LeftPipe<out DNode node> =
        (. node = null; .)
        Eq<out node>
        [
            (. var p = node is DApplication na ? na : new DApplication(node, t); .)
            "<|" LeftPipe<out node>
            (. p.Arguments.Add(node); node = p; .)
        ].*/

    Eq<out DNode node> = 
        Shift<out node>
        {
            (.
                var op = default(BinaryOperator);
                var ot = default(Token);
            .)
            (
                  ">"  (. ot = t; op = BinaryOperator.Gt; .)
                | "<"  (. ot = t; op = BinaryOperator.Lt; .)
                | ">=" (. ot = t; op = BinaryOperator.GtEq; .)
                | "<=" (. ot = t; op = BinaryOperator.LtEq; .)
                | "==" (. ot = t; op = BinaryOperator.Eq; .)
                | "!=" (. ot = t; op = BinaryOperator.NotEq; .)
            )
            (
                Shift<out var exp> (. node = new DBinaryOperation(node, exp, op, ot); .)
            )
        }.

    Shift<out DNode node> =
        BitOr<out node>
        {
            (. 
                var op = default(BinaryOperator);
                var ot = default(Token);
            .)
            ( 
                  "<<" (. ot = t; op = BinaryOperator.ShiftLeft; .)
                | ">>" (. ot = t; op = BinaryOperator.ShiftRight; .)
            )
            (
                BitOr<out var exp> (. node = new DBinaryOperation(node, exp, op, ot); .)
            )
        }.
        
    BitOr<out DNode node> = 
        Xor<out node>
        {
            "|" (. var ot = t; .) 
            (
                Xor<out var exp> (. node = new DBinaryOperation(node, exp, BinaryOperator.BitwiseOr, ot); .)
            )
        }.
        
    Xor<out DNode node> = 
        BitAnd<out node>
        {
            (. DNode exp = null; .)
            "^" (. var ot = t; .) 
            (
                BitAnd<out exp> (. node = new DBinaryOperation(node, exp, BinaryOperator.Xor, ot); .)
            )
        }.
        
    BitAnd<out DNode node> = 
        Add<out node>
        {
            "&" (. var ot = t; .)
            (
                Add<out var exp> (. node = new DBinaryOperation(node, exp, BinaryOperator.BitwiseAnd, ot); .)
            )
        }.

    Add<out DNode node> =
        Mul<out node>
        {
            (. 
                var op = default(BinaryOperator);
                var ot = default(Token);
            .)
            ( 
                (
                    (. if (la.AfterEol) return; .)
                    "+" (. ot = t; op = BinaryOperator.Add; .)
                )
                |
                (
                    (. if (la.AfterEol) return; .)
                    "-" (. ot = t; op = BinaryOperator.Sub; .)
                )
            )
            (
                Mul<out var exp> (. node = new DBinaryOperation(node, exp, op, ot); .)
            )
        }.

    Mul<out DNode node> =
        Unary<out node>
        {
            (. 
                var op = default(BinaryOperator);
                var ot = default(Token);
            .)
            ( 
                  "*" (. ot = t; op = BinaryOperator.Mul; .)
                | "/" (. ot = t; op = BinaryOperator.Div; .)
                | "%" (. ot = t; op = BinaryOperator.Rem; .)
            )
            (
                Unary<out var exp> (. node = new DBinaryOperation(node, exp, op, ot); .)
            )
        }.

    Unary<out DNode node> =
        (.
            node = null;
            var op = default(UnaryOperator);
            var ot = default(Token);
        .)
        (
            ( 
                (
                    "!" (. ot = t; op = UnaryOperator.Not; .) 
                    Range<out node> 
                    (. node = new DUnaryOperation(node, op, ot); .)
                )
                |
                (
                    "-" (. ot = t; op = UnaryOperator.Neg; .) 
                    Range<out node> 
                    (. node = new DUnaryOperation(node, op, ot); .)
                )
                | 
                (
                    "+" (. ot = t; op = UnaryOperator.Plus; .) 
                    Range<out node> 
                    (. node = new DUnaryOperation(node, op, ot); .) 
                )
                | 
                (
                    "~" (. ot = t; op = UnaryOperator.BitwiseNot; .) 
                    Range<out node> 
                    (. node = new DUnaryOperation(node, op, ot); .)
                )
                | Range<out node>
            )
        ).

    Range<out DNode node> =
        (. node = null; .)
        (
            FieldOrIndex<out node>
            [
                ".."  (. var range = new DRange(t) { From = node }; .)
                FieldOrIndex<out node>
                (. range.To = node; node = range; .)
            ]
        ).

    FieldOrIndex<out DNode node> =
        (
            Literal<out node>
            {
                (
                    "." (. var ot = t; .)
                    identToken
                    (. var nm = t.val; DMemberCheck chk = null; .)
                    (
                        [
                            "?"
                            (.
                                chk = new DMemberCheck(ot) { Target = node };
                                chk.Name = nm;
                                node = chk;
                            .)
                        ]
                        (.
                            if (chk == null) 
                            {
                                var fld = new DAccess(ot) { Target = node };
                                fld.Name = nm;
                                node = fld;
                            }
                        .)
                    )
                )
                |
                (
                    (. if (la.AfterEol) return; .)
                    "["
                        (. var idx = new DIndexer(t) { Target = node }; .)
                        Expr<out node>
                        (. 
                            idx.Index = node;
                            node = idx;
                        .)
                    "]"
                )
                |
                (
                    (. 
                        if (la.AfterEol) return;
                        var app = new DApplication(node, t); 
                    .)
                    "("
                        [ ApplicationArguments<app> ]
                        (. node = app; .)
                    ")"
                )
            }
        ).

    ApplicationArguments<DApplication app> =
        (. var node = default(DNode); .)
        Expr<out node> (. app.Arguments.Add(node); .)
        { "," Expr<out node> (. app.Arguments.Add(node); .) }.

    Literal<out DNode node> =
        (. node = null; .)
        (
              Name<out node>
            | SpecialName<out node>
            | Integer<out node>
            | Float<out node>
            | String<out node>
            | Char<out node>
            | Bool<out node>
            | Nil<out node>
            | IF (IsTuple()) Tuple<out node>
            | Array<out node>
            | Group<out node>
            | Base<out node>
            | IF (IsIterator()) Iterator<out node>
            | Block<out node>
        ).

    Iterator<out DNode node> =
        (. node = null; .)
        (
            "{"
                (. 
                    var it = new DIteratorLiteral(t);
                    it.YieldBlock = new DYieldBlock(t);
                .)
                Expr<out node> (. it.YieldBlock.Elements.Add(node); .) ","
                [
                    Expr<out node> (. it.YieldBlock.Elements.Add(node); .)
                    { "," Expr<out node> (. it.YieldBlock.Elements.Add(node); .) }
                ]
                (. node = it; .)
            "}"
        ).

    Label<out DNode node> =
        (. node = null; var name = ""; .)
        (
            identToken (. name = t.val; .)
            ":" (. var ot = t; .)
            Coalesce<out node>
            (. node = new DLabelLiteral(ot) { Label = name, Expression = node }; .)
        ).

    Base<out DNode node> =
        "base" (. node = new DBase(t); .).

    Array<out DNode node> =
        (. node = null; .)
        (
            "["
                (. var arr = new DArrayLiteral(t); .)
                [
                    Expr<out node> (. arr.Elements.Add(node); .)
                    { "," Expr<out node> (. arr.Elements.Add(node); .) }
                ]
                (. node = arr; .)
            "]"
        ).

    Tuple<out DNode node> =
        (. node = null; .)
        (
            "("
                (. var tup = new DTupleLiteral(t); .)
                Expr<out node> (. tup.Elements.Add(node); .)
                { "," Expr<out node> (. tup.Elements.Add(node); .) }
                (. node = tup; .)
            ")"
        ).

    Group<out DNode node> =
        (. node = null; .)
        (
            "(" Expr<out node> ")"
        ).

    Name<out DNode node> =
        (
            identToken
            (. node = new DName(t) { Value = t.val }; .)
        ).

    SpecialName<out DNode node> =
        (
            implicitToken
            (.
                var nm = int.Parse(t.val.Substring(1));
                node = new DName(t) { Value = "p" + nm };
                if (implicits == null)
                    implicits = new List<int>();
                implicits.Add(nm);
            .)
        ).

    Nil<out DNode node> = "nil" (. node = new DNilLiteral(t); .).

    Char<out DNode node> =
        (
            charToken
            (. node = new DCharLiteral(t) { Value = ParseChar() }; .)
        ).

    Integer<out DNode node> =
        (
            intToken
            (. node = new DIntegerLiteral(t) { Value = ParseInteger() }; .)
        ).

    Float<out DNode node> =
        (
            floatToken
            (. node = new DFloatLiteral(t) { Value = ParseFloat() }; .)
        ).

    String<out DNode node> =
        (
            stringToken
            (. node = ParseString(); .)
        ).

    Bool<out DNode node> =
        (
            ("true"|"false")
            (. node = new DBooleanLiteral(t) { Value = t.val == "true" }; .)
        ).

    DyalectItem =
        (
              ( Statement<out var node> (. Root.Nodes.Add(node); .) )
            | ( Import Separator )
        ).

    Dyalect =
        (
            DyalectItem { DyalectItem }
        ).

END Dyalect.
