test init
{
    import lib = refs/libtest
    import lib1 = refs/libtest1
}

test "Methods: clone"
{
    let xs = lib
    assert(true, xs == xs)
    assert(true, xs.clone() == xs)
}

test "Methods: getType"
{
    let x = lib
    assert(true, TypeInfo(x) == Module)
    assert(true, x.getType() == Module)
    var t = TypeInfo(x)
    assert(9, t.id)
    assert("Module", t.name)
}

test "Member access 1"
{
    var abs = lib::abs(-12)
    assert(12, abs)
    assert(2, lib::abs(-2))
}

test "Member access 2"
{
    var a = abs(-12)
    assert(12, a)
    var b = min(2, 1)
    assert(1, b)
}

test "Match module"
{
    var res = match lib {
        (sign: fn,) => fn(-12)
    }
    assert(-1, res)
}

test "Match module using is"
{
    var res = lib is (id: _,)
    assert(false, res)
}

test "Qualification 1"
{
    var res = lib1::sayHello()
    assert("Hello, User Jon", res)
}

test "Qualification 2"
{
    var res = lib::double(2)
    var res1 = lib1::double(2)
    assert(4, res)
    assert("double 2", res1)
}

test "Module as tuple 1"
{
    var libMod = lib
    var f = libMod::double
    assert(4, f(2))
}

test "Module as tuple 2"
{
    var libMod = lib
    var f = libMod::double
    assert(4, f(2))
    var f1 = lib::double
    assert(4, f1(2))
}

test "Types from module"
{
    var fb = Foobar(12, 2)
    assert(12, fb::x)
    assert(2, fb::y)
}

test "Types from module (qual)"
{
    var fb = lib::Foobar(12, 2)
    assert(12, fb[0])
    assert(2, fb[1])
}

test "Extending external type"
{
    func Foobar.getVal1() {
        "Foobar"
    }
    var fb = Foobar(1, 2)
    assert("Foobar", fb.getVal1())
}

test "Extending external type (qual)"
{
    func lib.Foobar.getVal2() {
        "Foobar"
    }
    var fb = lib::Foobar(1, 2)
    assert("Foobar", fb.getVal2())
}

test "External type name"
{
    var t = Foobar
    assert("Foobar", t.name)
}

test "External type name (qual)"
{
    var t = lib::Foobar
    assert("Foobar", t.name)
}

test "Constants"
{
    assert(3.14, pi)
    assert(3.14, lib::pi)
    try {
        lib::pi = 3.15
        assert(got: false)
    }
    catch {
        OperationNotSupported() => assert(got: true)
    }
}

test "Iterating module"
{
    var xs = []
    for (key,_) in lib {
        xs.add(key)
    }
    var shouldbe = ["abs","sign","double","min","max","userName","pi"]
    assert(shouldbe, xs)
}

test "Match external type"
{
    var a1 = lib1::Asset.Computer(model: "Lenovo", memory: 16, rank: 3)
    var a2 = Asset.Phone("1+", 8)
    func mem1(a) {
        match a {
            lib1::Asset.Computer(model, memory, rank) => memory,
            lib1::Asset.Phone(model, memory) => memory
        }
    }
    func mem2(a) {
        match a {
            Asset.Computer(model, memory, rank) => memory,
            Asset.Phone(model, memory) => memory
        }
    }
    func mem3(a) {
        match a {
            Computer(model, memory, rank) => memory,
            Phone(model, memory) => memory
        }
    }
    assert(16, mem1(a1))
    assert(8, mem1(a2))
    assert(16, mem2(a1))
    assert(8, mem2(a2))
    assert(16, mem3(a1))
    assert(8, mem3(a2))
}

test "Test external type"
{
    var t = lib1::Asset
    assert("Asset", t::name)
    var c = t.Computer("Acer", 4, 1)
    assert("Acer41", c::model+c::memory+c::rank)
    assert(true, c is lib1::Asset)
}
