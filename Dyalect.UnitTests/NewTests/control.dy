test "Guards 1"
{
    func safeDiv1(x, y) {
        return -1 when y == 0
        return x / y
    }
    var x = safeDiv1(4, 2)
    var y = safeDiv1(2, 0)
    assert(2, x)
    assert(-1, y)

    func safeDiv2(x, y) {
        return when y == 0
        return x / y
    }
    var res = safeDiv2(10, 0)
    assert(nil, res)

    func safeDiv3(x, y) {
        0 when y is 0 else x / y
    }
    assert(5, safeDiv3(10, 2))
    assert(0, safeDiv3(10, 0))
}

test "Guards 2"
{
    var x = 0
    x += 1 when x < 1
    assert(1, x)

    var y = 0
    y += 1 when y < 0
    assert(0, y)
}

test "Guards 3"
{
    let (x, y) = (1, 2)
    set (x, y) = (12, 14) when x > 0 && y > 1
    assert((12, 14), (x, y))
}

test "Guards 4"
{
    let (x, y) = (1, 2)
    var res
    if x < 2 { res = "x < 2" } when y > 10 else { res = "y < 10" }
    assert("y < 10", res)
}

test "Guards 5"
{
    func fib(n) =>
        n when n < 2 else fib(n - 1) + fib(n - 2)
    assert(89, fib(11))
}

test "Guards 6"
{
    var x = 1
    var y = 42
    x = y when y > 42 else y = 84
    assert(1, x)
    assert(84, y)
}

test "Return from method"
{
    func foo() {
        return 2
    }
    func bar() {
        return
        22
    }
    assert(2, foo())
    assert(nil, bar())
}