test "Integer literal"
{
    let res = 0x40 + 0x20
    assert(96, res)
}

test "Methods: min and max"
{
    assert(9223372036854775807, Integer.max())
    assert(-9223372036854775807, Integer.min() + 1)
}

test "Constructor"
{
    assert(12, Integer(12.2))
    assert(1222, Integer(1222))
    assert(5, Integer('5'))
}

test "Methods: default"
{
    assert(0, Integer.default())
}

test "Methods: getType"
{
    let x = 42
    assert(true, TypeInfo(x) == Integer)
    assert(true, x.getType() == Integer)
    let t = TypeInfo(x)
    assert(1, t.id)
    assert("Integer", t.name)
}


test "Methods: isMultiple"
{
    assert(true, 12.isMultiple(3))
    assert(true, 12.isMultiple(of: 2))
    assert(true, 340.isMultiple(of: 10))
    assert(false, 340.isMultiple(of: 13))
}

test "Methods: parse"
{
    assert(42, Integer.parse("42"))
    assert(2, Integer.parse('2'))
    assert(nil, Integer.parse("three"))
}

test "Ranges"
{
    assert([0,1,2,3,4,5], [0..5])
    assert([0,2,4], (0^2..4).toArray())
}