test "Char literal"
{
    var res = '\'' + 'F' + '\'' + '\s'
    assert("'F' ", res)
}

test "Constructor"
{
    assert('c', Char('c'))
    assert('A', Char(65))
    assert('6', Char('6'))
    assert('\u0006', Char(6))
    assert('f', Char("foo"))
}

test "getType"
{
    let x = 'A'
    assert(true, TypeInfo(x) == Char)
    assert(true, x.getType() == Char)
    let t = TypeInfo(x)
    assert(4, t.id)
    assert("Char", t.name)
}

test "default"
{
    assert('\0', Char.default())
}

test "min and max"
{
    assert('\0', Char.min())
    assert('\uffff', Char.max())
    assert(true, Char.default() == Char.min())
}

test "Range"
{
    assert(['a','b','c','d','e','f'], ['a'..'f'])
    assert(['a','c','e'], ('a'^2..'f').toArray())
}

test "Char comparison"
{
    assert(true, 'c' == "c")
    assert(true, "c" == 'c')
    assert(false, 'c' == "cc")
    assert(false, "cc" == 'c')
    assert(false, 'c' > "cc")
    assert(true, 'c' < "cc")
    assert(true, "cc" > 'c')
    assert(false, "cc" < 'c')
}

test "upper and isUpper"
{
    assert(true, 'C' == 'c'.upper())
    assert(true, 'C'.isUpper())
}

test "lower and isLower"
{
    assert(true, 'c' == 'C'.lower())
    assert(true, 'c'.isLower())
}

test "isWhitespace"
{
    assert(true, '\s'.isWhiteSpace())
    assert(true, ' '.isWhiteSpace())
    assert(true, '\u0020'.isWhiteSpace())
    assert(true, '\t'.isWhiteSpace())
}

test "isControl"
{
    assert(true, '\t'.isControl())
    assert(true, '\b'.isControl())
    assert(false, 't'.isControl())
}

test "isLetterOrDigit"
{
    assert(true, '9'.isDigit())
    assert(false, 'A'.isDigit())
    assert(true, 'A'.isLetter())
    assert(false, '1'.isLetter())
    assert(true, '9'.isLetterOrDigit())
    assert(true, 't'.isLetterOrDigit())
}

test "order"
{
    assert(65, 'A'.order())
    assert(54, '6'.order())
}

test "Math with chars"
{
    let a = 'a'
    let b = 'b'
    assert('b', a + 1)
    assert('a', b - 1)
    assert("ab", a + b)
    assert("abcdef", a + b + "cdef")
}
