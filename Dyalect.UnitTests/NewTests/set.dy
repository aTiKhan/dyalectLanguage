test "Constructor"
{
    let xs = Set(1, 2, 3)
    assert([1,2,3], xs.toArray())
}

test "Methods: clone"
{
    let xs = Set()
    assert(true, xs == xs)
    assert(true, xs.clone() == xs)
}

test "Methods: getType"
{
    let x = Set()
    assert(true, TypeInfo(x) == Set)
    assert(true, x.getType() == Set)
    var t = TypeInfo(x)
    assert(15, t.id)
    assert("Set", t.name)
}

test "Methods: add, len"
{
    let xs = Set()
    xs.add(4)
    xs.add(1)
    xs.add(2)
    xs.add(2)
    assert(3, xs.len())
    assert([4,1,2], xs.toArray())
}

test "Methods: add, remove"
{
    let xs = Set()
    xs.add(5)
    xs.add(6)
    xs.remove(5)
    xs.remove(8) //non-existent
    assert([6], xs.toArray())
}

test "Methods: add, clear, contains"
{
    let xs = Set()
    xs.add(5)
    xs.add(6)
    assert(true, xs.contains(5))
    assert(true, xs.contains(6))
    xs.clear()
    assert(false, xs.contains(5))
    assert(false, xs.contains(6))
}

test "Methods: toArray, toTuple"
{
    let xs = Set(1, 2, 3, 4, 5)
    assert([1,2,3,4,5], xs.toArray())
    let ys = Set(1, 2, 2, 3)
    assert([1,2,3], ys.toArray())
    assert((1,2,3), ys.toTuple())
}

test "Equality test"
{
    let xs = Set(1,2,3,4,5)
    let ys = Set(1,2,3,4,5)
    assert(true, xs == ys)
    assert(5, xs.len())
    assert(5, ys.len())
    assert(false, xs != ys)
}

test "Methods: intersect"
{
    let xs = Set(values: [1..10])
    let ys = Set(values: [5..15])
    xs.intersect(with: ys)
    assert([5,6,7,8,9,10], xs.toArray())
}

test "Methods: union"
{
    let xs = Set(values: [1..3])
    let ys = Set(values: [4..6])
    xs.union(with: ys)
    assert([1,2,3,4,5,6], xs.toArray())
}

test "Methods: except"
{
    let xs = Set(values: [1..10])
    let ys = Set(values: [4..7])
    xs.except(with: ys)
    assert([1,2,3,8,9,10], xs.toArray())
}

test "Methods: overlaps"
{
    let xs = Set(values: [1..10])
    var ys = Set(values: [5..15])
    assert(true, xs.overlaps(with: ys))
    ys = Set(values: [11..15])
    assert(false, xs.overlaps(with: ys))
}

test "Methods: isSubset"
{
    let xs = Set(values: [5..10])
    var ys = Set(values: [1..20])
    assert(false, ys.isSubset(of: xs))
    assert(true, xs.isSubset(of: ys))
}

test "Methods: isSuperset"
{
    let xs = Set(values: [5..10])
    var ys = Set(values: [1..20])
    assert(false, xs.isSuperset(of: ys))
    assert(true, ys.isSuperset(of: xs))
}

test "Methods: toString"
{
    let xs = Set(1, 2, 3)
    assert("Set (1, 2, 3)", xs.toString())
}
