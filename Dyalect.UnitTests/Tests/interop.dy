#region "Uri"
	let _Uri = Interop("System.Uri,System")
	let uri = _Uri.[new]("http://dyalect.dy/wiki")
	assert("dyalect.dy", Interop.ConvertFrom << uri.[get_Host]())
#endregion

#region "Version"
	let _Version = Interop("System.Version,mscorlib")
	let v = _Version.[new]("12.0.34.1")
	let res = v.[get_Major]()
	assert("Interop", res.GetType().name)
	assert("Integer", Interop.ConvertFrom(res).GetType().name)
	assert(12, Interop.ConvertFrom << res)
#endregion

#region "List<int>"
	let _List = Interop("System.Collections.Generic.List`1[System.Int32],mscorlib")
	let xs = _List.[new]()
	xs.Add(12)
	xs.Add(34)
	assert(2, Interop.ConvertFrom << xs.[get_Count]())
	assert(12, Interop.ConvertFrom << xs.[get_Item](0))
	assert(34, Interop.ConvertFrom << xs.[get_Item](1))
	xs.Add(144)
	assert(144, Interop.ConvertFrom << xs.[get_Item](2))
	assert(3, Interop.ConvertFrom << xs.[get_Count]())
#endregion

#region "Json"
	let _Json = Interop("System.Text.Json.JsonDocument,System.Text.Json")
	let _JsonOptions = Interop("System.Text.Json.JsonDocumentOptions,System.Text.Json")
	let options = _JsonOptions.[new]()
	let doc = _Json.Parse(<[
	{
		"name": "John",
		"surname": "Doe",
		"age": 33
	}]>, options)
	let root = doc.[get_RootElement]();
	assert("John", Interop.ConvertFrom << root.GetProperty("name").GetString())
	assert("Doe", Interop.ConvertFrom << root.GetProperty("surname").GetString())
	assert(33, Interop.ConvertFrom << root.GetProperty("age").GetInt32())
#endregion

#region "OSVersion"
	let _OS = Interop("System.Environment,System.Runtime")
	let ver = _OS.[get_OSVersion]()
	let str = Interop.ConvertFrom << ver.[get_VersionString]()
	assert(true, str is String && str.Length() > 0)
#endregion

#region "Typed array"
	let _Array = Interop("System.Array,mscorlib")
	let _Type = Interop("System.Type,mscorlib")
	let _Char = _Type.GetType("System.Char")
	let arr = _Array.CreateInstance(_Char, 3)
	arr.SetValue('f', 0)
	arr.SetValue('o', 1)
	arr.SetValue('o', 2)
	let _String = Interop("System.String,mscorlib")
	let str = _String.[new](arr)
	assert("foo", Interop.ConvertFrom << str)
#endregion

#region "Conversion"
	let _Type = Interop("System.Type,mscorlib")
	let _String = Interop("System.String,mscorlib")
	var str

	try {
		str = _String.[new](["f","o","o"])
	} catch {
		@MethodNotFound => assert(got: true)
	}

	let _CharArrayType = _Type.GetType("System.Char[]")
	str = _String.[new](Interop.ConvertTo(["f","o","o"], _CharArrayType))
	assert("foo", Interop.ConvertFrom << str)
#endregion

#region "CreateArray"
	let arr = Interop.CreateArray(Interop.Int64, 3)
	arr.SetValue(0, 0)
	arr.SetValue(1, 1)
	arr.SetValue(2, 2)
	assert(0, Interop.ConvertFrom << arr.GetValue(0))
	assert(1, Interop.ConvertFrom << arr.GetValue(1))
	assert(2, Interop.ConvertFrom << arr.GetValue(2))
#endregion