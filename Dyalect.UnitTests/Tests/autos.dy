type Box(key)
let boxCollector = []
func Box.dispose() {
    boxCollector.add(this\key)
}

func autosSimple1() {
    boxCollector.clear()
    {
        auto x = Box("foo")
        boxCollector.add("wait.foo")
    }
    assert(["wait.foo", "foo"], boxCollector)
}

func autosSimple2() {
    boxCollector.clear()
    {
        auto x = Box("foo")
        boxCollector.add("wait.foo")
        {
            auto y = Box("bar")
            boxCollector.add("wait.bar")
        }
    }
    assert(["wait.foo", "wait.bar", "bar", "foo"], boxCollector)
}

func autosSimple3() {
    boxCollector.clear()
    for x in 1..6 {
        auto obj = Box(x)
        if x == 3 {
            continue
        }
        if x == 6 {
            break
        }
    }
    assert([1,2,3,4,5,6], boxCollector)
}

func autosSimple4() {
    boxCollector.clear()
    func doit(b) {
        if b {
            auto a = Box(2)
        } else {
            auto b = Box(4)
        }
        auto c = Box(100)
    }
    doit(true)
    doit(false)
    assert([2, 100, 4, 100], boxCollector)
}

func autosSimple5() {
    boxCollector.clear()
    var x = 5
    while x > 0 {
        auto a = Box(x)
        if x == 1 {
            break
        }
        x = x - 1
        if x == 3 {
            continue
        }
    }
    assert([5,4,3,2,1], boxCollector)
}

func autosFunc1() {
    boxCollector.clear()
    func run() {
        auto x = Box("foo")
        auto y = Box("bar")
    }
    run()
    assert(["foo", "bar"], boxCollector)
}

func autosFunc2() {
    boxCollector.clear()
    func iter() {
        auto x = Box("fin")
        boxCollector.add(1)
        yield 1
        boxCollector.add(2)
        yield 2
        boxCollector.add(3)
        yield 3
    }
    for _ in iter() { }
    assert([1,2,3,"fin"], boxCollector)
}

func autosFunc3() {
    boxCollector.clear()
    func testFn() {
        auto x = Box("x")
        {
            auto y = Box("y")
            if true {
                auto z = Box("z")
                return
            }
        }
    }
    testFn()
    assert(["z","y","x"], boxCollector)
}

func autosFunc4() { //Bug #367
    boxCollector.clear()
    func foobar(flag) {
        auto a = Box('a')
        if flag {
            return
        }
        auto b = Box('b')
    }
    foobar(flag: true)
    foobar(flag: false)
    foobar(flag: true)
    assert(['a', 'a', 'b', 'a'], boxCollector)
}

func autosFunc5() {
    boxCollector.clear()
    func iter() {
        auto a = Box(10)
        yield { auto a = Box(2) }
        yield { auto a = Box(4) }
        yield { auto a = Box(6) }
        yield { auto a = Box(8) }
        { auto a = Box(9) }
    }
    for _ in iter() { }
    assert([2,4,6,8,9,10], boxCollector)
}

func autosExceptions1() {
    boxCollector.clear()
    func testE() {
        auto x = Box(12)
        throw "err"
    }
    try {
        testE()
    } catch _ {
        assert([12], boxCollector)
    }
}

func autosExceptions2() {
    boxCollector.clear()
    func test1() {
        auto x = Box("y")
        {
            auto y = Box("z")
            throw "Error"
        }
    }
    func run() {
        auto old = Box("x")
        test1()
    }
    let msg = try {
        run()
    } catch e {
        e
    }
    assert("Error", msg)
    assert(["z", "y", "x"], boxCollector)
}

func autosExceptions3() {
    boxCollector.clear()
    try {
        auto x = Box(42)
        throw 84
    } catch e {
        boxCollector.add(e\detail)
    }
    assert([42,84], boxCollector)
}

func autosExceptions4() {
    boxCollector.clear()
    func divide(x, y) {
        auto def = Box(-100)
        try {
            auto box = Box(12)
            return x / y
        } catch _ {
            return def\key
        }
    }
    var xs = [divide(10, 2), divide(2, 0)]
    assert([5, -100], xs)
    assert([12, -100, 12, -100], boxCollector)
}

func autosExceptions5() {
    boxCollector.clear()
    func doit() {
        var x = {
            throw 24
            auto b = Box(12)
        }
    }
    try {
        doit()
    } catch e {
        auto b = Box(e\detail)
    }
    assert([24], boxCollector)
}

func autosExceptions6() {
    boxCollector.clear()
    func doit() {
        throw {
            auto b = Box(22)
        }
        auto c = Box(2)
    }
    try {
        doit()
    } catch _ { }
    assert([22], boxCollector)
}

func autosCatch1() { //Bug #370
    boxCollector.clear()
    try {
        throw "err"
    } catch e {
        auto b = Box(1)
    }
    assert([1], boxCollector)
}

func autosCatch2() { //Bug #370
    boxCollector.clear()
    func inner() {
        try {
            throw "err"
        } catch e {
            auto b = Box(1)
            throw
        }
    }
    try {
        inner()
    } catch e {
        assert(e, "err")
        assert([1], boxCollector)
    }
}

func autosCatch3() {
    boxCollector.clear()
    func inside() {
        try {
            throw 'a'
        } catch _ {
            auto b = Box("auto")
            throw 'b'
            throw
        }
    }
    var x
    try {
        inside()
    } catch e {
        x = e\detail
    }
    assert('b', x)
}