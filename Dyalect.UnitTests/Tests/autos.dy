type Box(key)
const boxCollector = []
func Box.dispose() {
    boxCollector.add(this:key)
}

func autosSimple1() {
    boxCollector.clear()
    {
        auto x = Box("foo")
        boxCollector.add("wait.foo")
    }
    assert(["wait.foo", "foo"], boxCollector)
}

func autosSimple2() {
    boxCollector.clear()
    {
        auto x = Box("foo")
        boxCollector.add("wait.foo")
        {
            auto y = Box("bar")
            boxCollector.add("wait.bar")
        }
    }
    assert(["wait.foo", "wait.bar", "bar", "foo"], boxCollector)
}

func autosSimple3() {
    boxCollector.clear()
    for x in [1..6] {
        auto obj = Box(x)
        if x == 3 {
            continue
        }
        if x == 6 {
            break
        }
    }
    assert([1,2,3,4,5,6], boxCollector)
}

func autosFunc1() {
    boxCollector.clear()
    func run() {
        auto x = Box("foo")
        auto y = Box("bar")
    }
    run()
    assert(["foo", "bar"], boxCollector)
}

func autosFunc2() {
    boxCollector.clear()
    func iter() {
        auto x = Box("fin")
        boxCollector.add(1)
        yield 1
        boxCollector.add(2)
        yield 2
        boxCollector.add(3)
        yield 3
    }
    for _ in iter() { }
    assert([1,2,3,"fin"], boxCollector)
}

func autosFunc3() {
    boxCollector.clear()
    func testFn() {
        auto x = Box("x")
        {
            auto y = Box("y")
            if true {
                auto z = Box("z")
                return
            }
        }
    }
    testFn()
    assert(["z","y","x"], boxCollector)
}

func autosExceptions1() {
    boxCollector.clear()
    func testE() {
        auto x = Box(12)
        throw "err"
    }
    try {
        testE()
    } catch _ {
        assert([12], boxCollector)
    }
}

func autosExceptions2() {
    boxCollector.clear()
    func test1() {
        auto x = Box("y")
        {
            auto y = Box("z")
            throw "Error"
        }
    }
    func run() {
        auto old = Box("x")
        test1()
    }
    const msg = try {
        run()
    } catch e {
        e
    }
    assert("Error", msg)
    assert(["z", "y", "x"], boxCollector)
}

func autosExceptions3() {
    boxCollector.clear()
    try {
        auto x = Box(42)
        throw 84
    } catch e {
        boxCollector.add(e)
    }
    assert([42,84], boxCollector)
}