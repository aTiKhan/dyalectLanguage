#region "For as expression, break with value"
    #optimizer enable
    func void(x) => x
    let x =
        for x in 0^2..100 {
            void(x)
            if x > 10 {
                break x
            }
            void(x)
        }
    assert(12, x)
    let y =
        for x in 0..100 {
            if x > 10 {
                break x
            }
        }
    assert(11, y)
#endregion

#region "For as expression, break"
    #optimizer enable
    let x =
        for x in 0..10 {
            break
        }
    assert(nil, x)
    let y =
        for x in 0..10 {
            x
        }
    assert(nil, y)
#endregion

#region "For as function body"
    #optimizer enable
    func run(to) {
        for x in 0..to {
            if x > 0 {
                break x
            }
        }
    }
    assert(1, run(10))
#endregion

#region "For as function body 2"
    #optimizer enable
    func run(to) {
        var ret
        for x in 0^2..to {
            if x > 0 {
                ret = x
                break
            }
        }
        return ret
    }
    assert(2, run(10))
#endregion

#region "For: down to 1"
    #optimizer enable
    var last
    for x in 20^-2..<0 {
        last = x
    }
    assert(2, last)
#endregion

#region "For: down to 2"
    #optimizer enable
    var last = 0
    for _ in 20^-7..0 {
        last += 1
    }
    assert(3, last)
#endregion

#region "For: up to"
    #optimizer enable
    var last = 0
    for _ in 20^7..0 {
        last += 1
    }
    #optimizer disable
    var last2 = 0
    for _ in 20^7..0 {
        last2 += 1
    }
    assert(last, last2)
    #optimizer enable
#endregion