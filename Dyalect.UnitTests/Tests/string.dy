#test "String literal"
    var fst = "some\tstring with\"inner quotes\" and such (and a buck \u0024)"
    var snd = "some\u0009string with\u0022inner quotes\u0022 and such (and a buck $)"
    assert(fst, snd)
#endtest

#test "Constructor"
    var res = String("one", "two", "three", 44)
    assert("onetwothree44", res)
    var str = String(values: yields { 'a','b','c' })
    assert("abc", str)
#endtest

#test "Methods: default"
    assert("", String.default())
#endtest

#test "Methods: getType"
    let x = "Foo"
    assert(true, TypeInfo(x) == String)
    assert(true, x.getType() == String)
    var t = TypeInfo(x)
    assert(6, t.code)
    assert("String", t.name)
#endtest

#test "Methods: len"
    var str = "Hello, world!"
    var res = str.len()
    assert(13, res)
#endtest

#test "Methods: indexOf, lastIndexOf"
    var str = "Hello, world!"
    assert(4, str.indexOf("o"))
    assert(8, str.lastIndexOf("o"))
    assert(8, str.indexOf("o", fromIndex: 7))
    assert(3, str.lastIndexOf("l", fromIndex: 6, count: 4))
#endtest

#test "Comparison"
    assert(false, "1" > "2")
    assert(true, "1" < "2")
#endtest

#test "Methods: split"
    var str = "Name=John;Surname=Doe;Age=21;Gender=Male"
    var arr = str.split('=', ';')
    assert(["Name","John","Surname","Doe","Age","21","Gender","Male"], arr)
#endtest

#test "Addition"
    var str = "foo"
    var res = str[0] + str[2]
    assert("fo", res)
#endtest

#test "Methods: lower, upper"
    var str1 = "FOO"
    var str2 = "bar"
    var res = str1.lower() + str2.upper()
    assert("fooBAR", res)
#endtest

#test "Methods: startsWith, endsWith"
    var res = "fooBar".startsWith("foo")
    assert(true, res)
    res = "fooBar".endsWith("Bar")
    assert(true, res)
#endtest

#test "Methods: substring"
    var res = "abcdef".substring(2, 4) + "qwerty".substring(4)
    assert("cdefty", res)
    res = "abcdef".substring(-3)
    assert("def", res)
#endtest

#test "Methods: capitalize"
    var res = "camelCase".capitalize()
    assert("Camelcase", res)
    var str = "alphaBETA"
    assert("Alphabeta", str.capitalize())
#endtest

#test "Methods: concat"
    var res = String.concat("one", "two", "three", 44)
    assert("onetwothree44", res)
    res = String.concat(12, true, "bool")
    assert("12truebool", res)
#endtest

#test "Methods: contains"
    var res = "fooBar".contains("oBa")
    assert(true, res)
#endtest

#test "Methods: trim, trimStart, trimEnd"
    var res = " ss".trim() + "--dd--".trimStart('-') + "!ee!".trimEnd('!')
    assert("ssdd--!ee", res)
#endtest

#test "Methods: isEmpty"
    assert(true, "".isEmpty())
    assert(true, " \s ".isEmpty())
    assert(true, " \t\r\n\t ".isEmpty())
    assert(false, "hh".isEmpty())
#endtest

#test "Indexing"
    var str = "Hello!"
    assert('H', str[0])
    assert('!', str[str.len() - 1])
    var xs = "abcde"
    assert('e', xs[-1])
    assert('a', xs[-5])
#endtest

#test "Slicing"
    var story = "Dyalect is going to be great!"
    var res = story[-6..]
    assert("great!", res)

    var str = "the quick brown fox jumped over the lazy dogs"
    assert("lazy dogs",  str[-9..])
    assert("lazy dogs",  str[36..])
    assert("the quick",  str[..8])
    assert(str,  str[..])
#endtest

#test "Methods: join"
    var str = String.join("foo", 1, 3, 44, true, separator: ";")
    assert("foo;1;3;44;true", str)
#endtest

#test "Methods: padLeft, padRight"
    var foo = "12"
    assert("   12", foo.padLeft(5))
    assert("00012", foo.padLeft(with: '0', to: 5))
    assert("12   ", foo.padRight(5))
    assert("12000", foo.padRight(with: '0', to: 5))
#endtest

#test "Methods: replace"
    assert("for gem gemetric", "for rem remetric".replace("rem", "gem"))
    assert("foobar", "foobar".replace(value: "FOO", with: "ZOO"))
    assert("ZOObar", "foobar".replace(value: "FOO", with: "ZOO", ignoreCase: true))
#endtest

#test "Methods: remove"
    var str = "from to"
    assert("from", str.remove(4))
    assert("from", str.remove(4, 3))
    assert("from ", str.remove(5))
    assert("froo", str.remove(3, 3))
#endtest

#test "Methods: repeat"
    var str = String.repeat('*', 5)
    assert("*****", str)
    str = String.repeat(value: '!', count: 3)
    assert("!!!", str)
#endtest

#test "Methods: reverse"
    var str = "foobar"
    assert("raboof", str.reverse())
#endtest

#test "Multiline string 1"
    var str = <[ first
    second
    third..]>
    var pat = " first\n    second\n    third.."
    assert(pat, str)
#endtest

#test "Multiline string 2"
    var str = <[ first
    <[second]>]>
    third..]>
    var pat = " first\n    <[second]>\n    third.."
    assert(pat, str)
#endtest

#test "Interpolation 1"
    var x = 42
    var y = 12
    var res = "the value of (x + y) is \(x + y)"
    assert("the value of (x + y) is 54", res)
    assert("[1, 2, 3]", "\([1,2,3])")
    assert("(1, 2, 3)", "\((1,2,3))")
#endtest

#test "Interpolation 2"
    func doubleMe(x) {
        x + x
    }
    var foo = 13
    var res = "doubleMe(foo) = \(doubleMe(foo))"
    assert("doubleMe(foo) = 26", res)
#endtest

#test "Interpolation 3"
    var x = 3
    var y = 2
    var res = "value = \((x * (2 + 3)) * y)"
    assert("value = 30", res)
#endtest

#test "Concatenation 1"
    var str = "str"
    assert("1str", 1 + str)
    assert("2.1str", 2.1 + str)
    assert("truestr", true + str)
    assert("nilstr", nil + str)
    func sum(x,y) { x + y }
    assert("sum(x, y)str", sum + str)
#endtest

#test "Concatenation 2"
    type TypeInString()
    func TypeInString.toString() => "!dummy!"

    var x = TypeInString()
    var str = "str" + x
    assert("str!dummy!", str)
    str = x + "str"
    assert("!dummy!str", str)
#endtest

#test "Methods: toCharArray"
    let str = "Hello"
    let arr = str.toCharArray()
    assert(['H', 'e', 'l', 'l', 'o'], arr)
#endtest

#test "Methods: repeat"
    let str = String.repeat("ha", 5)
    assert("hahahahaha", str)
#endtest