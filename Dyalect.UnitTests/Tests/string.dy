#test "String literal"
    var fst = "some\tstring with\"inner quotes\" and such (and a buck \u0024)"
    var snd = "some\u0009string with\u0022inner quotes\u0022 and such (and a buck $)"
    assert(fst, snd)
#endtest

#test "Constructor"
    var res = String("one", "two", "three", 44)
    assert("onetwothree44", res)
    var str = String(values: yields { 'a','b','c' })
    assert("abc", str)
#endtest

#test "Methods: Default"
    assert("", String.Default())
#endtest

#test "Methods: GetType"
    let x = "Foo"
    assert(true, TypeInfo(x) == String)
    assert(true, x.GetType() == String)
    var t = TypeInfo(x)
    assert(6, t.Code)
    assert("String", t.Name)
#endtest

#test "Methods: Len"
    var str = "Hello, world!"
    var res = str.Length()
    assert(13, res)
#endtest

#test "Methods: IndexOf, LastIndexOf"
    var str = "Hello, world!"
    assert(4, str.IndexOf("o"))
    assert(8, str.LastIndexOf("o"))
    assert(8, str.IndexOf("o", fromIndex: 7))
    assert(3, str.LastIndexOf("l", fromIndex: 6, count: 4))
#endtest

#test "Comparison"
    assert(false, "1" > "2")
    assert(true, "1" < "2")
#endtest

#test "Methods: Split"
    var str = "Name=John;Surname=Doe;Age=21;Gender=Male"
    var arr = str.Split('=', ';')
    assert(["Name","John","Surname","Doe","Age","21","Gender","Male"], arr)
#endtest

#test "Addition"
    var str = "foo"
    var res = str[0] + str[2]
    assert("fo", res)
#endtest

#test "Methods: Lower, Upper"
    var str1 = "FOO"
    var str2 = "bar"
    var res = str1.Lower() + str2.Upper()
    assert("fooBAR", res)
#endtest

#test "Methods: StartsWith, EndsWith"
    var res = "fooBar".StartsWith("foo")
    assert(true, res)
    res = "fooBar".EndsWith("Bar")
    assert(true, res)
#endtest

#test "Methods: Substring"
    var res = "abcdef".Substring(2, 4) + "qwerty".Substring(4)
    assert("cdefty", res)
    res = "abcdef".Substring(-3)
    assert("def", res)
#endtest

#test "Methods: Capitalize"
    var res = "camelCase".Capitalize()
    assert("Camelcase", res)
    var str = "alphaBETA"
    assert("Alphabeta", str.Capitalize())
#endtest

#test "Methods: Concat"
    var res = String.Concat("one", "two", "three", 44)
    assert("onetwothree44", res)
    res = String.Concat(12, true, "bool")
    assert("12truebool", res)
#endtest

#test "Methods: Contains"
    var res = "fooBar".Contains("oBa")
    assert(true, res)
#endtest

#test "Methods: Trim, TrimStart, TrimEnd"
    var res = " ss".Trim() + "--dd--".TrimStart('-') + "!ee!".TrimEnd('!')
    assert("ssdd--!ee", res)
#endtest

#test "Methods: IsEmpty"
    assert(true, "".IsEmpty())
    assert(true, " \s ".IsEmpty())
    assert(true, " \t\r\n\t ".IsEmpty())
    assert(false, "hh".IsEmpty())
#endtest

#test "Indexing"
    var str = "Hello!"
    assert('H', str[0])
    assert('!', str[str.Length() - 1])
    var xs = "abcde"
    assert('e', xs[-1])
    assert('a', xs[-5])
#endtest

#test "Slicing"
    var story = "Dyalect is going to be great!"
    var res = story[-6..]
    assert("great!", res)

    var str = "the quick brown fox jumped over the lazy dogs"
    assert("lazy dogs", str[-9..])
    assert("lazy dogs", str[36..])
    assert("the quick", str[..8])
    assert(str, str[..])
#endtest

#test "Methods: Join"
    var str = String.Join("foo", 1, 3, 44, true, separator: ";")
    assert("foo;1;3;44;true", str)
#endtest

#test "Methods: PadLeft, PadRight"
    var foo = "12"
    assert("   12", foo.PadLeft(5))
    assert("00012", foo.PadLeft(with: '0', to: 5))
    assert("12   ", foo.PadRight(5))
    assert("12000", foo.PadRight(with: '0', to: 5))
#endtest

#test "Methods: Replace"
    assert("for gem gemetric", "for rem remetric".Replace("rem", "gem"))
    assert("foobar", "foobar".Replace(value: "FOO", with: "ZOO"))
    assert("ZOObar", "foobar".Replace(value: "FOO", with: "ZOO", ignoreCase: true))
#endtest

#test "Methods: Remove"
    var str = "from to"
    assert("from", str.Remove(4))
    assert("from", str.Remove(4, 3))
    assert("from ", str.Remove(5))
    assert("froo", str.Remove(3, 3))
#endtest

#test "Methods: Repeat"
    var str = String.Repeat('*', 5)
    assert("*****", str)
    str = String.Repeat(value: '!', count: 3)
    assert("!!!", str)
#endtest

#test "Methods: Reverse"
    var str = "foobar"
    assert("raboof", str.Reverse())
#endtest

#test "Multiline string 1"
    var str = <[ first
    second
    third..]>
    var pat = " first\n    second\n    third.."
    assert(pat, str)
#endtest

#test "Multiline string 2"
    var str = <[ first
    <[second]>]>
    third..]>
    var pat = " first\n    <[second]>\n    third.."
    assert(pat, str)
#endtest

#test "Interpolation 1"
    var x = 42
    var y = 12
    var res = "the value of (x + y) is \(x + y)"
    assert("the value of (x + y) is 54", res)
    assert("[1, 2, 3]", "\([1,2,3])")
    assert("(1, 2, 3)", "\((1,2,3))")
#endtest

#test "Interpolation 2"
    func doubleMe(x) {
        x + x
    }
    var foo = 13
    var res = "doubleMe(foo) = \(doubleMe(foo))"
    assert("doubleMe(foo) = 26", res)
#endtest

#test "Interpolation 3"
    var x = 3
    var y = 2
    var res = "value = \((x * (2 + 3)) * y)"
    assert("value = 30", res)
#endtest

#test "Concatenation 1"
    var str = "str"
    assert("1str", 1 + str)
    assert("2.1str", 2.1 + str)
    assert("truestr", true + str)
    assert("nilstr", nil + str)
    func sum(x,y) { x + y }
    assert("sum(x, y)str", sum + str)
#endtest

#test "Concatenation 2"
    type TypeInString()
    func TypeInString.ToString() => "!dummy!"

    var x = TypeInString()
    var str = "str" + x
    assert("str!dummy!", str)
    str = x + "str"
    assert("!dummy!str", str)
#endtest

#test "Methods: ToCharArray"
    let str = "Hello"
    let arr = str.ToCharArray()
    assert(['H', 'e', 'l', 'l', 'o'], arr)
#endtest

#test "Methods: Repeat"
    let str = String.Repeat("ha", 5)
    assert("hahahahaha", str)
#endtest