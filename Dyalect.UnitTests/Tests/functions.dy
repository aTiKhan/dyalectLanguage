
func tailRecursion1() {
    var xs = []
    func loop(n, max) {
        func loop(i) {
            if i < max {
                xs.add(i)
                loop(i + 1)
            }
        }
        loop(n)
    }
    loop(0, 10)
    assert([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], xs)
}

func tailRecursion2() {
    func foo(a, b) {
        func foo(a, b, c) {
            if a + b == 0 {
                c
            } else {
                var x = caller()(a + b, -(a + b))
                foo(x, -x, x + a + b - c)
            }
        }
        if a + b == 0 {
            42
        } else {
            foo(a, b, a + b)
        }
    }
    var res = foo(1, 2)
    assert(42, res)
}

func tailRecursion3() {
    func withpm(obj) {
        match obj {
            (x, y) => withpm(42),
            (x, y, z) => withpm(84),
            42 => "foo",
            84 => "bar"
        }
    }
    var res = withpm((1,2))
    assert(res, "foo")
}

func recursionTest1() { //#62
    var acc = 0
    func iter(n) {
        if n == 0 {
            0
        } else {
            acc = acc + 1;
            iter(n - 1)
        }
    }
    iter(10)
    assert(acc, 10)
}

func recursionTest2() { //#62
    func foo(x, y) {
        var foo = (x, y) => x - y
        foo(x, y)
    }
    var res = foo(12, 2)
    assert(res, 10)
}


func functionTest1() {
    func sum(x,y) {
        if y == 2 {
            x + y
        } else {
            var z = sum(y, 2)
            x -= 1
            x + z
        }
    }
    var res = sum(2, 4)
    assert(7, res)
}

func functionTest2() {
    func test(x, y, z) {
        (x, y, z)
    }
    var res = test(z: 12, x: 3, y: 1)
    assert((3, 1, 12), res)
}

func functionTest3() {
    func test(x, x1 = 144, y, z, z1 = 33) {
        (x, x1, y, z, z1)
    }
    var res = test(z: 12, x: 3, y: 1)
    assert((3, 144, 1, 12, 33), res)
}

func functionTest4() {
    func test(args..., separator = ",", terminator = "\n") {
        [args, separator, terminator]
    }
    assert( [(1,2), ",", "\n"], test(1,2) )
    assert( [(1,2), ",", "\r"], test(1,2, terminator: "\r") )
    assert( [(1,2), ";", "\r"], test(1,2, terminator: "\r", separator: ";") )
}

func functionTest5() {
    func test(optional = "foo") {
        optional
    }
    assert("foo", test())
    var arg = "bar"
    assert(arg, test(arg))
}

func functionTest6() {
    func apply(fun, fst) { snd => fun(fst, snd) }
    func sum(x, y) { x + y }
    var sum2 = apply(sum, 2)
    assert(5, sum2(3))
}

func functionTest7() {
    func apply(fun, fst) { snd => fun(fst, snd) }
    func flip(fun) { (y, x) => fun(x, y) }
    func sub(x, y) { x - y }
    var sub3 = apply(flip(sub), 3)
    assert(6, sub3(9))
}

func functionTest8() {
    var res
    func variadic(args...) {
        res = args.len()
    }
    variadic(args: (1,2,3))
    assert(3, res)
}

func functionTest9() {
    var res
    func variadic(args...) {
        res = args.len()
    }
    variadic([1,2,3,4])
    assert(1, res)
}

func functionTest10() {
    var f = Function(12)
    assert(12, f())
}

func functionTest11() {
    var f = $0 ?? 22
    assert(12, f(12))
    assert(22, f(0))
}

func functionTest12() {
    func foo() {
        assert("foo", current().name)
        assert("bar", caller().name)
    }
    func bar() {
        foo()
    }
    bar()
}

func functionTest13() {
    assert(functionTest13.name, current().name)
    assert(nil, caller())
}

func functionTest14() {
    func thy() { caller() }
    func snd() { thy() }
    func fst() { snd() }
    var s = fst()
    assert("snd", s.name)
}

func functionTest15() {
    const f = x => x * x
    assert("<func>", f.name)
}

func functionTest16() {
    func foo() {
        return "\(current().name) is called by \(caller().name)"
    }
    func bar() {
        foo()
    }
    var s = bar()
    assert("foo is called by bar", s)
}

func functionTest17() { //#294
    $0 + $1
    assert(true, true)
}

func variadicTest1() {
    func takeItAll(x, y, args...) {
        var str = "x=" + y + ";y=" + y + ";other=["
        var count = 0
        for x in args {
            if count > 1 {
                str += ","
            }
            str += x
            count += 1
        }
        str += "]"
        str
    }
    var x = takeItAll(12, 33.4, "oops", true, [1], (x: 0.33, y: 1))
    assert("x=33.4;y=33.4;other=[oopstrue,[1],(x: 0.33, y: 1)]", x)
}

func variadicTest2() {
    func take(args...) {
        args.toString()
    }
    var x = take(1,2,44.42)
    assert("(1, 2, 44.42)", x)
}

func variadicTest3() {
    func take(x, args...) {
        var str = "x=" + x
        str += args
        str
    }
    var x = take(14)
    assert("x=14()", x)
}

func complexToStringTest1() {
    func Integer.toString() {
        if this % 2 == 0 {
            "even"
        } else {
            "odd"
        }
    }
    assert("even", 12.toString())
    Integer.__deleteMember("toString")
}

func complexToStringTest2() {
    func Nil.toString() {
        "null"
    }
    var x = "foo" + nil
    assert("foonull", x)
}

func methodTest1() {
    func Integer +(other) {
        this * other
    }
    var res = 3 + 3 == 3 * 3
    Integer.__deleteMember("op_add")
    assert(true, res)
}

func methodTest2() {
    func Float +(other) {
        this + " + " + other
    }
    var res = 12.2 + 0.4
    Float.__deleteMember("op_add")
    assert("12.2 + 0.4", res)
}

func methodTest3() {
    func Integer.get(index) { index }
    assert("x", 12.x)
    Integer.__deleteMember("op_get")
}

func closureTest() {
    var xs = []
    const num = 10
    for n in 0..(num-1) {
        var elem = x => () => x * x
        xs.add(elem(n))
    }
    var ys = []
    for x in xs {
        ys.add(x())
    }
    assert([0, 1, 4, 9, 16, 25, 36, 49, 64, 81], ys)
}