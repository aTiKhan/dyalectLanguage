#region "Methods: ToString"
    func foo(args..., quotes = 12) { }
    let pat = "foo(args..., quotes = 12)";
    assert(pat, foo.ToString())
#endregion

#region "Methods: Clone"
    let fn = (x, y) => x + y
    assert(true, fn == fn)
    assert(true, fn.Clone() == fn)
    assert(true, fn.ToString.Clone() == fn.ToString)
    assert(false, fn.ToString.Clone() == fn)
#endregion

#region "Base variable 1"
    let x = 2
    func inner() {
        let x = 4
        base.x
    }
    assert(2, inner())
#endregion

#region "Base variable 2"
    let x = 2
    func inner() {
        let x = 4
        if x == 4 {
            var x = 8
            base.x
        }
    }
    assert(2, inner())
#endregion

#region "Composition 1"
    func sum(x, y) {
        x + y
    }
    func fmt(res) {
        "result=\(res)"
    }
    let fun = Function.Compose(sum, fmt)
    let res = fun(13, 14)
    assert(res, "result=27")
#endregion

#region "Composition 2"
    func sum(x, y) {
        x + y
    }
    func fmt(res) {
        "result=\(res)"
    }
    let fun = sum.Compose(with: fmt)
    let res = fun(13, 14)
    assert(res, "result=27")
#endregion

#region "Methods: GetType"
    let x = x => x
    assert(true, TypeInfo(x) == Function)
    assert(true, x.GetType() == Function)
    var t = TypeInfo(x)
    assert(7, t.code)
    assert("Function", t.name)
#endregion

#region "Properties"
    func get Array.First() { 
        this[0] when this.Length() > 0
    }

    func set Array.First(val) {
        if this.Length() is 0 {
            this.Add(val) 
        } else {
            this[0] = val
        }
    }
    
    let xs = [1,2,3]
    assert(1, xs.First)
    xs.First = 11
    assert(11, xs.First)
#endregion

#region "Tail recursion 1"
    var xs = []
    func loop(n, max) {
        func loop(i) {
            if i < max {
                xs.Add(i)
                loop(i + 1)
            }
        }
        loop(n)
    }
    loop(0, 10)
    assert([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], xs)
#endregion

#region "Tail recursion 2"
    func foo(a, b) {
        func foo(a, b, c) {
            if a + b == 0 {
                c
            } else {
                var x = caller()(a + b, -(a + b))
                foo(x, -x, x + a + b - c)
            }
        }
        if a + b == 0 {
            42
        } else {
            foo(a, b, a + b)
        }
    }
    var res = foo(1, 2)
    assert(42, res)
#endregion

#region "Tail recursion 3"
    func withpm(obj) {
        match obj {
            (x, y) => withpm(42),
            (x, y, z) => withpm(84),
            42 => "foo",
            84 => "bar"
        }
    }
    var res = withpm((1,2))
    assert(res, "foo")
#endregion

#region "Recursion 1"
    var acc = 0
    func iter(n) {
        if n == 0 {
            0
        } else {
            acc = acc + 1;
            iter(n - 1)
        }
    }
    iter(10)
    assert(acc, 10)
#endregion

#region "Recursion 2"
    func foo(x, y) {
        var foo = (x, y) => x - y
        foo(x, y)
    }
    var res = foo(12, 2)
    assert(res, 10)
#endregion

#region "Call"
    func sum(x,y) {
        if y == 2 {
            x + y
        } else {
            var z = sum(y, 2)
            x -= 1
            x + z
        }
    }
    var res = sum(2, 4)
    assert(7, res)
#endregion

#region "Call with named arguments 1"
    func test1(x, y, z) {
        (x, y, z)
    }
    var res = test1(z: 12, x: 3, y: 1)
    assert((3, 1, 12), res)
#endregion

#region "Call with named arguments 2"
    func test(args..., a = 0, b = 0) {
	    (a, b)
    }
    assert((0,0), test(1, 2))
    assert((1,2), test(a: 1, b: 2))
#endregion

#region "Call with optional arguments"
    func test1(x, x1 = 144, y, z, z1 = 33) {
        (x, x1, y, z, z1)
    }
    var res = test1(z: 12, x: 3, y: 1)
    assert((3, 144, 1, 12, 33), res)

    func test2(optional = "foo") {
        optional
    }
    assert("foo", test2())
    var arg = "bar"
    assert(arg, test2(arg))
#endregion

#region "Variadic call 1"
    func test1(args..., separator = ",", terminator = "\n") {
        [args, separator, terminator]
    }
    assert( [(1,2), ",", "\n"], test1(1,2) )
    assert( [(1,2), ",", "\r"], test1(1,2, terminator: "\r") )
    assert( [(1,2), ";", "\r"], test1(1,2, terminator: "\r", separator: ";") )
#endregion

#region "Curried function"
    func apply(fun, fst) { snd => fun(fst, snd) }
    func sum(x, y) { x + y }
    var sum2 = apply(sum, 2)
    assert(5, sum2(3))
#endregion

#region "Flip"
    func apply(fun, fst) { snd => fun(fst, snd) }
    func flip(fun) { (y, x) => fun(x, y) }
    func sub(x, y) { x - y }
    var sub3 = apply(flip(sub), 3)
    assert(6, sub3(9))
#endregion

#region "Variadic call 2"
    var res
    func variadic(args...) {
        res = args.Length()
    }
    variadic(args: (1,2,3))
    assert(3, res)
#endregion

#region "Variadic call 3"
    var res
    func variadic(args...) {
        res = args.Length()
    }
    variadic([1,2,3,4])
    assert(1, res)
#endregion

#region "Identity function"
    var f = x => x
    assert(12, f(12))
#endregion

#region "Caller and current"
    func foo() {
        assert("foo", current().Name)
        assert("bar", caller().Name)
    }
    func bar() {
        foo()
    }
    bar()
#endregion

#region "Function info"
    func foo() {
        assert(foo.Name, current().Name)
    }
    foo()
    assert(nil, caller())
#endregion

#region "Call chain 1"
    func thy() { caller() }
    func snd() { thy() }
    func fst() { snd() }
    var s = fst()
    assert("snd", s.Name)
#endregion

#region "Anonymous function name"
    let f = x => x * x
    assert("<func>", f.Name)
#endregion

#region "Call chain 2"
    func foo() {
        return "\(current().Name) is called by \(caller().Name)"
    }
    func bar() {
        foo()
    }
    var s = bar()
    assert("foo is called by bar", s)
#endregion

#region "Complex variadic"
    func takeItAll(x, y, args...) {
        var str = "x=" + y + ";y=" + y + ";other=["
        var count = 0
        for x in args {
            if count > 1 {
                str += ","
            }
            str += x
            count += 1
        }
        str += "]"
        str
    }
    var x = takeItAll(12, 33.4, "oops", true, [1], (x: 0.33, y: 1))
    assert("x=33.4;y=33.4;other=[oopstrue,[1],(x: 0.33, y: 1)]", x)
#endregion

#region "Variadic arguments to string"
    func take(args...) {
        args.ToString()
    }
    var x = take(1,2,44.42)
    assert("(1, 2, 44.42)", x)
#endregion

#region "Variadic and optional"
    func take(x, args...) {
        var str = "x=" + x
        str += args
        str
    }
    var x = take(14)
    assert("x=14()", x)
#endregion

#region "Method: toString 1"
    func Integer.ToString() {
        if this % 2 == 0 {
            "even"
        } else {
            "odd"
        }
    }
    assert("even", 12.ToString())
#endregion

#region "Method: toString 2"
    func Nil.ToString() {
        "null"
    }
    var x = "foo" + nil
    assert("foonull", x)
#endregion

#region "Method: addition 1"
    func Integer +(other) {
        this * other
    }
    var res = 3 + 3 == 3 * 3
    assert(got: res)
#endregion

#region "Method: addition 2"
    func Float +(other) {
        this.ToString() + " + " + other.ToString()
    }
    var res = 12.2 + 0.4
    assert("12.2 + 0.4", res)
#endregion

#region "Method: GetItem"
    var x = 11
    func get Integer[index] { index }
    assert(11, 12[x])
#endregion

#region "Closures"
    var xs = []
    let num = 10
    for n in 0..<num {
        var elem = x => () => x * x
        xs.Add(elem(n))
    }
    var ys = []
    for x in xs {
        ys.Add(x())
    }
    assert([0, 1, 4, 9, 16, 25, 36, 49, 64, 81], ys)
#endregion

#region "Parameter order 1"
    func pars(x, y) {
        "x=\(x),y=\(y)"
    }
    let res = pars(y: 2, x: 1)
    assert("x=1,y=2", res)
#endregion

#region "Parameter defaults 1"
    func getter(x = 12, y = 3, z = 4, j = 44, k = 42) {
        x + y + z + j + k
    }
    assert(60, getter(3, 4, k: 5))
    assert(62, getter(j: 1))
    assert(105, getter())
#endregion

#region "Parameter defaults 2"
    func pars(x = 1, y = 2, z = 3) {
        "x=\(x),y=\(y),z=\(z)"
    }
    var res = pars(4)
    assert("x=4,y=2,z=3", res)
    res = pars(x: 4)
    assert("x=4,y=2,z=3", res)
    res = pars(z: 4)
    assert("x=1,y=2,z=4", res)
    res = pars(10, 20)
    assert("x=10,y=20,z=3", res)
#endregion

#region "Parameters and exceptions"
    func pars(x, y, z) { }
    let res = try {
        pars(1, 2, x: 3)
    } catch {
        @MultipleValuesForArgument(funName, argName) => "\(funName)->\(argName)"
    }
    assert("pars->x", res)
#endregion

#region "Introspection"
    func tt(x, y, z = 3, extras...) {}
    assert("tt", tt.Name)
    assert(4, tt.Parameters.Length())
    var i = 0
    for p in tt.Parameters {
        if i == 0 {
            assert("(name: x, hasDefault: false, default: nil, varArg: false)", p.ToString())
        } else if i == 1 {
            assert("(name: y, hasDefault: false, default: nil, varArg: false)", p.ToString())
        } else if i == 2 {
            assert("(name: z, hasDefault: true, default: 3, varArg: false)", p.ToString())
        } else if i == 3 {
            assert("(name: extras, hasDefault: false, default: nil, varArg: true)", p.ToString())
        }
        i += 1
    }
#endregion

#region "Expression bodied functions"
    func sum(x, y) => x + y
    assert(5, sum(2, 3))
    func sum3(x, y, z) => {
        x + y + z
    }
    assert(9, sum3(2, 3, 4))
#endregion

#region "Defaults and foreign call 1"
    func double(x = 2) => x + x
    func sum2(x, y = 3) => x + y
    func sum3(x = 1, y = 0.5, z = 0.25) => x + y + z
    assert(4, __invoke(double))
    assert(6.33, __invoke(sum2, 3.33))
    assert(1.75, __invoke(sum3))
#endregion

#region "Defaults and foreign call 2"
    assert(12.12, __invoke(round, 12.1245677))
    let r = __invoke(rnd, 10)
    assert(true, r >= 10)
    assert(true, __invoke(rnd) >= 0)
    let r2 = __invoke(rnd, 1, 5)
    assert(true, r2 >= 1 && r2 <= 5)
#endregion

#region "Defaults and foreign call 3"
    var cell
    func collector(args..., x = 5) {
        var xs = [x]
        xs.AddRange(args)
        cell = xs
    }
    __invoke(collector, 4)
    assert([5, 4], cell)
#endregion

#region "Defaults and foreign call 4"
    var cell
    func collector(x, y, args...) {
        var xs = [x, y]
        xs.AddRange(args)
        cell = xs
    }
    __invoke(collector, 1, 2, (3, 4))
    assert([1, 2, 3, 4], cell)
#endregion

#region "Defaults and foreign call 5"
    var cell
    func collector(x, y, args...) {
        var xs = [x, y]
        xs.AddRange(args)
        cell = xs
    }
    __invoke(collector, 5, 6, [7, 8])
    assert([5, 6, 7, 8], cell)
#endregion

#region "External call"
    func checkIt() {
        assert(nil, caller())
    }
    __invoke(checkIt)
#endregion

#region "Type annotations 1"
    func sum(Integer x, Integer y) {
        x + y
    }
    assert(12, sum(10, 2))
    try {
        sum(12.2, 0)
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Type annotations 2"
    import lib = refs/libtest1

    func assetToString(lib.Asset ass) {
        ass.ToString()
    }
    assert("Asset.Phone(model: 1+, memory: 8)", assetToString(Asset.Phone("1+", 8)))
    try {
        assetToString(12)
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Type annotations 3"
    func test(Float x) { }
    test(1.0)
    assert(got: true)
    try {
        test(1)
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Complex type annotations 1"
    func test(String|Char c) {
        return c.ToString()
    }
    assert("Foo", test("Foo"))
    assert("F", test('F'))
    try {
        test(12)
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Complex type annotations 2"
    import refs/libtest
    func test(libtest.Foobar|Integer x) {
        match x {
            Integer => assert(got: true),
            libtest.Foobar => assert(got: true),
            _ => assert(got: false)
        }
    }
    test(libtest.Foobar(1, 2))
    test(12)
    try {
        test(true)
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Mutual recursion 1"
    func f(x) => x > 0 ? g(x - 1) : x
    and g(x) => x > 0 ? f(x - 1) : x
    assert(0, f(1))
    assert(-1, f(-1))
#endregion

#region "Mutual recursion 2"
    func f(n) {
        n == 0 ? 1 : n - m(f(n-1))
    }
    and m(n) {
        n == 0 ? 0 : n - f(m(n-1))
    }
    let xs = (0..20).Map(i => f(i)).ToArray()
    let ys = (0..20).Map(i => m(i)).ToArray()
    assert([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13], xs)
    assert([0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 12], ys)
#endregion

#region "Invalid overload (builtins)"
    try {
        func get Array.Length() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
    try {
        func set Array.Length() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
    try {
        func get Array.ToString() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
    try {
        func set Array.ToString() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
#endregion

#region "Invalid overload (custom)"
    type Foo
    func get Foo.Index() { }
    func set Foo.Index() { }
    func Foo.Bar() { }
    static func get Foo.Bar() { }

    try {
        func Foo.Index() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
    try {
        func set Foo.Bar() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
    try {
        func get Foo.Bar() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
    try {
        static func Foo.Bar() { }
        assert(got: false)
    } catch {
        @InvalidOverload() => assert(got: true)
    }
#endregion

#region "Conversion: as"
    let f = () => 42
    assert(true, f as Bool)
#endregion

#region "Complex definition 1"
    import refs/libtest
    func libtest.Foo as Integer {
        this.x
    }
    func Integer as libtest.Foo {
        Foo(this)
    }
    let f = Foo(124)
    assert(124, f as Integer)
    match 2 as libtest.Foo {
        Foo(x) => assert(2, x)
    }
#endregion

#region "Parameterless lambda 1"
    let fn = \2 + 2
    assert(4, fn())
    func takeIt(fn) {
        return fn()
    }
    let res = takeIt(\22 + 22)
    assert(44, res)
#endregion

#region "Parameterless lambda 2"
   let xs = yields { 1, 2, 3, 4, 5, 6 }
   let ys = xs.Filter(\x % 2 == 0).ToArray()
   assert([2, 4, 6], ys)
#endregion

#region "Parameterless lambda 2"
   let xs = yields { 1, 2, 3 }
   let ys = xs.Map(\x.ToString()).ToArray()
   assert(["1", "2", "3"], ys)
#endregion

#region "Parameterless lambda 3"
   let xs = yields { 1, 2, 3, 4, 5, 6 }
   let res = xs.Reduce(converter: \x + y)
   assert(21, res)
#endregion

#region "Parameterless lambda 4"
    func fetchLambda(b) {
        b ? (\2 + 2) : (\3 + 3)
    }
    assert(4, fetchLambda(true)())
    assert(6, fetchLambda(false)())
#endregion

#region "Methods: Apply"
    func sum(x, y, z) => x + y + z
    let fn = sum.Apply(y: 12, z: 3)
    assert(16, fn(1))
    assert(6, fn(1, 2, 3))
#endregion

#region "Right pipe 1"
    func double(x) => x + x
    let x = 12 >> double
    assert(24, x)
#endregion

#region "Right pipe 2"
    func map(xs, fn) {
        for x in xs {
            yield fn(x)
        }
    }

    func toArray(xs) {
        let ys = []
        ys.AddRange(xs)
        ys
    }

    let xs = [1, 2, 3]
    let res = xs >> map(\x + x) >> toArray
    assert([2,4,6], res)
#endregion

#region "Left pipe 1"
    func double(x) => x + x
    let x = double << 12
    assert(24, x)
#endregion

#region "Left pipe 2"
    func map(xs, fn) {
        for x in xs {
            yield fn(x)
        }
    }

    let xs = [1, 2, 3]
    let res = map(xs) << (\x + x)
    assert([2, 4, 6], res.ToArray())
#endregion