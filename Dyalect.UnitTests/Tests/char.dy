#test "Char literal"
    var res = '\'' + 'F' + '\'' + '\s'
    assert("'F' ", res)
#endtest

#test "Constructor"
    assert('c', Char('c'))
    assert('A', Char(65))
    assert('6', Char('6'))
    assert('\u0006', Char(6))
    assert('f', Char("foo"))
#endtest

#test "Methods: GetType"
    let x = 'A'
    assert(true, TypeInfo(x) == Char)
    assert(true, x.GetType() == Char)
    let t = TypeInfo(x)
    assert(5, t.Code)
    assert("Char", t.Name)
#endtest

#test "Methods: Default"
    assert('\0', Char.Default())
#endtest

#test "Methods: Min and Max"
    assert('\0', Char.Min())
    assert('\uffff', Char.Max())
    assert(true, Char.Default() == Char.Min())
#endtest

#test "Ranges"
    assert(['a','b','c','d','e','f'], ['a'..'f'])
    assert(['a','c','e'], ('a'^2..'f').ToArray())
#endtest

#test "Char comparison"
    assert(true, 'c' == "c")
    assert(true, "c" == 'c')
    assert(false, 'c' == "cc")
    assert(false, "cc" == 'c')
    assert(false, 'c' > "cc")
    assert(true, 'c' < "cc")
    assert(true, "cc" > 'c')
    assert(false, "cc" < 'c')
#endtest

#test "Methods: Upper and IsUpper"
    assert(true, 'C' == 'c'.Upper())
    assert(true, 'C'.IsUpper())
#endtest

#test "Methods: Lower and IsLower"
    assert(true, 'c' == 'C'.Lower())
    assert(true, 'c'.IsLower())
#endtest

#test "Methods: IsWhitespace"
    assert(true, '\s'.IsWhiteSpace())
    assert(true, ' '.IsWhiteSpace())
    assert(true, '\u0020'.IsWhiteSpace())
    assert(true, '\t'.IsWhiteSpace())
#endtest

#test "Methods: IsControl"
    assert(true, '\t'.IsControl())
    assert(true, '\b'.IsControl())
    assert(false, 't'.IsControl())
#endtest

#test "Methods: IsLetterOrDigit"
    assert(true, '9'.IsDigit())
    assert(false, 'A'.IsDigit())
    assert(true, 'A'.IsLetter())
    assert(false, '1'.IsLetter())
    assert(true, '9'.IsLetterOrDigit())
    assert(true, 't'.IsLetterOrDigit())
#endtest

#test "Methods: Order"
    assert(65, 'A'.Order())
    assert(54, '6'.Order())
#endtest

#test "Math with chars"
    let a = 'a'
    let b = 'b'
    assert('b', a + 1)
    assert('a', b - 1)
    assert("ab", a + b)
    assert("abcdef", a + b + "cdef")
#endtest
