func rangeTest1() {
    var xs = 1..10
    assert([1,2,3,4,5,6,7,8,9,10], xs.toArray())
}

func rangeTest2() {
    var xs = (5^-1..1)
    assert([5,4,3,2,1], xs.toArray())
}

func rangeTest3() {
    var acc = 0
    for x in 1..5 {
        acc += x
    }
    assert(15, acc)
}

func rangeTest4() {
    var chz = ('a'..'e')
    assert(['a','b','c','d','e'], chz.toArray())
}

func rangeTest5() {
    1..10 //Check how ranges behave as statements, issue #77
    assert(true, true)
}

func rangeTest6() {
    func take(xs, count) {
        var c = 0
        var arr = []
        for e in xs {
            if c == count {
                break
            }
            arr.add(e)
            c += 1
        }
        return arr
    }
    var seq = (12^5..)
    var xs = take(seq, 10)
    assert([12, 17, 22, 27, 32, 37, 42, 47, 52, 57], xs)
    seq = (1.0^0.1..)
    xs = take(seq, 5)
    assert([1.0, 1.1, 1.2000000000000002, 1.3000000000000003, 1.4000000000000004], xs)
    seq = ('a'..)
    xs = take(seq, 5)
    assert(['a', 'b', 'c', 'd', 'e'], xs)
}

func stringRange1() {
    let str = "hello,world!"
    let new1 = str[0..4]
    assert("hello", new1)
    let new2 = str[6..10]
    assert("world", new2)
}

func slice1() {
    var xs = ["Firefly", "Cowboy Bebop", "Samurai Champloo"]
    assert(["Cowboy Bebop", "Samurai Champloo"], xs[-2..].toArray())
    assert(["Samurai Champloo"], xs[-1..].toArray())
}

func slice2() {
    var cities = ["Kolkata", "Hyderabad", "Bangalore", "London", "Moscow", "London", "New York"]
    assert("New York", cities[-1])
    assert(["Kolkata", "Hyderabad", "Bangalore", "London", "Moscow"], cities[0..4].toArray())
}

func slice3() {
    var xs = 1..10
    assert([9,10], xs[-2..].toArray())
    assert([2,3,4], xs[1..3].toArray())
    var ys = [1..10]
    assert([9,10], ys[-2..].toArray())
    assert([2,3,4], ys[1..3].toArray())
}

func slice4() {
    var xs = "hello,world!"
    assert("hello", xs[..-7])
    assert("hello", xs[..4])
    assert("world!", xs[-6..])
    assert("lo", xs[3..-7])
}

func exclusiveRanges1() {
    var xs = [1..5]
    assert([1,2,3,4,5], xs)
    xs = [1..<5]
    assert([1,2,3,4], xs)
}