//Done
func catchTest1() {
    var x
    try {
        x = 2
    } catch e {
        x = 22
    }
    //catch should be ignored
    assert(2, x)
#endtest

func catchTest2() {
    var res =
        try {
            2 / 0
        } catch e {
            42
        }
    assert(42, res)
#endtest

func catchTest3() {
    var res =
        try {
            try {
                2 / 0
            }
            catch e {
                142
            }
        } catch e {
            42
        }
    assert(142, res)
#endtest

func catchTest4() {
    var res =
        try {
            throw "Error!"
        } catch e {
            e[0]
        }
    assert("Error!", res)
#endtest

func catchTest5() {
    var res =
        try {
            try {
                throw "Oops!"
            }
            catch e {
                throw e
            }
        } catch e {
            "caught:" + e[0]
        }
    assert("caught:Oops!", res)
#endtest

func catchTest6() {
    var res =
        try {
            try {
                throw 42
            }
            catch {
                0 => 0,
                1 => 1,
                2 => 2
            }
        } catch e {
            e[0]
        }
    assert(42, res)
#endtest

func catchTest7() {
    func errorMaker() {
        throw nameof(errorMaker)
    }
    func caller2() {
        errorMaker()
    }
    func caller1() {
        caller2()
    }
    func caller0(){
        try {
            caller1()
        } catch e {
            e[0]
        }
    }
    var res = caller0()
    assert("errorMaker", res)
#endtest

func catchTest8() {
    func foo(x, y, z) { (x,y,z) }
    var e = try {
            foo(1, 2, 3, 4)
        } catch e {
            "foo"
        }
    assert("foo", e)
#endtest

func catchTest9() {
    func check(x) {
        if x % 2 == 0 {
            throw x
        }
    }
    func yielder(arr) { 
        for x in arr {
            try {
                check(x)
                yield x
            } catch _ {
                //Do nothing
            }
        }
    }
    var arr = [1..20]
    assert([1,3,5,7,9,11,13,15,17,19], yielder(arr).toArray())
#endtest

func catchTest10() {
    var res =
        try {
            4 / 2
        } catch e {
            42
        }
    assert(2, res)
#endtest

func catchMatchTest1() {
    func foo() { throw ("err", 22) }
    var e = try {
            foo()
        } catch {
            (("err", 22, 1),) => false,
            (("err", 23),) => false,
            (("err", 22),) => true
        }
    assert(true, e)
#endtest

func catchMatchTest2() {
    func foo() { throw ("err", 231) }
    var e
    e = try {
        e = try {
                foo()
            } catch {
                (detail: ("err", 22, 1),) => false,
                (detail: ("err", 23),) => false,
                (detail: ("err", 22),) => true
            }
    } catch e {
        142
    }
    assert(142, e)
#endtest

func externalCatchTest1() {
    func sorter(x, y) {
        if x > 10 {
            throw "No!"
        }
        x - y
    }
    var arr = [1..11]
    var ex
    try {
        arr.sort(sorter)
    } catch e {
        ex = e[0]
    }
    assert("No!", ex)
#endtest

func externalCatchTest2() {
    func defaultElement() {
        var n = 0
        while true {
            n += 1
            yield n
            if n > 10 {
                throw n
            }
        }
    }
    var arr = Array.empty(10, defaultElement())
    assert([1,2,3,4,5,6,7,8,9,10], arr)
    try {
        Array.empty(11, defaultElement())
    } catch e {
        assert(11, e)
    }
#endtest

func externalCatchTest3() {
    func seq() {
        yield 1
        throw 2
    }
    try {
        var arr = []
        arr.addRange(seq())
    } catch e {
        assert(2, e[0])
    }
#endtest

func iteratorExceptionTest1() {
    func testMe() {
        var xs = [1..10]
        for x in xs {
            xs.add(3)
        }
    }
    var b = try {
        testMe()
    } catch e {
        e::detail.contains("modified after the iterator was instantiated")
    }
    assert(true, b)
#endtest

func iteratorExceptionTest2() {
    func test0() {
        var xs = [1..10]
        for x in xs {
            xs[x-1] = x + x
        }
    }
    func test1() {
        var xs = [1..10]
        for x in xs {
            xs.remove(x)
        }
    }
    test0()
    var b = try {
        test1()
    } catch e {
        e::detail.contains("modified after the iterator was instantiated")
    }
    assert(true, b)
#endtest

type U0()
func customTypeException() { //Bug #248
    func baz() {
        throw U0()
    }
    func bar() {
        baz()
    }
    func foo() {
        try {
            bar()
        } catch {
            (U0(),) => "U0 caught."
        }
    }
    assert("U0 caught.", foo())
#endtest

func chainCatch1() {
    func zoo() {
        throw 1024
    }
    func bar() {
        zoo()
    }
    func foo() {
        try {
            bar()
        } catch e {
            if e[0] == 1024 {
                throw
            }
        }
    }
    var x
    try {
        foo()
    } catch e {
        x = e[0]
    }
    assert(1024, x)
#endtest

func rightCatch() {
    func checkit() {
        try {
            return
        } catch _ {
            throw "Invalid catch."
        }
    }
    func run() {
        checkit()
        throw 12
    }
    var x
    try {
        run()
    } catch e {
        x = e[0]
    }
    assert(12, x)
#endtest

func rethrowTest() {
    func work() {
        try {
            throw 42
        } catch _ {
            throw
        }
    }
    var x
    try {
        work()
    } catch e {
        x = e[0]
    }
    assert(42, x)
#endtest

func nestedExceptions() {
    func foo() {
        try {
            throw "exc.1"
        } catch _ {
            try {
                throw "exc.2"
            } catch _ {
                //do nothing
            }
            throw
        }
    }
    var dat
    try {
        foo()
    } catch e {
        dat = e[0]
    }
    assert("exc.1", dat)
#endtest

func multipleThrowFromCatc() {
    var x 
    try {
       try {
            throw "err"
        } catch _ {
            throw "exc.1"
        }
    } catch e {
        x = e[0]
    }
    assert("exc.1", x)
#endtest

func throwTest1() {
    var x
    try {
        throw Error.IndexOutOfRange()
    } catch {
        IndexOutOfRange() => { x = true }
    }
    assert(true, x)
#endtest

func throwTest2() {
    var x
    try {
        throw Error.InvalidType(0.getType().name)
    } catch {
        InvalidType(tn) when tn == "Integer"  => { x = true }
    }
    assert(true, x)
#endtest

func throwTest3() {
    var x
    try {
        throw "Test"
    } catch {
        UnexpectedError(msg) when msg == "Test"  => { x = true }
    }
    assert(true, x)
#endtest

func throwTest4() {
    var x
    try {
        throw Error.InvalidBehavior(42)
    } catch {
        InvalidBehavior(code)  => { x = code }
    }
    assert(42, x)
#endtest

func throwFromOverride() {
    func Integer.toString() {
        throw "Ooops!"
    }
    try {
        12.toString()
        assert(got: false)
    } catch _ {
        assert(got: true)
    }
    Integer.__deleteMember("toString")
#endtest