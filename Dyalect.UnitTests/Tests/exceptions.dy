#region "Type error"
    try {
        12 + '2'
        assert(got: false)
    } catch {
        @OperationNotSupported() => assert(got: true)
    }
#endregion

#region "Simple catch 1"
    var x
    try {
        x = 2
    } catch e {
        x = 22
    }
    //catch should be ignored
    assert(2, x)
#endregion

#region "Simple catch 2"
    var res =
        try {
            2 / 0
        } catch e {
            42
        }
    assert(42, res)
#endregion

#region "Nested catch 1"
    var res =
        try {
            try {
                2 / 0
            }
            catch e {
                142
            }
        } catch e {
            42
        }
    assert(142, res)
#endregion

#region "Catch and throw"
    var res =
        try {
            throw @Error("Error!")
        } catch e {
            e[0]
        }
    assert("Error!", res)
#endregion

#region "Nested catch 2"
    var res =
        try {
            try {
                throw @Error("Oops!")
            }
            catch _ {
                throw
            }
        } catch e {
            "caught:" + e[0]
        }
    assert("caught:Oops!", res)
#endregion

#region "Nested catch 3"
    var res =
        try {
            try {
                throw @Error(42)
            }
            catch {
                0 => 0,
                1 => 1,
                2 => 2
            }
        } catch e {
            e[0]
        }
    assert(42, res)
#endregion

#region "Throwing from functions"
    func errorMaker() {
        throw @Error(nameof(errorMaker))
    }
    func caller2() {
        errorMaker()
    }
    func caller1() {
        caller2()
    }
    func caller0(){
        try {
            caller1()
        } catch e {
            e[0]
        }
    }
    var res = caller0()
    assert("errorMaker", res)
#endregion

#region "Catch as an expression"
    func foo(x, y, z) { (x,y,z) }
    var e = try {
            foo(1, 2, 3, 4)
        } catch e {
            "foo"
        }
    assert("foo", e)
#endregion

#region "Catch and iterators"
    func check(x) {
        if x % 2 == 0 {
            throw @Error(x)
        }
    }
    func yielder(arr) { 
        for x in arr {
            try {
                check(x)
                yield x
            } catch _ {
                //Do nothing
            }
        }
    }
    var arr = [1..20]
    assert([1,3,5,7,9,11,13,15,17,19], yielder(arr).ToArray())
#endregion

#region "Simple catch 3"
    var res =
        try {
            4 / 2
        } catch e {
            42
        }
    assert(2, res)
#endregion

#region "Pattern matching 1"
    func foo() { throw @Error("err", 22) }
    var e = try {
            foo()
        } catch {
            ("err", 22, 1) => false,
            ("err", 23) => false,
            ("err", 22) => true
        }
    assert(true, e)
#endregion

#region "Pattern matching 2"
    func foo() { throw @Error("err", 231) }
    var e
    e = try {
        e = try {
                foo()
            } catch {
                Error ("err", 22, 1) => false,
                Error ("err", 23) => false,
                Error ("err", 22) => true
            }
    } catch e {
        142
    }
    assert(142, e)
#endregion

#region "External catch 1"
    func sorter(x, y) {
        if x > 10 {
            throw @Err("No!")
        }
        x - y
    }
    var arr = [1..11]
    var ex
    try {
        arr.Sort(sorter)
    } catch e {
        ex = e[0]
    }
    assert("No!", ex)
#endregion

#region "External catch 2"
    func defaultElement() {
        var n = 0
        while true {
            n += 1
            yield n
            if n > 10 {
                throw @Err(n)
            }
        }
    }
    var arr = Array.Empty(10, defaultElement())
    assert([1,2,3,4,5,6,7,8,9,10], arr)
    try {
        Array.Empty(11, defaultElement())
    } catch e {
        assert(11, e)
    }
#endregion

#region "External catch 3"
    func seq() {
        yield 1
        throw @Err(2)
    }
    try {
        var arr = []
        arr.AddRange(seq())
    } catch e {
        assert(2, e[0])
    }
#endregion

#region "Iterators 1"
    func testMe() {
        var xs = [1..10]
        for x in xs {
            xs.Add(3)
        }
    }
    var b = try {
        testMe()
    } catch {
        @CollectionModified() => true
    }
    assert(true, b)
#endregion

#region "Iterators 2"
    func test0() {
        var xs = [1..10]
        for x in xs {
            xs[x-1] = x + x
        }
    }
    func test1() {
        var xs = [1..10]
        for x in xs {
            xs.Remove(x)
        }
    }
    test0()
    var b = try {
        test1()
    } catch {
        @CollectionModified() => true
    }
    assert(true, b)
#endregion

#region "Custom type exception"
    //Bug #248
    type U0()

    func baz() {
        throw @Err(U0())
    }
    func bar() {
        baz()
    }
    func foo() {
        try {
            bar()
        } catch {
            (U0(),) => "U0 caught."
        }
    }
    assert("U0 caught.", foo())
#endregion

#region "Catch chain"
    func zoo() {
        throw @Err(1024)
    }
    func bar() {
        zoo()
    }
    func foo() {
        try {
            bar()
        } catch e {
            if e[0] == 1024 {
                throw
            }
        }
    }
    var x
    try {
        foo()
    } catch e {
        x = e[0]
    }
    assert(1024, x)
#endregion

#region "Fall into correct catch"
    func checkit() {
        try {
            return
        } catch _ {
            throw @Err("Invalid catch.")
        }
    }
    func run() {
        checkit()
        throw @Err(12)
    }
    var x
    try {
        run()
    } catch e {
        x = e[0]
    }
    assert(12, x)
#endregion

#region "Rethrowing"
    func work() {
        try {
            throw @Err(42)
        } catch _ {
            throw
        }
    }
    var x
    try {
        work()
    } catch e {
        x = e[0]
    }
    assert(42, x)
#endregion

#region "Nested exceptions"
    func foo() {
        try {
            throw @Err("exc.1")
        } catch _ {
            try {
                throw @Err("exc.2")
            } catch _ {
                //do nothing
            }
            throw
        }
    }
    var dat
    try {
        foo()
    } catch e {
        dat = e[0]
    }
    assert("exc.1", dat)
#endregion

#region "Multiple throws from catch"
    var x 
    try {
       try {
            throw @Err("err")
        } catch _ {
            throw @Err("exc.1")
        }
    } catch e {
        x = e[0]
    }
    assert("exc.1", x)
#endregion

#region "Throwing 1"
    var x
    try {
        throw @IndexOutOfRange()
    } catch {
        @IndexOutOfRange() => { x = true }
    }
    assert(true, x)
#endregion

#region "Throwing 2"
    var x
    try {
        throw @InvalidType(typeName << 0.GetType())
    } catch {
        @InvalidType(tn) when tn == "Integer"  => { x = true }
    }
    assert(true, x)
#endregion

#region "Throwing 3"
    var x
    try {
        throw @UnexpectedError("Test")
    } catch {
        @UnexpectedError(msg) when msg == "Test"  => { x = true }
    }
    assert(true, x)
#endregion

#region "Throwing 4"
    var x
    try {
        throw @InvalidBehavior(42)
    } catch {
        @InvalidBehavior(code)  => { x = code }
    }
    assert(42, x)
#endregion

#region "Throw from override"
    func Integer.ToString() {
        throw @Err("Ooops!")
    }

    try {
        12.ToString()
        assert(got: false)
    } catch _ {
        assert(got: true)
    }
#endregion

#region "Data items"
    try {
        throw @Foo(1, "Foo", true)
        assert(got: false)
    } catch e {
        assert("Variant.Foo(1, Foo, true)", e.ToString())
    }
#endregion