
func iteratorLiteralTest1() {
    var seq = { 1,2,3 }
    assert([1,2,3], seq.toArray())
}

func iteratorLiteralTest2() {
    var x = 2
    var y = 3
    var seq = { x + y, }
    x -= 1
    y *= y
    assert(10, seq())
}

func iteratorLiteralTest3() {
    var xs = { 1, 2, 3, 4, 5 }
    assert(5, xs.len())
}

func iteratorLiteralTest4() {
    var xs = { 1, 2, 3, 4, 5 }
    assert(5, xs.len())
    assert(5, xs.len())
    xs()
    assert(5, xs.len())
}

func iteratorLiteralTest5() {
    var str = String.concat(values = {
        22 + 1.25,
        "Hello, world!",
        true
    })
    assert("23.25Hello, world!true", str)
}

func iteratorTest1() {
    func foo(token) {
        yield 1
        yield 3
        yield 44.2
        if token {
            return
        }
        yield 68.6
    }
    var it = foo(false)
    var res = it() + it() + it() + it()
    assert(116.8, res)
}

func iteratorTest2() {
    var arr = [1,2,3,4,5,6,7,8]
    func sum(arr) {
        var acc = 0
        for x in arr {
            acc += x
        }
        acc
    }
    var res = sum(arr)
    assert(36, res)
}

func iteratorTest3() {
    var arr = [1,2,3,4,5,6,7,8]
    func filter(arr, pred) {
        for x in arr {
            if pred(x) {
                yield x
            }
        }
    }
    func sum(arr) {
        var acc = 0
        for x in arr {
            acc += x
        }
        acc
    }
    var filtered = filter(arr, x => x % 2 == 0)
    var res = sum(filtered)
    assert(20, res)
}

func iteratorTest4() {
    func reverse(arr) {
        var newArr = []
        newArr.addRange(arr) //hack
        var len = newArr.len()
        var counter = 1
        for x in arr {
            newArr[len - counter] = x
            counter += 1
        }
        newArr
    }
    func makeString(arr) {
        var str = ""
        for x in arr {
            str += x
        }
        str
    }
    const arr = reverse("Hello")
    var res = makeString(arr)
    assert("olleH", res)
}

func iteratorTest5() {
    func filter(arr, pred) {
        for x in arr {
            if pred(x) {
                yield x
            }
        }
    }
    func toArray(seq) {
        var arr = []
        for x in seq {
            arr.add(x)
        }
        arr
    }
    const arr = toArray( filter("hello", x => x == 'l') )
    var res = arr[0] + arr[1]
    assert("ll", res)
}

func iteratorTest6() {
    var arr = [1,3,5,8]
    var x =
        for x in arr {
            if x % 2 == 0 {
                break x
            }
        }
    assert(8, x)
}

func iteratorTest7() {
    func Integer.iter() {
        var i = 0
        if this < 0 {
            while i > this {
                yield i
                i -= 1
            }
        } else {
            while i < this {
                yield i
                i += 1
            }
        }
    }

    var res = 5.iter().toArray()
    Integer.__deleteMember("iter")
    assert([0,1,2,3,4], res)
}

func iteratorTest8() {
    var xs = 1..10
    assert(10, xs.len())
    xs()
    assert(10, xs.len())
}

func iteratorTest9() {
    var xs = 1..5
    var ys = 6..10
    var res = Iterator.concat(xs, ys)
    assert([1..10], res.toArray())
}

func iteratorTest10() {
    var xs = 1..5
    var ys = 6..10
    var res = Iterator(xs, ys)
    assert([1..10], res.toArray())
}

func iteratorTest11() { //#289
    var xs = 1..5
    var res = Iterator(xs)
    assert((1,2,3,4,5), res.toTuple())
}

func yieldManyTest1() { //#96
    func bar() {
        yield 31
        yield 32
        yield 33
    }
    func foo() {
        yield 1
        yield 2
        yield 3
        yield bar()
        yield 4
        yield 5
    }
    var seq = foo().toArray()
    assert([1,2,3,31,32,33,4,5],seq)
}

func yieldManyTest2() { //#96
    func zoo() {
        yield 31
        yield 32
    }
    func bar() {
        yield 21
        yield 22
    }
    func foo() {
        yield 1
        yield 2
        yield bar()
        yield 3
        yield zoo()
        yield 4
    }
    var seq = foo().toArray()
    assert([1,2,21,22,3,31,32,4],seq)
}

func yieldManyTest3() { //#96
    func zoo() {
        yield 31
        yield 32
    }
    func bar() {
        yield 21
        yield 22
    }
    func foo() {
        yield 1
        yield 2
        yield bar()
        yield 3
        yield zoo()
        yield 4
        yield bar()
        yield zoo()
    }
    var seq = foo().toArray()
    assert([1,2,21,22,3,31,32,4,21,22,31,32],seq)
}

func yieldManyTest4() { //#96
    func foo() {
        yield 1
        yield [2,3]
    }
    var arr = foo().toArray()
    assert([1,[2,3]], arr)
}

func takeTest1() {
    var seq = { 1,2,3,4,5}
    var xs = seq.take(3).toArray()
    assert([1,2,3], xs)
}

func skipTest1() {
    var seq = { 1,2,3,4,5}
    var xs = seq.skip(3).toArray()
    assert([4,5], xs)
}

func firstTest1() {
    var seq = { 1,2,3,4,5}
    assert(1, seq.first())
}

func lastTest1() {
    var seq = { 1,2,3,4,5}
    assert(5, seq.last())
}

func tryCatchBug() { //bug #365
    var val = 0
    func iter() {
        try {
            yield 1
            throw "oops"
            yield 2
        } catch e {
            val = 42
        }
    }
    for _ in iter() { }
    assert(42, val)
}