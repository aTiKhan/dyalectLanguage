#test "Iterator literal"
    let seq = yields { 1,2,3 }
    assert([1,2,3], seq.ToArray())
#endtest

#test "Constructor"
    var xs = 1..5
    var ys = 6..10
    var res = Iterator(xs, ys)
    assert([1..10], res.ToArray())

    xs = 1..5
    res = Iterator(xs)
    assert((1,2,3,4,5), res.ToTuple())
#endtest

#test "Methods: GetType"
    let x = yields {}
    assert(true, TypeInfo(x) == Iterator)
    assert(true, x.GetType() == Iterator)
    var t = TypeInfo(x)
    assert(12, t.Code)
    assert("Iterator", t.Name)
#endtest

#test "Methods: Clone"
    let xs = yields {1,2,3}
    assert(true, xs == xs)
    assert(false, xs.Clone() == xs)
#endtest

#test "Methods: Len"
    var xs = yields { 1, 2, 3, 4, 5 }
    assert(5, xs.Length())
#endtest

#test "Variable capture"
    var x = 2
    var y = 3
    var seq = yields { x + y }
    x -= 1
    y *= y
    assert(10, seq.First())
#endtest

#test "Methods: First, Last, Len"
    var xs = yields { 1, 2, 3, 4, 5 }
    assert(5, xs.Length())
    assert(5, xs.Length())
    xs.First()
    assert(5, xs.Length())
    xs.Last()
    assert(5, xs.Length())
#endtest

#test "Iterator as argument"
    var str = String.Concat(values: yields {
        22 + 1.25,
        "Hello, world!",
        true
    })
    assert("23.25Hello, world!true", str)
#endtest

#test "Iterator function"
    func foo(token) {
        yield 1
        yield 3
        yield 44.2
        if token {
            yield break
        }
        yield 68.6
    }
    var it = foo(false)
    var res = it.Element(at: 0) + it.Element(at: 1) +
        it.Element(at: 2) + it.Element(at: 3)
    assert(116.8, res)
#endtest

#test "Running iterator 1"
    var arr = [1,2,3,4,5,6,7,8]
    func sum(arr) {
        var acc = 0
        for x in arr {
            acc += x
        }
        acc
    }
    var res = sum(arr)
    assert(36, res)
#endtest

#test "Running iterator 2"
    var arr = [1,2,3,4,5,6,7,8]
    func filter(arr, pred) {
        for x in arr {
            if pred(x) {
                yield x
            }
        }
    }
    func sum(arr) {
        var acc = 0
        for x in arr {
            acc += x
        }
        acc
    }
    var filtered = filter(arr, x => x % 2 == 0)
    var res = sum(filtered)
    assert(20, res)
#endtest

#test "Running iterator 3"
    func reverse(arr) {
        var newArr = []
        newArr.AddRange(arr) //hack
        var len = newArr.Length()
        var counter = 1
        for x in arr {
            newArr[len - counter] = x
            counter += 1
        }
        newArr
    }
    func makeString(arr) {
        var str = ""
        for x in arr {
            str += x
        }
        str
    }
    let arr = reverse("Hello")
    var res = makeString(arr)
    assert("olleH", res)
#endtest

#test "Running iterator 4"
    func filter(arr, pred) {
        for x in arr {
            if pred(x) {
                yield x
            }
        }
    }
    func toArray(seq) {
        var arr = []
        for x in seq {
            arr.Add(x)
        }
        arr
    }
    let arr = toArray( filter("hello", x => x == 'l') )
    var res = arr[0] + arr[1]
    assert("ll", res)
#endtest

#test "Running iterator 5"
    var arr = [1,3,5,8]
    var x =
        for x in arr {
            if x % 2 == 0 {
                break x
            }
        }
    assert(8, x)
#endtest

#test "Iterator as method"
    func Integer.Iterate() {
        var i = 0
        if this < 0 {
            while i > this {
                yield i
                i -= 1
            }
        } else {
            while i < this {
                yield i
                i += 1
            }
        }
    }

    var res = 5.Iterate().ToArray()
    assert([0,1,2,3,4], res)
#endtest

#test "Breaking iteration"
    var xs = 1..10
    assert(10, xs.Length())
    for x in xs {
        if x > 3 {
            break
        }
    }
    xs.First()
    assert(10, xs.Length())
#endtest

#test "Methods: Concat"
    var xs = 1..5
    var ys = 6..10
    var res = Iterator.Concat(xs, ys)
    assert([1..10], res.ToArray())
#endtest

#test "Yield many 1"
    func bar() {
        yield 4
        yield 5
        yield 6
    }
    func foo() {
        yield 1
        yield 2
        yield 3
        yield many bar()
    }
    var seq = foo().ToArray()
    assert([1,2,3,4,5,6],seq)
#endtest

#test "Yield many 2"
    func bar() {
        yield 31
        yield 32
        yield 33
    }
    func foo() {
        yield 1
        yield 2
        yield 3
        yield many bar()
        yield 4
        yield 5
    }
    var seq = foo().ToArray()
    assert([1,2,3,31,32,33,4,5],seq)
#endtest

#test "Yield many 3"
    func zoo() {
        yield 31
        yield 32
    }
    func bar() {
        yield 21
        yield 22
    }
    func foo() {
        yield 1
        yield 2
        yield many bar()
        yield 3
        yield many zoo()
        yield 4
    }
    var seq = foo().ToArray()
    assert([1,2,21,22,3,31,32,4],seq)
#endtest

#test "Yield many 4"
    func zoo() {
        yield 31
        yield 32
    }
    func bar() {
        yield 21
        yield 22
    }
    func foo() {
        yield 1
        yield 2
        yield many bar()
        yield 3
        yield many zoo()
        yield 4
        yield many bar()
        yield many zoo()
    }
    var seq = foo().ToArray()
    assert([1,2,21,22,3,31,32,4,21,22,31,32],seq)
#endtest

#test "Yield many 5"
    func bar() {
        yield 2
        yield 3
    }
    func foo() {
        yield 1
        yield bar()
    }
    var arr = foo().ToArray()
    assert(1, arr[0])
    assert([2,3], arr[1].ToArray())
#endtest

#test "Methods: Take"
    var seq = yields { 1,2,3,4,5 }
    var xs = seq.Take(3).ToArray()
    assert([1,2,3], xs)
#endtest

#test "Methods: Skip"
    var seq = yields { 1,2,3,4,5 }
    var xs = seq.Skip(3).ToArray()
    assert([4,5], xs)
#endtest

#test "Methods: Last"
    var seq = yields { 1,2,3,4,5 }
    assert(5, seq.Last())
#endtest

#test "Iterator and exception"
    var val = 0
    func iter() {
        try {
            yield 1
            throw "oops"
            yield 2
        } catch e {
            val = 42
        }
    }
    for _ in iter() { }
    assert(42, val)
#endtest

#test "Yield break"
    func seq() {
    var x = 100
    while x > 0 {
            yield x
            x -= 1
            if x == 87 {
                yield break
            }
        }
    }
    var xs = []
    for x in seq() {
        xs.Add(x)
    }
    assert([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88], xs)
#endtest

#test "Slicing"
    var seq = 1..10
    var xs = seq[5..].ToArray()
    assert([6, 7, 8, 9, 10], xs)
#endtest

#test "Iterator and range"
    let seq = yields { 1..5 }
    assert([1,2,3,4,5], seq.ToArray())
#endtest

#test "Iterator state 1"
    let seq = yields { 1,2,3,4,5 }
    assert(2, seq[1])
    assert(2, seq[1])
    assert([1,2,3], seq.Take(3).ToArray())
    assert([1,2,3], seq.Take(3).ToArray())
#endtest

#test "Methods: Element"
    let seq = yields { 1..10 }
    assert(2, seq.Element(1))
    assert(2, seq.Element(at: 1))
    assert(10, seq.Element(9))
    assert(10, seq.Element(at: 9))
    assert(9, seq.Element(-1))
    assert(2, seq[1])
    assert(2, seq[1])
    assert(10, seq[9])
    assert(10, seq[9])
#endtest

#test "Methods: Empty"
    let seq = Iterator.Empty()
    assert(true, seq is Iterator)
    assert(0, seq.Length())
    for x in seq {
        assert(true, false)
    }
#endtest

#test "Methods: Repeat 1"
    func defaultValue() {
        var i = 0
        while true {
            yield i
            i += 1
        }
    }
    assert([0,0,0], Iterator.Repeat(0).Take(3).ToArray())
    assert([3,3,3], Iterator.Repeat(()=>3).Take(3).ToArray())
    assert([0,1,2,3,4], Iterator.Repeat(defaultValue()).Take(5).ToArray())
#endtest

#test "Methods: repeat 2"
    func notNil(x) => x != nil
    func all(seq, fn) {
        for x in seq {
            if !fn(x) {
                return false
            }
        }
        return true
    }
    let xs = Iterator.Repeat(rnd).Take(20)
    assert(true, all(xs, notNil))
    assert(20, xs.Length())
#endtest

#test "Iterator state 2"
    func it() {
        yield 1
        yield 2
        yield 3
        yield 4
        yield 5
    }
    let xs = yields { 1, 2, 3, 4, 5 }
    let ys = []
    for x in xs {
        ys.Add(x)
        if x > 3 {
            break
        }
    }
    assert([1,2,3,4], ys)
    ys.Clear()
    for x in xs {
        ys.Add(x)
    }
    assert([1,2,3,4,5], ys)
#endtest

#test "Methods: reverse"
    let xs = [1, 2, 3, 4, 5]
    assert([5, 4, 3, 2, 1], xs.Iterate().Reverse().ToArray())
    let ys = yields { 'a', "str", 12 }
    assert([12, "str", 'a'], ys.Reverse().ToArray())
#endtest

#test "Methods: sort 1"
    let refs = yields {3,5,1,6,2,4}
    let xs = refs.Sort().ToArray()
    assert([1,2,3,4,5,6], xs)
    let ys = refs.Sort((x,y) => y - x).ToArray()
    assert([6,5,4,3,2,1], ys)
#endtest

#test "Methods: sort 2"
    var refs = yields {3,5,0,1,2,4}
    try {
        refs = refs.Sort((x,y) => x / y)
    } catch {
        DivisionByZero() => assert([3,5,0,1,2,3], refs.ToArray())
    }
#endtest

#test "Methods: Shuffle"
    func eq(xs, ys) {
        return false when xs.Length() != ys.Length()
        for i in 0..<xs.Length() {
            if xs[i] != ys[i] {
                return false
            }
        }
        return true
    }
    let xs = yields { 1,2,3,4,5,6 }
    var ys = xs.Shuffle().ToArray()
    assert(6, ys.Length())
    assert(true, !eq(xs.ToArray(), ys))
#endtest

#test "Methods: Count"
    let refs = yields {3,5,1,6,2,4}
    let c = refs.Count(x => x % 2 == 0)
    assert(3, c)
#endtest

#test "Methods: Transform"
    let xs = yields { 1,2,3,4,5 }
    let ys = xs.Map(x => x + x).ToArray();
    assert([2,4,6,8,10], ys)
    let ys1 = xs.Map(transform: x => "s" + x).ToArray();
    assert(["s1","s2","s3","s4","s5"], ys1)
#endtest

#test "Methods: Map"
    func iter(x) {
        yield 1
        yield 2
        yield 3
        yield 4 / x
        yield 5
    }
    let xs = iter(4)
    let ys = xs.Map(x => x + x).ToArray()
    assert([2,4,6,2,10], ys)
    let xs1 = iter(0)
    let res = []
    try {
        for x in xs1.Map(x => x + x) {
            res.Add(x)
        }
    } catch {
        DivideByZero() => assert([2,4,6], res)
    }
#endtest

#test "Methods: Filter"
    let xs = { 1..10 }
    let ys = xs.Filter(predicate: x => x > 5)
    assert([6,7,8,9,10], ys.ToArray())
#endtest

#test "Methods: TakeWhile"
    let xs = { 1..10 }
    let ys = xs.TakeWhile(predicate: x => x < 6)
    assert([1,2,3,4,5], ys.ToArray())
#endtest

#test "Methods: SkipWhile"
    let xs = { 1..10 }
    let ys = xs.SkipWhile(predicate: x => x < 6)
    assert([6,7,8,9,10], ys.ToArray())
#endtest

#test "Methods: Reduce"
    let xs = { 1..10 }
    var res = xs.Reduce(by: (x,y) => x + y)
    assert(55, res)
    res = xs.Reduce(10, (x,y) => x + y)
    assert(65, res)
#endtest

#test "Methods: ToDictionary 1"
    let xs = yields {
        (key: 1, value: "Foo"),
        (key: 2, value: "Bar"),
        (key: 3, value: "Zoo")
    }
    var map = xs.ToDictionary(kv => kv.key, kv => kv.value)
    assert("Foo", map[1])
    assert("Bar", map[2])
    assert("Zoo", map[3])
    map = xs.ToDictionary(kv => kv.key)
    assert((key: 1, value: "Foo"), map[1])
    assert((key: 2, value: "Bar"), map[2])
    assert((key: 3, value: "Zoo"), map[3])
#endtest

#test "Methods: ToDictionary 2"
    let xs = yields {
        (key: 1, value: "Foo"),
        (key: 2, value: "Bar"),
        (key: 1, value: "Zoo")
    }
    try {
        let _ = xs.ToDictionary(kv => kv.key)
        assert(true, false)
    } catch {
        KeyAlreadyPresent() => assert(true, true)
    }
#endtest

#test "Empty sequence"
    func iter() {
        yield break
    }
    var xs = iter()
    assert(0, xs.Length())
    assert(nil, xs.First())
    assert(nil, xs.Last())
    assert([], xs.ToArray())
    xs = yields {}
    assert(0, xs.Length())
    assert(nil, xs.First())
    assert(nil, xs.Last())
    assert([], xs.ToArray())
#endtest

#test "Pattern match"
    let xs = yields { 1,2,3 }
    var res = match xs {
        (x,y,z) => x+y+z
    }
    assert(6, res)
    res = match xs {
        [x,y] => x+y
    }
    assert(3, res)
#endtest

#test "Methods: Any"
    let xs = yields { 0,0,0,1,0,0,0 }
    assert(true, xs.Any(x => x > 0))
    func iter() {
        yield nil
        yield true
        throw "err"
    }
    let ys = iter()
    assert(true, ys.Any(x => x is not nil))
#endtest

#test "Methods: all"
    let xs = yields { 10,2,3,1,4,5,6 }
    assert(true, xs.All(x => x > 0))
    assert(false, xs.All(x => x > 1))
    func iter() {
        yield true
        yield true
        throw "err"
    }
    let ys = iter()
    try {
        assert(true, ys.Any(x => x))
    } catch {
        UnexpectedError(msg) => assert("err", msg)
    }
#endtest

#test "Methods: Contains"
    let xs = yields { 10,2,3,1,4,5,6 }
    assert(true, xs.Contains(10))
    assert(true, xs.Contains(1))
    assert(false, xs.Contains(101))
#endtest
