#region "Literal"
    let x = Variant.Foo(1, 2)
    assert(1, x[0])
    assert(2, x[1])
    let y = @Foo(x: 42, y: 'F')
    assert(42, y.x)
    assert('F', y.y)
#endregion

#region "Methods: GetType"
    let v = Variant.Bar()
    assert(Variant, v.GetType())
    assert(true, v.GetType() == Variant)
#endregion

#region "Methods: ToString, ToLiteral"
    let v = @Foo(name: "John", age: 14)
    assert("Variant.Foo(name: John, age: 14)", v.ToString())
    assert("@Foo(name: \"John\", age: 14)", v.ToLiteral())
#endregion

#region "Methods: Length"
    let v = @Triple(1, 2, 3)
    assert(3, v.Length())
    let w = @Null()
    assert(0, w.Length())
    if v is (x, y, z) {
        assert(6, x + y + z)
    } else {
        assert(got: false)
    }
#endregion

#region "Equality"
    let x = @Foo(1, 2, 3)
    let y = @Foo(1, 2, 3)
    let z = @Foo(1, 2)
    assert(true, x == y)
    assert(false, y == z)
#endregion

#region "Conversion (as)"
    let x = @Multiple(1, 2, 3, 4)
    let xs = x as Tuple
    assert((1,2,3,4), xs)
#endregion

#region "Pass as value"
    func test(v) {
        assert(got: @Bar == v)
    }
    test(@Bar)
#endregion

#region "Pattern matching 1"
    let x = @Foo
    match x {
        @Foo => assert(got: true),
        _ => assert(got: false)
    }
#endregion

#region "Pattern matching 2"
    func matchIt(x) {
        match x {
            @Item(class, number, moveable) => {
                assert('A', class)
                assert(143, number)
                assert(true, moveable)
            },
            @Person(name, surname, @Male) => assert("John Doe", "\(name) \(surname)"),
            _ => assert(got: false)
        }
    }

    let x = @Item(class: 'A', number: 143, moveable: true)
    let y = @Person(name: "John", surname: "Doe", gender: @Male)
    matchIt(x)
    matchIt(y)
#endregion

#region "Mutable variant"
    let f = @Foo(var x: 1, y: 2)
    f.x = 101
    assert(101, f.x)
    try {
        f.y = 22
        assert(got: false)
    } catch {
        @IndexReadOnly => assert(got: true)
    }
#endregion