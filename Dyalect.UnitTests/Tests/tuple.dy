#region "Methods: ToString"
    var res = (1,2,3).ToString()
    assert("(1, 2, 3)", res)
    res = (1, true, (2,3)).ToString()
    assert("(1, true, (2, 3))", res)
    res = (x: 12, 44.4, y: (1, 2)).ToString()
    assert("(x: 12, 44.4, y: (1, 2))", res)
    res = (x: 42,y: "foo").ToString()
    assert("(x: 42, y: foo)", res)
#endregion

#region "Methods: Clone 1"
    let xs = (1,2,3)
    assert(true, xs == xs)
    assert(true, xs.Clone() == xs)
#endregion

#region "Methods: Clone 2"
    let xs = (1,2,3)
    assert(true, referenceEquals(xs.Clone(), xs))
    let ys = (var x: 1, 2, 3)
    assert(false, referenceEquals(ys.Clone(), ys))
#endregion

#region "Methods: GetType"
    let x = (1,2)
    assert(true, TypeInfo(x) == Tuple)
    assert(true, x.GetType() == Tuple)
    var t = TypeInfo(x)
    assert("Tuple", typeName(t))
#endregion

#region "Tuple literal 1"
    //Test if a tuple is recognized correctly
    var res = ([1,2,3].Length() + 4) * 2
    assert(14, res)
#endregion

#region "Tuple literal 2"
    var tup = (
        x: (x: 2, y: (y: 3)),
        22
    )
    var res = tup[1] + tup["x"]["x"] - tup["x"]["y"]["y"]
    assert(21, res)
#endregion

#region "Methods: Len"
    var t = (1,2,3)
    assert(3, t.Length())
#endregion

#region "Field access"
    var t = (x: 1, y: 2, z: 3)
    assert(6, t.x + t.y + t.z)
    
    t = ("long name": 12, "+": 34)
    assert(12, t["long name"])
    assert(34, t["+"])

    t = (fn: x => x+x)
    assert(42, t.fn(21))

    t = (x: 33)
    assert(33, t['x'])
#endregion

#region "Methods: Keys"
    var t = (x: 1, y: 2, z: 3)
    var res = t.Keys().ToArray()
    assert(["x", "y", "z"], res)
#endregion

#region "Methods: Indices"
    var t = (1,2,3,4,5,6)
    var res = t.Indices().ToArray()
    assert([0, 1, 2, 3, 4, 5], res)
#endregion

#region "Methods: First, Second"
    var t = (42, 4.56)
    var res = t.First() - t.Second()
    assert(37.44, res)
#endregion

#region "Equality"
    var t1 = (12, 3, 44, "string", false, 42.1)
    var t2 = (12, 3, 44, "string", false, 42.1)
    assert(got: t1 == t2)
#endregion

#region "Constructor"
    var t = Tuple(1, 2, 3, "foo", "bar", 4, 5, 6)
    var t2 = (1, 2, 3, "foo", "bar", 4, 5, 6)
    assert(t2, t)
#endregion

#region "Methods: Slice"
    var xs = (1..10).ToTuple()
    var slice = xs.Slice(4).ToTuple()
    assert((5,6,7,8,9,10), slice)
#endregion

#region "Methods: ToTuple"
    var xs = [0,1,2,3,4,5,6,7,8,9]
    var res = xs[1..5].ToTuple()
    assert((1,2,3,4,5), res)
#endregion

#region "Methods: Sort"
    var xs = (4,6,1,3,2,5)
    var ys = xs.Sort((x,y) => x - y)
    assert((1, 2, 3, 4, 5, 6), ys)

    xs = (7,4,6,1,3,2,5)
    ys = xs.Sort()
    assert((1, 2, 3, 4, 5, 6, 7), ys)
#endregion

#region "Methods: static sort"
    var xs = (4,6,1,3,2,5)
    var ys = Tuple.Sort(xs, (x,y) => x - y)
    assert((1, 2, 3, 4, 5, 6), ys)

    xs = (7,4,6,1,3,2,5)
    ys = Tuple.Sort(xs)
    assert((1, 2, 3, 4, 5, 6, 7), ys)
#endregion

#region "Single element tuple"
    var xx = (1,)
    assert((1,), xx)
    var (x,) = (2,)
    assert(x, 2)
    set (x,) = (3,)
    assert(x, 3)
#endregion

#region "Negative indices"
    var xs = (1,2,3,4,5)
    assert(5, xs[-1])
    assert(1, xs[-5])
#endregion

#region "Methods: Add"
    var xs = (1,)
    xs = xs.Add(2)
    xs = xs.Add(3)
    assert((1,2,3), xs)
#endregion

#region "Methods: Remove"
    var xs = (1,2,3,4,5)
    xs = xs.Remove(3)
    xs = xs.Remove(6)
    xs = xs.Remove(5)
    assert((1,2,4), xs)
#endregion

#region "Methods: RemoveAt"
    var xs = (1,2,3,4)
    xs = xs.RemoveAt(3)
    assert((1,2,3), xs)
    xs = xs.RemoveAt(1)
    assert((1,3), xs)
#endregion

#region "Methods: Insert"
    var xs = (1,2,3)
    xs = xs.Insert(0, 0)
    assert((0,1,2,3), xs)
    xs = xs.Insert(4, 4)
    assert((0,1,2,3,4), xs)
    xs = xs.Insert(3, 2.5)
    assert((0,1,2,2.5,3,4), xs)
#endregion

#region "Addition 1"
    var xs = (1,2,3)
    var ys = (4,5,6)
    var res = xs + ys
    assert((1,2,3,4,5,6), res)
    res = xs + [5,6]
    assert((1,2,3,5,6), res)
    res = xs + yields {11,22}
    assert((1,2,3,11,22), res)
#endregion

#region "Addition 2"
    var xs = (1,2,3)
    var res = xs + "abc"
    assert((1,2,3,'a','b','c'), res)
#endregion

#region "Methods: Concat"
    func it() {
        yield "foo"
        yield "boo"
    }
    var arr = Tuple.Concat((1,2,3), (4,5,6), [1,2], it())
    assert((1,2,3,4,5,6,1,2,"foo","boo"), arr)
#endregion

#region "Ranges"
    var xs = (1..3,)
    assert((1,2,3), xs)
#endregion

#region "Mutable tuples 1"
    var xs = (var x: 12, var y: 14)
    xs[0] = xs[0] * 2
    xs[1] = xs[1] * 2
    assert((24, 28), xs)
    xs = (var x:12, var y:14)
    xs.x = xs.x * 2
    xs.y = xs.y * 2
    assert((24, 28), xs)
    xs["x"] = xs["x"] * 2
    xs["y"] = xs["y"] * 2
    assert((48, 56), xs)
#endregion

#region "Mutable tuples 2"
    var xs = (var x: 3, y: 4, var z: 5)
    xs.x = 33
    assert(33, xs.x)
    try {
        xs.y = 44
        assert(got: false)
    } catch {
        @IndexReadOnly() => assert(4, xs.y)
    }
#endregion

#region "Mutable tuples 3"
    var xs = ( 1..5, )
    try {
        xs[0] = 0
        assert(got: false)
    } catch {
        @IndexReadOnly() => assert(got: true)
    }
#endregion

#region "Methods: ToString (mutable)"
    let xs = (var x: 2, y: 3, var z: 4, let xx: 42)
    let str = xs.ToString()
    assert(expect: "(var x: 2, y: 3, var z: 4, xx: 42)", got: str) 
#endregion

#region "Methods: ToDictionary"
    let xs = (name: "Vasily", age: 41, gender: "Male")
    let dict = xs.ToDictionary()
    assert("Vasily", dict["name"])
    assert(41, dict["age"])
    assert("Male", dict["gender"])
#endregion

#region "Methods: Contains"
    let xs = (name: "Vasily", age: 41, gender: "Male")
    assert(true, xs.Contains("name"))
    assert(true, xs.Contains("age"))
    assert(true, xs.Contains("gender"))
    assert(false, xs.Contains("NAME"))
    try {
        assert(true, xs.Contains(42))
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Methods: ToLiteral"
    let xs = (x: 1, "Fo obj": 'c')
    assert("(x: 1, \"Fo obj\": 'c')", xs.ToLiteral())
#endregion

#region "Methods: Compact"
    let xs = (1, nil, 2, 3, nil, 4)
    var ys = xs.Compact()
    assert((1,2,3,4), ys)
    ys = xs.Compact(x => !x || x < 3)
    assert((3,4), ys)
#endregion

#region "Exceptions with tuples"
    let xs = (x: 1, y: 2)
    try {
        xs[2]
    } catch {
        @IndexOutOfRange() => assert(got: true)
    }
    try {
        xs.z
    } catch {
        @IndexOutOfRange() => assert(got: true)
    }
#endregion

#region "Conversion: as 1"
    let xs = (1,2,3)
    assert([1,2,3], xs as Array)
    assert("(1, 2, 3)", xs as String)
    assert(true, xs as Bool)
#endregion

#region "Conversion: as 2"
    let xs = (1,2,2,3,3)
    assert((1,2,3), (xs as Array).ToSet().ToTuple())
#endregion

#region "Tuple as argument"
    func takeMany(args...) {
        assert(1, args.x)
        assert(22, args.y)
    }
    takeMany(x: 1, y: 22)
    takeMany(args: (x: 1, y: 22))
#endregion

#region "Comparison 1"
    assert(got: (0, 1) < (1, 0))
    assert(got: (0, 12, 33, 98) < (0, 12, 33, 99))
    assert(got: (0, 12, 33, 98, "foo") < (0, 12, 33, 99))
    assert(false, (1, 2, 3, 1) < (1, 2, 2, 1024))
#endregion

#region "Comparison 2"
    assert(got: (1, 0) > (0, 1))
    assert(got: (0, 12, 33, 99) > (0, 12, 33, 98))
    assert(got: (0, 12, 33, 99) > (0, 12, 33, 98, 1024))
    assert(false, (1, 2, 2, 1024) > (1, 2, 3, 1))
    try {
        let _ = (0, 12, 33, 99) > (0, 12, "33", 98, 123)
        assert(got: false)
    } catch {
        @OperationNotSupported() => assert(got: true)
    }
#endregion

#region "Operator in"
    let xs = (x: 1, y: 2)
    assert(true, "x" in xs)
    assert(false, "z" in xs)
#endregion

#region "Variadic function and labels"
    func test(args...) {
        assert("(x: 1, y: 2)", args.ToString())
    }
    test(args: (x: 1, y: 2))
#endregion

#region "Methods: ToSet"
    let xs = (1,2,2,2,3,4,4,5,5,5)
    let ys = xs.ToSet()
    assert("Set(1, 2, 3, 4, 5)", ys.ToString())
#endregion

#region "Tuple: Alter 1"
    let xs = (x: 1, y: 2)
    let ys = xs.Alter(y: 22, z: 3)
    assert((x: 1, y: 22, z: 3), ys)
#endregion

#region "Tuple: Alter 2"
    let xs = (x: 1, y: 2)
    let ys = xs.Alter('f', 'o', 'o', y: 22, z: 3)
    assert((x: 1, y: 22, 'f', 'o', 'o', z: 3), ys)
#endregion