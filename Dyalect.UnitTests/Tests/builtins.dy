#region "parse"
    let res = parse("[1,2,3,('c',true,23.4),nil]")
    assert([1,2,3,('c',true,23.4),nil], res)
    assert(true, parse("true"))
    assert((1,2), parse("(1,2)"))
    assert([1,2,3], parse("[1,2,3]"))
    
    let xs = parse("[12.0, true, (1,2)]")
    let pat = [12.0, true, (1,2)]
    assert(pat, xs)
#endregion

#region "eval" 
    var z = eval("x + y", (x: 2, y: 3) )
    assert(5, z)
    let src = "x + y * z"
    let res = eval(src, (x: 2, y: 12, z: 3) )
    assert(38, res)
#endregion

#region "round" 
    var x = round(42.12345) //Evaluates to 42.12
    var y = round(42.12345, 4) //Evaluates to 42.1234
    assert(42.12, x)
    assert(42.1234, y)
#endregion

#region "min" 
    var x = min(12, 2)
    assert(2, x)
    x = min(2, 24)
    assert(2, x)
    x = min(12, 12)
    assert(12, x)
    x = min(-12, 0)
    assert(-12, x)
#endregion

#region "max" 
    var x = max(12, 2)
    assert(12, x)
    x = max(2, 24)
    assert(24, x)
    x = max(12, 12)
    assert(12, x)
    x = max(-12, 0)
    assert(0, x)
#endregion

#region "sign" 
    var x = sign(123)
    assert(1, x)
    x = sign(-668)
    assert(-1, x)
    x = sign(0)
    assert(0, x)
#endregion

#region "sqrt" 
    var x = sqrt(246)
    x = round(x, 4)
    assert(15.6844, x)
#endregion

#region "abs" 
    assert(12, abs(-12))
    assert(42, abs(42))
    let x = -14.102
    assert(14.102, abs(x))
#endregion

#region "rnd" 
    let x = rnd(max: 10, min: 3)
    assert(true, x <= 10 && x >= 3)
#endregion

#region "pow"
    assert(46918, Integer(pow(12.2, 4.3)))
    assert(3111696, Integer(pow(42, 4)))
#endregion

#region "setOut"
    let xs = []
    setOut(s => xs.Add(s))
    print("String", terminator: nil)
    print(true, terminator: nil)
    print(42, terminator: nil)
    setOut()
    assert(["String", "true", "42"], xs)
#endregion

#region "assert"
    try {
        assert(expect: 1, got: 2, errorText: "Strange!!!")
    } catch {
        AssertionFailed(str) => assert("Strange!!!", str)
    }
#endregion