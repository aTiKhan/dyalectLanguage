#region "parse 1"
    let res = parse("[1,2,3,('c',true,23.4),nil]")
    assert([1,2,3,('c',true,23.4),nil], res)
    assert(true, parse("true"))
    assert((1,2), parse("(1,2)"))
    assert([1,2,3], parse("[1,2,3]"))
    
    let xs = parse("[12.0, true, (1,2)]")
    let pat = [12.0, true, (1,2)]
    assert(pat, xs)
#endregion

#region "parse 2"
    try {
        parse("[1+2, 3]")
        assert(got: false)
    } catch {
        @ParsingFailed => assert(got: true)
    }
#endregion

#region "parse 3"
    let xs = parse("[x: 1, y: 2]")
    assert(1, xs.x)
    assert(2, xs.y)
#endregion

#region "parse 4"
    let xs = parse("@Foo(x: 1, y: 2)")
    assert("Foo", constructorName(xs))
    assert(1, xs.x)
    assert(2, xs.y)
#endregion

#region "eval" 
    var z = eval("x + y", (x: 2, y: 3) )
    assert(5, z)
    let src = "x + y * z"
    let res = eval(src, (x: 2, y: 12, z: 3) )
    assert(38, res)
#endregion

#region "round" 
    var x = round(42.12345) //Evaluates to 42.12
    var y = round(42.12345, 4) //Evaluates to 42.1234
    assert(42.12, x)
    assert(42.1234, y)
#endregion

#region "min" 
    var x = min(12, 2)
    assert(2, x)
    x = min(2, 24)
    assert(2, x)
    x = min(12, 12)
    assert(12, x)
    x = min(-12, 0)
    assert(-12, x)
#endregion

#region "max" 
    var x = max(12, 2)
    assert(12, x)
    x = max(2, 24)
    assert(24, x)
    x = max(12, 12)
    assert(12, x)
    x = max(-12, 0)
    assert(0, x)
#endregion

#region "sign" 
    var x = sign(123)
    assert(1, x)
    x = sign(-668)
    assert(-1, x)
    x = sign(0)
    assert(0, x)
#endregion

#region "sqrt" 
    var x = sqrt(246)
    x = round(x, 4)
    assert(15.6844, x)
#endregion

#region "abs" 
    assert(12, abs(-12))
    assert(42, abs(42))
    let x = -14.102
    assert(14.102, abs(x))
#endregion

#region "rnd" 
    let x = rnd(max: 10, min: 3)
    assert(true, x <= 10 && x >= 3)
#endregion

#region "pow"
    assert(46918, Integer(pow(12.2, 4.3)))
    assert(3111696, Integer(pow(42, 4)))
#endregion

#region "setOut"
    let xs = []
    setOut(s => xs.Add(s))
    print("String", terminator: nil)
    print(true, terminator: nil)
    print(42, terminator: nil)
    setOut()
    assert(["String", "true", "42"], xs)
#endregion

#region "assert"
    try {
        assert(expect: 1, got: 2, errorText: "Strange!!!")
    } catch {
        @AssertionFailed(str) => assert("Strange!!!", str)
    }
#endregion

#region "rawget and rawset"
    type Foo(var x, var y, var z)
    func get Foo[index] {
        match index {
            >2 or <0 => @IndexOutOfRange(index),
            _ => rawget(this, index)
        }
    }
    func set Foo[index, value] {
        match index {
            >2 or <0 => @IndexOutOfRange(index),
            _ => rawset(this, index, value)
        }
    }
    let f = Foo(1, 2, 3)
    assert(2, f[1])
    f[1] = 1024
    assert(1024, f[1])
#endregion

#region "rawset and read-only"
    let xs = (1, 2, 3)
    try {
        xs >> rawset(0, 12)
        assert(got: false)
    } catch {
        @IndexReadOnly => assert(got: true)
    }
#endregion

#region "constructorName"
    type Foo = Foo() or Bar()
    assert("Foo", constructorName(Foo()))
    assert("Bar", constructorName(Foo.Bar()))
    assert("FooBar", constructorName(@FooBar))
    assert(nil, constructorName(12))
#endregion

#region "typeName"
    type Bar()
    assert("Bar", typeName << Bar())
    assert("Bar", typeName << Bar().GetType())
    assert("Variant", typeName << @Foo)
    assert("Variant", typeName << @Foo.GetType())
    assert("Char", typeName << 'c'.GetType())
    assert("Char", typeName('c'))
#endregion

#region "referenceEquals 1"
    var x = 2
    var y = 1 + 1
    assert(true, x == y)
    assert(false, referenceEquals(x, y))
#endregion

#region "referenceEquals 2"
    let xs = (1,2,3)
    let ys = (1,2,3)
    assert(true, xs == ys)
    assert(false, referenceEquals(xs, ys))
#endregion

#region "toString"
    func Integer.ToString() => "Nothing here!"
    assert("Nothing here!", 12.ToString())
    assert("12", toString(12))
#endregion

#region "mixins"
    let v = "str"
    let xs = mixins(v).Iterate().Map(typeName).ToArray()
    assert(["Object", "Lookup", "Order", "Equatable", "Sequence", "Show"], xs)
#endregion

#region "length 1"
    assert(3, length << (1,2,3))
    assert(2, length << [1,2])
    assert(2, length << [x: 1, y: 2])
    assert(4, length << Set(1,2,3,4))
    assert(3, length("abc"))
    assert(nil, length(12))
#endregion

#region "length 2"
    type Foo()
    assert(0) << length(Foo())
    type Bar(x)
    assert(1) << length(Bar(42))
#endregion

#region "clone"
    assert(true, referenceEquals(42, clone(42)))
    let xs = [1,2,3]
    assert(false, referenceEquals(xs, clone(xs)))
#endregion