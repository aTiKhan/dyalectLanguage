type Foo
type Bar

func extendTest1() {
    static func Bar.Bar(args...) {
        new(args)
    }
    func Bar.len() {
        valueof(this).len()
    }
    func Bar.get(index) {
        valueof(this)[index]
    }
    var obj = Bar.Bar(1, 2, 3)
    var res = match obj {
        (x, y) => x + y,
        (x, y, z) => x + y + z
    }
    assert(6, res)
}

func extendTest2() {
    static func Bar.Bar(args...) {
        new(args)
    }
    func Bar.len() {
        valueof(this).len()
    }
    func Bar.get(index) {
        valueof(this)[index]
    }
    var obj = Bar(1, 2, 3)
    var res = match obj {
        (x, y) => x + y,
        (x, y, z) => x + y + z
    }
    assert(6, res)
}

type Maybe = None() | Some(x)
func autoConsTest1() {
    var x = Maybe.Some(42)
    var y = Maybe.None()
    func doMatch(x) {
        match x {
            Some(x) => x,
            None() => "None"
        }
    }
    assert(42, doMatch(x))
    assert("None", doMatch(y))
}

type Foo1 = Bar(x, y, z)
func autoConsTest2() {
    var f = Foo1.Bar(12, "foobar", 3)
    var res = match f {
        Bar(x = xx, y = yy, z = zz) => "\(xx),\(yy)",
        Bar(x, y, z) => x + z,
        Bar() => "not quite"
    }
    assert("12,foobar", res)
}

type Point(x, y)
func autoConsTest3() {
    var p = Point(12, 43)
    assert(12, p[0])
    assert(43, p[1])
    assert(12, p:x)
    assert(43, p:y)
}

type Nat
func typeTest1() {
    func fetch(x) {
        if x < 0 {
            x
        } else {
            Nat(x)
        }
    }
    static func Nat.Nat(x) {
        if x < 0 {
            throw "Negative number."
        }
        new(x)
    }
    func Nat.toInteger() {
        valueof(this)
    }
    func Nat + (other) {
        fetch(valueof(this) + other.toInteger())
    }
    func Nat - (other) {
        fetch(valueof(this) - other.toInteger())
    }
    func Nat * (other) {
        fetch(valueof(this) * other.toInteger())
    }
    func Nat / (other) {
        fetch(valueof(this) / other.toInteger())
    }
    func Nat == (other) {
        valueof(this) == other.toInteger()
    }
    var n = Nat(12)
    assert(Nat(24), n + Nat(12))
    assert(Nat(2), n - Nat(10))
    assert(-8, n - Nat(20))
    assert(Nat(24), n * Nat(2))
    assert(Nat(6), n / Nat(2))
    assert(Nat(6), n / Nat(2))
}

type Either = Left(x) | Right(x)
func typeTest2() {
    var x = Either.Left(12)
    var y = Either.Right(24)
    func doMatch(obj) {
        match obj {
            Left(x) => x,
            Right(y) => y
        }
    }
    assert(12, doMatch(x))
    assert(24, doMatch(y))
}

type Cell
func typeTest3() {
    func ref(value) {
        Cell((__value = value))
    }
    static func Cell.Cell(value) {
        new(value)
    }
    func Cell.setValue(value) {
        valueof(this):__value = value
    }
    func Cell.getValue() {
        valueof(this):__value
    }
    func Cell.get(index) {
        if index != 0 {
            throw "Index out of range."
        }
        valueof(this):__value
    }
    func Cell.len() {
        1
    }
    var c = ref(12)
    assert(12, c.getValue())
    assert(12, match c {
        Cell(x) => x
    })
    c.setValue(24)
    assert(24, c.getValue())
    assert(24, match c {
        Cell(x) => x
    })
}

type List = Cons(x, next) | Empty()
func typeTest4() {
    func List.toString() {
        func walk(xs) {
            match xs {
                Cons(x, Empty()) => x.toString(),
                Cons(x, next) => x.toString() + "," + walk(next),
                Empty() => ""
            }
        }
        return "[" + walk(this) + "]"
    }
    var xs = List.Cons(1, List.Cons(2, List.Cons(3, List.Cons(4, List.Empty()))))
    assert("[1,2,3,4]", xs.toString())
}

func typeTest5() {
    static func List.List(values...) {
        var xs = List.Empty()
        for x in values {
            xs = List.Cons(x, xs)
        }
        xs
    }
    var xs = List(1,2,3,4)
    assert("[4,3,2,1]", xs.toString())
}

type Zoo1()
func typeTest6() {
    var x = Zoo1()
    func Zoo1.toString() {
        match valueof(this) {
            nil => "nil"
        }
    }
    assert("nil", x.toString())
}

type Zeta()
func simpleTypeTest1() {
    var z = Zeta()
    var res = z.len()
    assert(0, res)
}

type Beta(x)
func simpleTypeTest2() {
    var b = Beta(12)
    assert(1, b.len())
    assert(12, b[0])
    assert(12, b["x"])
    assert(12, b:x)
}

type Record
func accessorTest() {
    static func Record.Record(values...) {
        new(values)
    }
    func Record.get(index) {
        if index == "name" {
            return valueof(this):name
        } else if index == "age" {
            return valueof(this):age
        }
    }
    var p = Record(values = (name = "John", age = 33))
    assert("John", p:name)
    assert(33, p:age)
}

type UserInfo(name,age)
func setterTest1() {
    var u = UserInfo("Jon", 17)
    assert(17, u:age)
    u:age = 39
    assert(39, u:age)
}

type Point1
func setterTest2() { //Bug #205
    static func Point1.Point1(x, y) {
        new((x, y))
    }
    func Point1.get(index) {
        valueof(this)[index]
    }
    func Point1.set(index, value) {
        valueof(this)[index] = value
    }
    var p = Point1(12, 34)
    p:x += p:x
    p:y += p:y
    assert(24, p:x)
    assert(68, p:y)
}

func complexMemberCheckTest1() {
    var t = (x =2)
    assert(false, t.x?)
}

func complexMemberCheckTest2() {
    func Integer.foobar() {}
    assert(true, 12.foobar?)
    Integer.__deleteMember("foobar")
}

type X22(x)
func complexMemberCheckTest3() {
    func X22.foobar() {}
    var p = X22(22)
    assert(false, p.x?)
    assert(true, p.foobar?)
}