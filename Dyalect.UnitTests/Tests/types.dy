#region "Methods: GetType"
    type Foo()
    let x = Foo()
    assert(true, TypeInfo(x) == Foo)
    assert(true, x.GetType() == Foo)
    var t = TypeInfo(x)
    assert("Foo", typeName(t))
#endregion

#region "Methods: Clone"
    type Foo() with Identity, Equatable
    let xs = Foo()
    assert(true, xs == xs)
    assert(true, xs.Clone() == xs)
#endregion

#region "Methods: ToString"
    type Foo(x, y, z) with Show
    let xs = Foo(1, 2, 3)
    let str = xs.ToString()
    assert("Foo(x: 1, y: 2, z: 3)", str)
#endregion

#region "Statics"
    try {
        Integer.ToString()
        assert(got: false)
    } catch {
        @OperationNotSupported => assert(got: true)
    }
#endregion

#region "Standard mixins"
    type Foo(x) with Lookup
    var f = Foo(42)
    assert(42, f.x)
    assert(42, f[0])
    assert(1, f.Length())
    match f {
        Foo(x) => assert(42, x)
    }
#endregion

#region "Empty variant"
    type Void() with Lookup, Show
    var f = Void()
    assert(0, f.Length())
    match f {
        Void() => assert(true, true)
    }
    assert("Void()", f.ToString())
#endregion

#region "Multiple productions"
    type Asset = Computer(model, memory, rank) or Phone(model, memory) or Modem(model)
        with Lookup, Show
    var a1 = Asset.Computer(model: "Lenovo", memory: 16, rank: 3)
    var a2 = Asset.Phone("1+", 8)
    var a3 = Asset.Modem("Zyxel")
    assert(3, a1.Length())
    assert(2, a2.Length())
    assert(1, a3.Length())
    assert("Lenovo"+16+3, a1.model+a1.memory+a1.rank)
    assert("1+"+8, a2.model+a2.memory)
    assert("Zyxel", a3.model)
    assert("Asset.Computer(model: \"Lenovo\", memory: 16, rank: 3)", a1.ToString())
    assert("Asset.Phone(model: \"1+\", memory: 8)", a2.ToString())
    assert("Asset.Modem(model: \"Zyxel\")", a3.ToString())
#endregion

#region "Pattern match 1"
    type Asset = Computer(model, memory, rank) or Phone(model, memory) or Modem(model)
        with Lookup
    var a1 = Asset.Computer(model: "Lenovo", memory: 16, rank: 3)
    var a2 = Asset.Phone("1+", 8)
    func mem(a) {
        match a {
            Asset.Computer(model, memory, rank) => memory,
            Asset.Phone(model, memory) => memory
        }
    }
    assert(16, mem(a1))
    assert(8, mem(a2))
#endregion

#region "Extending type 1"
    type Bar(args...) {
        let data = args
    }
    func Bar.Length() {
        ini.data.Length()
    }
    func get Bar[index] {
        ini.data[index]
    }
    var obj = Bar(1, 2, 3)
    var res = match obj {
        (x, y) => x + y,
        (x, y, z) => x + y + z
    }
    assert(6, res)
#endregion

#region "Maybe or Some"
    type Maybe = None() or Some(x) with Lookup
    var x = Maybe.Some(42)
    var y = Maybe.None()
    func doMatch(x) {
        match x {
            Some(x) => x,
            None() => "None"
        }
    }
    assert(42, doMatch(x))
    assert("None", doMatch(y))
#endregion

#region "Pattern match 2"
    type Foo = Bar(x, y, z) with Lookup, Container
    var f = Foo.Bar(12, "foobar", 3)
    var res = match f {
        Bar(x: xx, y: yy, z: zz) => "\(xx),\(yy)",
        Bar(x, y, z) => x + z,
        Bar() => "not quite"
    }
    assert("12,foobar", res)
#endregion

#region "Point variant"
    type Point(x, y) with Lookup
    var p = Point(12, 43)
    assert(12, p[0])
    assert(43, p[1])
    assert(12, p.x)
    assert(43, p.y)
#endregion

#region "Natural number 1"
    type Nat(value) {
        throw @Error("Negative number.") when value < 0
    } with Lookup
    func fetch(x) {
        x >= 0 ? Nat(x) : x
    }
    func Nat.ToInteger() {
        val when this is Nat(val)
    }
    func Nat + (other) {
        fetch(this.value + other.value)
    }
    func Nat - (other) {
        fetch(this.value - other.value)
    }
    func Nat * (other) {
        fetch(this.value * other.value)
    }
    func Nat / (other) {
        fetch(this.value / other.value)
    }
    func Nat == (other) {
        this.value == other.value
    }
    var n = Nat(12)
    assert(Nat(24), n + Nat(12))
    assert(Nat(2), n - Nat(10))
    assert(-8, n - Nat(20))
    assert(Nat(24), n * Nat(2))
    assert(Nat(6), n / Nat(2))
    assert(Nat(6), n / Nat(2))
#endregion

#region "Either"
    type Either = Left(x) or Right(x) with Lookup
    var x = Either.Left(12)
    var y = Either.Right(24)
    func doMatch(obj) {
        match obj {
            Left(x) => x,
            Right(y) => y
        }
    }
    assert(12, doMatch(x))
    assert(24, doMatch(y))
#endregion

#region "Reference cell"
    type Cell(value) {
        var internal = value
    }
    let ref = Cell.Cell
    func Cell.SetValue(value) {
        ini.internal = value
    }
    func Cell.GetValue() {
        ini.internal
    }
    func get Cell[index] {
        if index is not 0 {
            throw @IndexOutOfRange()
        }
        ini.internal
    }
    func Cell.Length() {
        1
    }
    var c = ref(12)
    assert(12, c.GetValue())
    c.SetValue(24)
    assert(24, c.GetValue())
#endregion

#region "Linked list"
    type List = Cons(x, next) or Empty() with Lookup
    func List.ToString() {
        func walk(xs) {
            match xs {
                Cons(x, Empty()) => x.ToString(),
                Cons(x, next) => x.ToString() + "," + walk(next),
                Empty() => ""
            }
        }
        return "[" + walk(this) + "]"
    }
    var xs = List.Cons(1, List.Cons(2, List.Cons(3, List.Cons(4, List.Empty()))))
    assert("[1,2,3,4]", xs.ToString())
#endregion

#region "Generate linked list"
    type List = Cons(x, next) or Empty() with Lookup
    func List.ToString() {
        func walk(xs) {
            match xs {
                Cons(x, Empty()) => x.ToString(),
                Cons(x, next) => x.ToString() + "," + walk(next),
                Empty() => ""
            }
        }
        return "[" + walk(this) + "]"
    }
    static func List.Generate(values...) {
        var xs = List.Empty()
        for x in values {
            xs = List.Cons(x, xs)
        }
        xs
    }
    var xs = List.Generate(1,2,3,4)
    assert("[4,3,2,1]", xs.ToString())
#endregion

#region "Custom ToString"
    type Foo()
    var x = Foo()
    func Foo.ToString() {
        match this {
            Foo() => "nil"
        }
    }
    assert("nil", x.ToString())
#endregion

#region "Record"
    type Record(fields...) {
        let data = fields
    }
    func get Record[index] => ini.data[index]
    var p = Record(name: "John", age: 33)
    assert("John", p["name"])
    assert(33, p.age)
    var p2 = Record(name: "John", age: 33)
    assert("John", p2["name"])
    assert(33, p2.age)
#endregion

#region "Read-only fields"
    type UserInfo(name,age) with Collection
    var u = UserInfo("Jon", 17)
    assert(17, u.age)
    try {
        u.age = 39
        assert(got: false)
    } catch {
        @IndexReadOnly() => assert(got: true)
    }
#endregion

#region "Default values"
    type Foo(a, b = 12, c = 33) with Lookup
    var t = Foo(1)
    assert(1, t.a)
    assert(12, t.b)
    assert(33, t.c)
    t = Foo(1, 2)
    assert(1, t.a)
    assert(2, t.b)
    assert(33, t.c)
    t = Foo(1, 2, 3)
    assert(1, t.a)
    assert(2, t.b)
    assert(3, t.c)
#endregion

#region "Mutable Point"
    type Point(var x, var y) with Collection
    func get Point[index] {
        match index {
            0 or "x" => rawget(this, "x"),
            1 or "y" => rawget(this, "y"),
            _ => throw @IndexOutOfRange()
        }
    }
    func set Point[index, value] {
        match index {
            0 or "x" => rawset(this, "x", value),
            1 or "y" => rawset(this, "y", value),
            _ => throw @IndexOutOfRange()
        }
    }
    var p = Point(12, 34)
    p.x += p.x
    p.y += p.y
    assert(24, p.x)
    assert(68, p.y)
#endregion

#region "Member check 1"
    var t = (x: 2)
    assert(false, t is .x)
#endregion

#region "Member check 2"
    func Integer.Foobar() {}
    assert(true, 12 is .Foobar)
#endregion

#region "Member check 3"
    type Foo(x)
    func Foo.Foobar() {}
    var p = Foo(22)
    assert(false, p is .Barfoo)
    assert(true, p is .Foobar)
#endregion

#region "Callable type 1"
    type Julia(x) with Lookup
    func Julia.Call(y, z) {
        this.x + y * z 
    }
    var x = Julia(12)
    var res = x(44.5, 67.07)
    assert(2996.615, res)
#endregion

#region "Callable type 2"
    func Integer.Call() {
        this + this
    }
    var res = 14()
    assert(28, res)
#endregion

#region "Pattern match: is"
    type Option = Some(x) or None()
    let some = Option.Some(42)
    let none = Option.None()
    var x
    x = 42 when some is Option && none is Option
    assert(42, x)
#endregion

#region "Pattern match: inside method"
    type Option = Some(x) or None() with Lookup
    func Option.ExtractValue() {
        if this is Some(x) {
            x
        }
    }
    let some = Option.Some(42)
    assert(42, some.ExtractValue())
#endregion

#region "String builder"
    type StringBuilder() {
        let buffer = []
    } with Lookup

    func StringBuilder.Append(val) => ini.buffer.Add(val.ToString())
    func StringBuilder.Clear() => ini.buffer.Clear()
    func StringBuilder.ToString() => String.Concat(values: ini.buffer)
    func StringBuilder.Length() {
        var count = 0
        for x in ini.buffer {
            count += x.Length()
        }
        return count
    }
    let sb = StringBuilder()
    sb.Append("my ")
    sb.Append("rank ")
    sb.Append("is ")
    sb.Append(123)
    assert("my rank is 123", sb.ToString())
    assert(14, sb.Length())
    sb.Clear()
    sb.Append(true)
    sb.Append(false)
    assert("truefalse", sb.ToString())
#endregion

#region "Natural number 2"
    type RealNat(num) {
        throw @InvalidType(num) when num is not Integer
    } with Lookup
    func RealNat + (other) {
        let res = match other {
            RealNat => this.num + other.num,
            Integer => this.num + other,
            _ => throw @InvalidType(other.GetType())
        }
        res >= 0 ? RealNat(res) : res
    }
    func RealNat == (other) => this.num == other.num
    var (x, y) = (RealNat(12), RealNat(10))
    assert(RealNat(22), x + y)
    assert(RealNat(2), x + -10)
    assert(-2, x + -14)
#endregion

#region "Mutable variant 1"
    type Foo(var x, y) with Collection
    let t = Foo(12, 24)
    t.x = 120
    assert(120, t.x)
    try {
        t.y = 240
        assert(got: false)
    } catch {
        @IndexReadOnly() => assert(got: true)
    }
#endregion

#region "Mutable variant 2"
    type Foo(var Integer x, y) with Collection
    let t = Foo(12, 24)
    t.x = 1
    assert(1, t.x)
    try {
        t.x = "240"
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Custom constructor with constraints"
    type Foo(var data)
    func get Foo[field] {
        match field {
            "x" => rawget(this, "data"),
            _ => throw @IndexOutOfRange(field)
        }
    }
    func set Foo[field, Integer value] {
        match field {
            "x" => rawset(this, "data", value),
            _ => throw @IndexOutOfRange(field)
        }
    }
    let t = Foo(12)
    t.x = 120
    try {
        t.x = "120"
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true),
        _ => assert(got: false)
    }
#endregion

#region "Variant members"
    type Expr = Literal(var Float value) or Unary(var op, var Expr left)
        with Collection
    let a = Expr.Literal(12.2)
    assert(12.2, a.value)
    a.value = 44.4
    assert(44.4, a.value)
    let b = Expr.Unary("-", a)
    assert("-", b.op)
    assert(44.4, b.left.value)
    b.op = "+"
    assert("+", b.op)
    b.left.value = 42.0
    assert(42.0, b.left.value)
#endregion

#region "Properties 1"
    type Foo(var status) with Collection

    func get Foo.Status() => this.status
    func set Foo.Status(value) => this.status = value
    let f = Foo(10)
    assert(10, f.Status)
    f.Status = 21
    assert(21, f.Status)
    f.Status += 11
    assert(32, f.Status)
#endregion

#region "Properties 2"
    type Foo() {
        var box
    }

    func get Foo.Box() => ini.box
    func set Foo.Box(value) => ini.box = value

    let f = Foo()
    assert(42, f.Box ?? 42)
    f.Box ??= 144
    assert(144, f.Box)
    f.Box ??= 288
    assert(144, f.Box)
#endregion

#region "Custom conversion"
    type Foo(Integer x) with Lookup
    func Foo as Integer { this.x }
    func Foo as String { "Foo" }
    let f = Foo(42)
    assert("Foo", f as String)
    assert(42, f as Integer)
#endregion

#region "Type annotations 1"
    type Foo(Integer x, Float y)
    let _ = Foo(12, 12.12)
    try {
        let _ = Foo(12.2, 12)
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Type annotations 2"
    type Number(Integer|Float x)
    let _ = Number(12)
    let _ = Number(21.221)
    try {
        let _ = Number("string")
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Type annotations 3"
    type Foo(var Integer value) with Collection
    let x = Foo(12)
    assert(12, x.value)
    x.value = 122
    assert(122, x.value)
    try {
        x.value = 0.25
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Type annotations 4"
    type Foo(var Integer|Char value) with Collection
    let x = Foo(12)
    assert(12, x.value)
    x.value = 'A'
    assert('A', x.value)
    try {
        x.value = true
        assert(got: false)
    } catch {
        @InvalidType() => assert(got: true)
    }
#endregion

#region "Initialization blocks 1"
    type Nat(x) {
        throw @InvalidValue(x) when x == 0
        let num = abs(x)
    } with Lookup
    func Nat as Integer => ini.num
    var x = Nat(12)
    assert(12, x as Integer)
    x = Nat(-24)
    assert(24, x as Integer)
    try {
        x = Nat(0)
        assert(got: false)
    } catch {
        @InvalidValue(x) => assert(0, x)
    }
#endregion

#region "Initialization blocks 2"
    type Expr =
        Literal(typ) {
            if typ is not "num" and not "string" {
                typ = "nil"
            }
        }
        or Function(Integer args) {
            if args < 0 {
                args = 0
            }
        }
        with Lookup
    assert("num", Expr.Literal("num").typ)
    assert("nil", Expr.Literal("char").typ)
    assert(3, Expr.Function(3).args)
    assert(0, Expr.Function(-5).args)
#endregion

#region "Custom fields and pattern matching"
    type Foo()
    func get Foo[key] {
	    match key {
		    "id" => 42,
		    "code" => "Code:Foo"
	    }
    }
    func Foo.In(field) => field is "id" or "code"
    let f = Foo()
    assert(42, f.id)
    assert("Code:Foo", f.code)
    assert(true, "id" in f)

    match f {
	    (id: id_var, code: code_var) => {
            assert(42, id_var)
            assert("Code:Foo", code_var)
        },
        _ => assert(got: false)
    }
#endregion

#region "Default conversions"
    type Foo(x, y, z)
    let f = Foo(1, 2, 3)
    assert([1,2,3], f as Array)
    assert((x: 1, y: 2, z: 3), f as Tuple)
    assert("[\"x\": 1, \"y\": 2, \"z\": 3]", (f as Dictionary).ToString())
#endregion

#region "Final methods 1"
    type Foo()
    final func get Foo[index] { }
    try {
        func get Foo[index] {}
        assert(got: false)
    } catch {
        @OverloadProhibited => assert(got: true)
    }
#endregion

#region "Final methods 2"
    type Foo()
    final static func Foo.Bar() { }
    try {
        static func Foo.Bar() { }
        assert(got: false)
    } catch {
        @OverloadProhibited => assert(got: true)
    }
#endregion