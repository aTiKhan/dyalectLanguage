#region "Literal"
    let xs = [x: 1, y: 2, "long key": 33]
    assert(1, xs.x)
    assert(2, xs.y)
    assert(33, xs["long key"])
#endregion

#region "Constructor 1"
    let xs = Dictionary(
        (x: 1, y: 2, z: "foo")
    )
    assert(1, xs["x"])
    assert(2, xs["y"])
    assert("foo", xs["z"])
#endregion

#region "Constructor 2"
    let xs = Dictionary (foo: 42, "best key": true, bar: "string value")
    assert(42, xs.foo)
    assert(true, xs["best key"])
    assert("string value", xs.bar)
#endregion

#region "Methods: GetType"
    let x = Dictionary()
    assert(true, TypeInfo(x) == Dictionary)
    assert(true, x.GetType() == Dictionary)
    var t = TypeInfo(x)
    assert("Dictionary", typeName(t))
#endregion

#region "Methods: Clone"
    let xs = Dictionary()
    assert(true, xs == xs)
    assert(false, xs.Clone() == xs)
#endregion

#region "Methods: FromTuple"
    var map = Dictionary.FromTuple( (name: "John", surname: "Doe", age: 50) )
    assert("John", map.name)
    assert("Doe", map.surname)
    assert(50, map.age)

    map = Dictionary.FromTuple( (foo: "foo", bar: "bar") )
    assert("foo", map.foo)
    assert("bar", map.bar)
#endregion

#region "Methods: ToString"
    let xs = Dictionary(x: 12, b: 'c', foo: "bar")
    assert("[\"x\": 12, \"b\": 'c', \"foo\": \"bar\"]", xs.ToString())
#endregion

#region "Methods: Add"
    var map = Dictionary()
    map.Add("x", 1)
    map.Add("y", 2)
    assert(1, map["x"])
    assert(2, map["y"])

    map = Dictionary()
    map.Add(("x",1), 1)
    map.Add(("y",2), 2)
    assert(1, map[("x",1)])
    assert(2, map[("y",2)])
#endregion

#region "Indexing"
    var map = Dictionary()
    map[42] = 420
    map[42] = map[42] * 2
    assert(840, map[42])
#endregion

#region "Methods: TryAdd, TryGet"
    var map = Dictionary()
    map.Add(12, 12)
    if !map.TryAdd(12, 12) {
        map.Remove(12)
    }
    var res = map.TryGet(12)
    assert(nil, res)
#endregion

#region "Methods: Len, Clear"
    var map = Dictionary()
    map.Add("x", 1)
    map["x"] = 2
    map["y"] = 3
    assert(2, map.Length())
    map.Clear()
    assert(0, map.Length())
#endregion

#region "Complex keys"
    var map = Dictionary()
    map[@Key(1,2,3)] = [4,5,6]
    assert([4,5,6], map[@Key(1,2,3)])
#endregion

#region "Field access"
    var map = Dictionary()
    map.name = "John"
    map.surname = "Doe"
    map.age = 50
    assert("John", map.name)
    assert("Doe", map.surname)
    assert(50, map.age)
#endregion

#region "Iterator to dictionary"
    let xs = yields {
        (key: 1, value: "Foo"),
        (key: 2, value: "Bar"),
        (key: 3, value: "Zoo")
    }
    let map = xs.ToDictionary(v => v.key, v => v.value)
    for (key,value) in map {
        if key == 1 {
            assert("Foo", value)
        } else if key == 2 {
            assert("Bar", value)
        } else if key == 3 {
            assert("Zoo", value)
        }
    }
#endregion

#region "Methods: Compact"
    let xs = Dictionary()
    xs.Add("foo", 1)
    xs.Add("bar", nil)
    xs.Add("zoo", 2)
    xs.Compact()
    assert(2, xs.Length())
    assert(1, xs.foo)
    assert(2, xs.zoo)
    xs.Compact(v => {
        v && v > 1 ? false : true
    })
    assert(1, xs.Length())
    assert(2, xs.zoo)
#endregion

#region "Methods: ToTuple"
    let tuple1 = (foo: "foo", bar: "bar")
    let tuple2 = (foo: "foo", bar: "bar", "$zoo$": 24)
    var map = Dictionary.FromTuple(tuple1)
    var backTuple = map.ToTuple()
    assert(tuple1, backTuple)
    map = Dictionary.FromTuple(tuple2)
    backTuple = map.ToTuple()
    assert(tuple2, backTuple)
#endregion

#region "Pattern matching"
    var map = Dictionary.FromTuple ((x: 1, y: 2))
    match map {
        (x: xx, y: yy) => {
            assert(1, xx)
            assert(2, yy)
        }
    }
#endregion

#region "Methods: ContainsKey"
    var map = Dictionary.FromTuple((x: 1, y: 2))
    assert(true, map.ContainsKey("x"))
    assert(false, map.ContainsKey("X"))
    map[(1,2)] = true
    assert(true, map.ContainsKey((1,2)))
#endregion

#region "Methods: ContainsValue"
    var map = Dictionary.FromTuple ((x: 1, y: 2))
    assert(true, map.ContainsValue(2))
    assert(false, map.ContainsValue(22))
#endregion

#region "Methods: GetAndRemove"
    var map = Dictionary.FromTuple ((x: 1, y: 2))
    let x = map.GetAndRemove("x")
    assert(1, x)
    assert(1, map.Length())
#endregion

#region "Conversion: as"
    let xs = [x: 1, y: 2]
    assert("[\"x\": 1, \"y\": 2]", xs as String)
    assert((x: 1, y: 2), xs as Tuple)
#endregion

#region "Operator in"
    let xs = Dictionary(x: 1, y: 2, "foo": 12)
    assert(true, "x" in xs)
    assert(true, "foo" in xs)
    assert(false, "yy" in xs)
#endregion