func mapTest1() {
    var map = Map()
    map.add("x", 1)
    map.add("y", 2)
    assert(1, map["x"])
    assert(2, map["y"])
}

func mapTest2() {
    var map = Map()
    map.add(("x",1), 1)
    map.add(("y",2), 2)
    assert(1, map[("x",1)])
    assert(2, map[("y",2)])
}

func mapTest3() {
    var map = Map.fromTuple( (foo: "foo", bar: "bar") )
    assert("foo", map::foo)
    assert("bar", map::bar)
}

func mapTest4() {
    var map = Map()
    map[42] = 420
    map[42] = map[42] * 2
    assert(840, map[42])
}

func mapTest5() {
    var map = Map()
    map.add(12, 12)
    if !map.tryAdd(12, 12) {
        map.remove(12)
    }
    var res = map.tryGet(12)
    assert(nil, res)
}

func mapTest6() {
    var map = Map()
    map.add("x", 1)
    map["x"] = 2
    map["y"] = 3
    assert(2, map.len())
    map.clear()
    assert(0, map.len())
}

func mapTest7() {
    var map = Map()
    map[[1,2,3]] = [4,5,6]
    assert([4,5,6], map[[1,2,3]])
}

func mapFieldTest1() {
    var map = Map()
    map::name = "John"
    map::surname = "Doe"
    map::age = 50
    assert("John", map::name)
    assert("Doe", map::surname)
    assert(50, map::age)
}

func mapFieldTest2() {
    var map = Map.fromTuple( (name: "John", surname: "Doe", age: 50) )
    assert("John", map::name)
    assert("Doe", map::surname)
    assert(50, map::age)
}

func iterMap() {
    let xs = yields {
        (key: 1, value: "Foo"),
        (key: 2, value: "Bar"),
        (key: 3, value: "Zoo")
    }
    let map = xs.toMap(v => v::key, v => v::value)
    for (key,value) in map {
        if key == 1 {
            assert("Foo", value)
        } else if key == 2 {
            assert("Bar", value)
        } else if key == 3 {
            assert("Zoo", value)
        }
    }
}

func compactMap() {
    let xs = Map()
    xs.add("foo", 1)
    xs.add("bar", nil)
    xs.add("zoo", 2)
    var res = xs.compact()
    assert(2, res.len())
    assert(1, res::foo)
    assert(2, res::zoo)
    res = xs.compact(v => {
        if !v {
            42
        } else if v > 1 {
            v
        }
    })
    assert(2, res.len())
    assert(2, res::zoo)
    assert(42, res::bar)
    let data = Map.fromTuple(("a": "1", "b": "three", "c": "4?"))
    res = data.compact(Integer.parse)
    assert(1, res.len())
    assert(1, res["a"])
}

func toTuple() {
    let tuple1 = (foo: "foo", bar: "bar")
    let tuple2 = (foo: "foo", bar: "bar", "$zoo$": 24)
    var map = Map.fromTuple(tuple1)
    var backTuple = map.toTuple()
    assert(tuple1, backTuple)
    map = Map.fromTuple(tuple2)
    backTuple = map.toTuple()
    assert(tuple2, backTuple)
}

func patternMatchMap() {
    var map = Map.fromTuple ((x: 1, y: 2))
    match map {
        (x: xx, y: yy) => {
            assert(1, xx)
            assert(2, yy)
        }
    }
}