#region "Initialize"
    import core
#endregion

#region "StringBuilder: GetType"
    let sb = StringBuilder()
    assert(StringBuilder, sb.GetType())
    assert("StringBuilder", sb.GetType().name)
#endregion

#region "StringBuilder: Append, AppendLine"
    let sb = StringBuilder()
    sb.Append("one")
    sb.Append(',')
    sb.Append("two")
    sb.AppendLine()
    sb.Append("three")
    assert("one,two\nthree", sb.ToString())
#endregion

#region "StringBuilder: Constructor, Length"
    let sb = StringBuilder(1, 2, 3)
    assert(3, sb.Length())
    assert(got: sb == StringBuilder("123"))
#endregion

#region "StringBuilder: Insert"
    let sb = StringBuilder(true)
    sb.Insert(1, false)
    assert("tfalserue", sb.ToString())
#endregion

#region "StringBuilder: Replace"
    let sb = StringBuilder("Hello, user! How do you do?")
    sb.Replace(value: "user", other: "John Doe")
    assert("Hello, John Doe! How do you do?", sb)
#endregion

#region "Result: GetType"
    assert(Result, Result.Success(true).GetType())
    assert("Result", Result.Success(true).GetType().name)
#endregion

#region "Result: Length and indexer"
    let x = Result.Success(42)
    assert(1, x.Length())
    assert(42, x.Value())
    assert(42, x.value)
    assert(42, x[0])
#endregion

#region "Result: matching 1"
    let x = Result.Success(42)
    match x {
        Result.Success(x) => assert(42, x),
        _ => assert(got: false)
    }
#endregion

#region "Result: matching 2"
    let x = Result.Success(42)
    if x is (42,) {
        assert(got: true)
    } else {
        assert(got: false)
    }
    assert(got: x is (xx,))
    assert(42, xx)
    let y = Result.Failure("fail")
    if y is Result.Failure(str) {
        assert("fail", str)
    } else {
        assert(got: false)
    }
#endregion

#region "Guid: GetType"
    let g = Guid()
    assert(Guid, g.GetType())
    assert("Guid", g.GetType().name)
#endregion

#region "Guid: Parse"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    assert("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}", g.ToString())
#endregion

#region "Guid: ToByteArray"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    let ba = g.ToByteArray()
    assert("{0x37,0xC0,0xFB,0x8B,0x9C,0x4F,0xCB,0x4F,0x9D,0xA0,0x47,0x07,0x0F,0xE0,0x5E,0xCD}", ba.ToString())
#endregion

#region "Guid: FromByteArray"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    let ba = g.ToByteArray()
    assert("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}", Guid.FromByteArray(ba).ToString())
#endregion

#region "Guid: Empty, Default"
    let g = Guid.Empty()
    assert(Guid.Default(), g)
    assert("{00000000-0000-0000-0000-000000000000}", g.ToString())
#endregion

#region "Regex: GetType"
    let r = Regex("\\.")
    assert(Regex, r.GetType())
    assert("Regex", r.GetType().name)
#endregion

#region "Regex: Match 1"
    let words = ["Seven", "even", "Maven", "Amen", "eleven"]
    let rx = Regex(".even")
    let matches = []
    for word in words {
        if rx.Match(word) {
            matches.Add(word)
        }
    }
    assert(["Seven", "eleven"], matches)
#endregion

#region "Regex: Match 2"
    let content = <[Foxes are omnivorous mammals belonging to several genera 
of the family Canidae. Foxes have a flattened skull, upright triangular ears,
a pointed, slightly upturned snout, and a long bushy tail. Foxes live on every
continent except Antarctica. By far the most common and widespread species of
fox is the red fox.]>
    let rx = Regex("fox(es)?", ignoreCase: true)
    let ma = rx.Match(content)
    assert(got: ma.success)
    assert(1, ma.captures.Length())
    assert("Foxes", ma.captures.First().value)
#endregion

#region "Regex: Matches 1"
    let content = "<p>The <code>Regex</code> is a compiled representation of a regular expression.</p>"
    let rx = Regex("</?[a-z]+>")
    var res = rx.Matches(content)
    var matches = []
    for m in res {
        matches.Add(m.value)
    }
    assert(["<p>", "<code>", "</code>", "</p>"], matches)
#endregion

#region "Regex: Matches 2"
    let rg = Regex("\\b[M]\\w+")
    let authors = "Mahesh Chand, Raj Kumar, Mike Gold, Allen O'Neill, Marshal Troll"
    var res = rg.Matches(authors)
    var matches = []
    for m in res {
        matches.Add(m.value)
    }
    assert(["Mahesh", "Mike", "Marshal"], matches)
#endregion

#region "Regex: Replace"
    let x = "12;abc-D"
    let y = Regex.Replace(x, "[^0-9a-zA-Z]+", "")
    assert("12abcD", y)
#endregion

#region "Regex: Split"
    let azpattern = "[a-z]+"
    let str = "Asd2323b0900c1234Def5678Ghi9012Jklm"
    let result = Regex.Split(str, azpattern, ignoreCase: true, removeEmptyEntries: true)
    let matches = []
    for x in result {
        matches.Add(x)
    }
    assert(["2323", "0900", "1234", "5678", "9012"], matches)
#endregion