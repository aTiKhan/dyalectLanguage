#region "Initialize"
    import core
    func testParseAndFormat(format, value) {
        assert(value, TimeDelta.Parse(value, format).ToString(value))
    }
#endregion

#region "StringBuilder: GetType"
    let sb = StringBuilder()
    assert(StringBuilder, sb.GetType())
    assert("StringBuilder", sb.GetType().name)
#endregion

#region "StringBuilder: Append, AppendLine"
    let sb = StringBuilder()
    sb.Append("one")
    sb.Append(',')
    sb.Append("two")
    sb.AppendLine()
    sb.Append("three")
    assert("one,two\nthree", sb.ToString())
#endregion

#region "StringBuilder: Constructor, Length"
    let sb = StringBuilder(1, 2, 3)
    assert(3, sb.Length())
    assert(got: sb == StringBuilder("123"))
#endregion

#region "StringBuilder: Insert"
    let sb = StringBuilder(true)
    sb.Insert(1, false)
    assert("tfalserue", sb.ToString())
#endregion

#region "StringBuilder: Replace"
    let sb = StringBuilder("Hello, user! How do you do?")
    sb.Replace(value: "user", other: "John Doe")
    assert("Hello, John Doe! How do you do?", sb)
#endregion

#region "Result: GetType"
    assert(Result, Result.Success(true).GetType())
    assert("Result", Result.Success(true).GetType().name)
#endregion

#region "Result: Length and indexer"
    let x = Result.Success(42)
    assert(1, x.Length())
    assert(42, x.Value())
    assert(42, x.value)
    assert(42, x[0])
#endregion

#region "Result: matching 1"
    let x = Result.Success(42)
    match x {
        Result.Success(x) => assert(42, x),
        _ => assert(got: false)
    }
#endregion

#region "Result: matching 2"
    let x = Result.Success(42)
    if x is (42,) {
        assert(got: true)
    } else {
        assert(got: false)
    }
    assert(got: x is (xx,))
    assert(42, xx)
    let y = Result.Failure("fail")
    if y is Result.Failure(str) {
        assert("fail", str)
    } else {
        assert(got: false)
    }
#endregion

#region "Guid: GetType"
    let g = Guid()
    assert(Guid, g.GetType())
    assert("Guid", g.GetType().name)
#endregion

#region "Guid: Parse"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    assert("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}", g.ToString())
#endregion

#region "Guid: ToByteArray"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    let ba = g.ToByteArray()
    assert("{0x37,0xC0,0xFB,0x8B,0x9C,0x4F,0xCB,0x4F,0x9D,0xA0,0x47,0x07,0x0F,0xE0,0x5E,0xCD}", ba.ToString())
#endregion

#region "Guid: FromByteArray"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    let ba = g.ToByteArray()
    assert("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}", Guid.FromByteArray(ba).ToString())
#endregion

#region "Guid: Empty, Default"
    let g = Guid.Empty()
    assert(Guid.Default(), g)
    assert("{00000000-0000-0000-0000-000000000000}", g.ToString())
#endregion

#region "Guid and Dictionary"
    let xs = Dictionary()
    let k1 = Guid()
    let k2 = Guid()
    xs[k1] = 1
    xs[k2] = 2
    assert((1,2), (xs[Guid.Parse(k1.ToString())], xs[k2]))
#endregion

#region "Regex: GetType"
    let r = Regex("\\.")
    assert(Regex, r.GetType())
    assert("Regex", r.GetType().name)
#endregion

#region "Regex: Match 1"
    let words = ["Seven", "even", "Maven", "Amen", "eleven"]
    let rx = Regex(".even")
    let matches = []
    for word in words {
        if rx.Match(word).success {
            matches.Add(word)
        }
    }
    assert(["Seven", "eleven"], matches)
#endregion

#region "Regex: Match 2"
    let content = <[Foxes are omnivorous mammals belonging to several genera 
of the family Canidae. Foxes have a flattened skull, upright triangular ears,
a pointed, slightly upturned snout, and a long bushy tail. Foxes live on every
continent except Antarctica. By far the most common and widespread species of
fox is the red fox.]>
    let rx = Regex("fox(es)?", ignoreCase: true)
    let ma = rx.Match(content)
    assert(got: ma.success)
    assert(1, ma.captures.Length())
    assert("Foxes", ma.captures.First().value)
#endregion

#region "Regex: Matches 1"
    let content = "<p>The <code>Regex</code> is a compiled representation of a regular expression.</p>"
    let rx = Regex("</?[a-z]+>")
    var res = rx.Matches(content)
    var matches = []
    for m in res {
        matches.Add(m.value)
    }
    assert(["<p>", "<code>", "</code>", "</p>"], matches)
#endregion

#region "Regex: Matches 2"
    let rg = Regex("\\b[M]\\w+")
    let authors = "Mahesh Chand, Raj Kumar, Mike Gold, Allen O'Neill, Marshal Troll"
    var res = rg.Matches(authors)
    var matches = []
    for m in res {
        matches.Add(m.value)
    }
    assert(["Mahesh", "Mike", "Marshal"], matches)
#endregion

#region "Regex: Replace 1"
    let x = "12;abc-D"
    let rx = Regex("[^0-9a-zA-Z]+")
    let y = rx.Replace(x, "")
    assert("12abcD", y)
#endregion

#region "Regex: Replace 2"
    let badString = "Here is a strig with ton of white space."
    let rx = Regex("\\s+")
    let cleanedString = rx.Replace(badString, "-")
    assert("Here-is-a-strig-with-ton-of-white-space.", cleanedString)
#endregion

#region "Regex: Split"
    let str = "Asd2323b0900c1234Def5678Ghi9012Jklm"
    let rx = Regex("[a-z]+", ignoreCase: true, removeEmptyEntries: true)
    let result = rx.Split(str)
    let matches = []
    for x in result {
        matches.Add(x)
    }
    assert(["2323", "0900", "1234", "5678", "9012"], matches)
#endregion

#region "Regex: IsMatch"
    let partNumbers = ["1298-673-4192", "A08Z-931-468A", "_A90-123-129X", "12345-KKA-1230", "0919-2893-1256"]
    let rx = Regex(<[^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$]>)
    let matches = []
    for n in partNumbers when rx.IsMatch(n) {
        matches.Add(true)
    }
    assert([true, true], matches)
#endregion

#region "ByteArray: GetType"
    let barr = ByteArray()
    assert(ByteArray, barr.GetType())
    assert("ByteArray", barr.GetType().name)
#endregion

#region "ByteArray: read and write"
    let bar = ByteArray()
    bar.Write(24)
    bar.Write("foo")
    bar.Write("Coed")
    bar.Write('D')
    assert(24, bar.Read(Integer))
    assert(8, bar.Position())
    assert("foo", bar.Read(String))
    assert(15, bar.Position())
    assert("Coed", bar.Read(String))
    assert(23, bar.Position())
    assert('D', bar.Read(Char))
#endregion

#region "TimeDelta: GetType"
    let td = TimeDelta(days: 1)
    assert(TimeDelta, td.GetType())
    assert("TimeDelta", td.GetType().name)
#endregion

#region "TimeDelta: construction"
    var td = TimeDelta.FromTicks(12)
    assert(12, td.Ticks)
    td = TimeDelta(days: 1, hours: 12, minutes: 33, seconds: 3)
    assert(1, td.Days)
    assert(12, td.Hours)
    assert(33, td.Minutes)
    assert(3, td.Seconds)
    td = TimeDelta(milliseconds: 1405)
    assert(405, td.Milliseconds)
    assert(1, td.Seconds)
#endregion

#region "TimeDelta: math"
    let x = TimeDelta(minutes: 3, seconds: 12)
    let y = TimeDelta(minutes: 1, seconds: 45)
    assert("+0.00:04:57.00", (x + y).ToString())
    assert("+0.00:01:27.00", (x - y).ToString())
#endregion

#region "TimeDelta: equality"
    let x = TimeDelta(minutes: 3, seconds: 12)
    let y = TimeDelta(minutes: 1, seconds: 45)
    let z = TimeDelta(minutes: 3, seconds: 12)
    assert(true, x == z)
    assert(false, x == y)
    assert(true, x != y)
#endregion

#region "TimeDelta: comparison"
    let x = TimeDelta(minutes: 3, seconds: 12)
    let y = TimeDelta(minutes: 1, seconds: 45)
    let z = TimeDelta(minutes: 3, seconds: 12)
    assert(true, x > y)
    assert(true, x >= z)
    assert(false, y > z)
    assert(true, y < z)
    assert(true, y <= z)
    assert(true, x <= z)
#endregion

#region "TimeDelta: casting"
    let td = TimeDelta.FromTicks(1409)
    assert(1409, td as Integer)
#endregion

#region "TimeDelta: ToString 1"
    let td = TimeDelta(hours: 12, minutes: 3, seconds: 12)
    assert("+0.12:03:12.00", td.ToString())
    assert("03-12-12", td.ToString(format: "mm-hh-ss"))
#endregion

#region "TimeDelta: ToString 2"
    let td = TimeDelta(hours: 12, minutes: 3, seconds: 12)
    assert("03+12+12", td.ToString(format: "mm\\+hh\\+ss"))
#endregion

#region "TimeDelta: Min, Max, Default"
    assert(Integer.Min(), TimeDelta.Min().TotalTicks)
    assert(Integer.Max(), TimeDelta.Max().TotalTicks)
    assert(0, TimeDelta.Default().Ticks)
#endregion

#region "TimeDelta: Parse 1"
    assert("00:12:34", TimeDelta.Parse("00:12:34", "hh:mm:ss").ToString("hh:mm:ss"))
    assert("00:12:34", TimeDelta.Parse("00--12--34", "hh--mm--ss").ToString("hh:mm:ss"))
#endregion

#region "TimeDelta: Parse 2"
    let format = "d-h:mm:ss.f"
    let value = "341-12:34:45.9"
    testParseAndFormat(format, value)
#endregion

#region "TimeDelta: Parse 3"
    let format = "+d.hh:mm"
    let value = "+3.12:34"
    testParseAndFormat(format, value)
#endregion

#region "TimeDelta: negation"
    let td = TimeDelta(hours: 3, minutes: 30)
    let format = "+hh:mm"
    assert("+03:30", td.ToString(format))
    assert("-03:30", (-td).ToString(format))
#endregion

#region "DateTime: GetType"
    let dt = DateTime.Now()
    assert(DateTime, dt.GetType())
    assert("DateTime", dt.GetType().name)
#endregion

#region "DateTime: Min, Max and Default"
    assert("0001-01-01T00:00:00.0000000", DateTime.Min().ToString())
    assert("9999-12-31T23:59:59.9999999", DateTime.Max().ToString())
    assert("0001-01-01T00:00:00.0000000", DateTime.Default().ToString())
#endregion

#region "DateTime: construction"
    let dt = DateTime(year: 2012, month: 12, day: 12, hour: 9, minute: 34, second: 46, millisecond: 956)
    assert(2012, dt.Year)
    assert(12, dt.Month)
    assert(12, dt.Day)
    assert(9, dt.Hour)
    assert(34, dt.Minute)
    assert(46, dt.Second)
    assert(956, dt.Millisecond)
#endregion

#region "DateTime: DayOfWeek"
    let dt = DateTime(year: 2012, month: 12, day: 12, hour: 9, minute: 34, second: 46, millisecond: 956)
    assert("Wednesday", dt.DayOfWeek)
#endregion

#region "DateTime: Ticks"
    let dt = DateTime(year: 2012, month: 12, day: 12, hour: 9, minute: 34, second: 46, millisecond: 956)
    assert(634909016869560000, dt.Ticks)
#endregion

#region "DateTime: FromTicks"
    let dt = DateTime.FromTicks(634909016869560000)
    assert(2012, dt.Year)
    assert(12, dt.Month)
    assert(12, dt.Day)
    assert(9, dt.Hour)
    assert(34, dt.Minute)
    assert(46, dt.Second)
    assert(956, dt.Millisecond)
#endregion

#region "DateTime: Parse"
    var dt = DateTime.Parse("01/04/2020", format: "dd/MM/yyyy")
    assert(2020, dt.Year)
    assert(4, dt.Month)
    assert(1, dt.Day)
    dt = DateTime.Parse("2020-04-01", format: "yyyy-MM-dd")
    assert(2020, dt.Year)
    assert(4, dt.Month)
    assert(1, dt.Day)
    dt = DateTime.Parse("04.01.2020", format: "MM.dd.yyyy")
    assert(2020, dt.Year)
    assert(4, dt.Month)
    assert(1, dt.Day)
#endregion

#region "DateTime: ToString"
    var dt = DateTime.Parse("01/04/2020", format: "dd/MM/yyyy")
    assert("01/04/2020", dt.ToString("dd/MM/yyyy"))
    assert("2020-04-01", dt.ToString("yyyy-MM-dd"))
    assert("04.01.2020", dt.ToString("MM.dd.yyyy"))
#endregion

#region "DateTime: Add"
    let format = "dd/MM/yyyy"
    var dt = DateTime.Parse("01/04/2020", format: "dd/MM/yyyy")
    dt = dt.Add(years: 1)
    assert("01/04/2021", dt.ToString(format))
    dt = dt.Add(days: 9)
    assert("10/04/2021", dt.ToString(format))
    dt = dt.Add(months: 2)
    assert("10/06/2021", dt.ToString(format))
#endregion

#region "DateTime: math"    
    let dt1 = DateTime.Parse("01/04/2020", format: "dd/MM/yyyy")
    let dt2 = DateTime.Parse("11/04/2020", format: "dd/MM/yyyy")
    let td = dt2 - dt1
    assert(10, td.Days)
    let dt3 = dt1 + TimeDelta(days: 10)
    assert("11/04/2020", dt3.ToString("dd/MM/yyyy"))
    assert(true, dt2 == dt3)
#endregion

#region "DateTime: comparison"    
    let dt1 = DateTime.Parse("01/04/2020", format: "dd/MM/yyyy")
    let dt2 = DateTime.Parse("11/04/2020", format: "dd/MM/yyyy")
    let dt3 = DateTime.Parse("01/04/2020", format: "dd/MM/yyyy")
    assert(true, dt1 != dt2)
    assert(false, dt1 == dt2)
    assert(true, dt1 == dt3)
    assert(false, dt1 != dt3)
    assert(false, dt1 > dt2)
    assert(true, dt1 < dt2)
    assert(true, dt1 <= dt2)
    assert(true, dt2 >= dt1)
#endregion

#region "DateTime: Date and Time"
    let dt = DateTime(year: 2012, month: 12, day: 3, hour: 12, minute: 43)
    assert(DateTime(year: 2012, month: 12, day: 3), dt.Date)
    assert(TimeDelta(hours: 12, minutes: 43), dt.Time)
#endregion

#region "LocalDateTime: GetType"
    let dt = LocalDateTime.Now()
    assert(LocalDateTime, dt.GetType())
    assert("LocalDateTime", dt.GetType().name)
#endregion

#region "LocalDateTime: ToString"
    let dt = LocalDateTime(offset: -TimeDelta(hours: 3), year: 2012, month: 3, day: 21,
        hour: 15, minute: 33, second: 59)
    assert("2012-03-21T15:33:59.0000000-03:00", dt.ToString())
#endregion

#region "LocalDateTime: LocalOffset"
    let dt = LocalDateTime(offset: -TimeDelta(hours: 3), year: 2012, month: 3, day: 21,
        hour: 15, minute: 33, second: 59)
    assert(-3, dt.Offset.Hours)
#endregion

#region "LocalDateTime: Parse"
    let dt1 = LocalDateTime.Parse("2012-03-21T15:33:59.0000000-03:00", "yyyy-MM-ddTHH:mm:ss.fffffffzzz")
    let dt2 = LocalDateTime(offset: -TimeDelta(hours: 3), year: 2012, month: 3, day: 21,
        hour: 15, minute: 33, second: 59)
    assert(true, dt1 == dt2)
    assert(-3, dt1.Offset.Hours)
#endregion

#region "LocalDateTime: FromTicks"
    let dt = LocalDateTime(offset: -TimeDelta(hours: 3), year: 2012, month: 3, day: 21,
        hour: 15, minute: 33, second: 59)
    let ticks = dt.Ticks
    let ndt = LocalDateTime.FromTicks(ticks, offset: -TimeDelta(hours: 3))
    assert(true, dt == ndt)
    assert(true, dt.Ticks == ndt.Ticks)
#endregion

#region "LocalDateTime: LocalOffset"
    let offset = LocalDateTime.LocalOffset
    assert(true, offset.Hours != 0)
    let dt = LocalDateTime.Now()
    assert(true, offset == dt.Offset)
#endregion

#region "LocalDateTime: FromDateTime"
    let dt = DateTime(year: 2012, month: 2, day: 3, hour: 12, minute: 30)
    let loc = LocalDateTime.FromDateTime(dt, offset: -TimeDelta(hours: 2))
    assert("2012-02-03 10:30", loc.ToString("yyyy-MM-dd hh:mm"))
#endregion

#region "LocalDateTime: Date and Time"
    let dt = LocalDateTime(year: 2012, month: 12, day: 3, hour: 12, minute: 43, offset: -TimeDelta(hours: 3))
    assert(LocalDateTime(year: 2012, month: 12, day: 3, offset: -TimeDelta(hours: 3)), dt.Date)
    assert(TimeDelta(hours: 12, minutes: 43), dt.Time)
#endregion

#region "Calendar: GetType"
    assert("Calendar", Calendar.name)
#endregion

#region "Calendar: DaysInMonth"
    assert(28, Calendar.DaysInMonth(2022, 2))
    assert(29, Calendar.DaysInMonth(2020, 2))
#endregion

#region "Calendar: IsLeapYear and DaysInYear"
    assert(false, Calendar.IsLeapYear(2022))
    assert(true, Calendar.IsLeapYear(2020))
    assert(365, Calendar.DaysInYear(2022))
    assert(366, Calendar.DaysInYear(2020))
#endregion

#region "Calendar: FirstDayOfMonth"
    let utc1 = DateTime(year: 2020, month: 2, day: 15, hour: 12, minute: 30)
    let utc2 = Calendar.FirstDayOfMonth(utc1)
    assert(DateTime(year: 2020, month: 2, day: 1, hour: 12, minute: 30), utc2)
    let loc1 = LocalDateTime(year: 2020, month: 2, day: 15, hour: 12, minute: 30, offset: -TimeDelta(hours: 1))
    let loc2 = Calendar.FirstDayOfMonth(loc1)
    assert(LocalDateTime(year: 2020, month: 2, day: 1, hour: 12, minute: 30, offset: -TimeDelta(hours: 1)), loc2)
#endregion

#region "Calendar: LastDayOfMonth"
    let utc1 = DateTime(year: 2020, month: 2, day: 15, hour: 12, minute: 30)
    let utc2 = Calendar.LastDayOfMonth(utc1)
    assert(DateTime(year: 2020, month: 2, day: 29, hour: 12, minute: 30), utc2)
    let loc1 = LocalDateTime(year: 2020, month: 2, day: 15, hour: 12, minute: 30, offset: -TimeDelta(hours: 1))
    let loc2 = Calendar.LastDayOfMonth(loc1)
    assert(LocalDateTime(year: 2020, month: 2, day: 29, hour: 12, minute: 30, offset: -TimeDelta(hours: 1)), loc2)
#endregion

#region "Time: GetType"
    let td = Time(hours: 1)
    assert(Time, td.GetType())
    assert("Time", td.GetType().name)
#endregion

#region "Time: construction"
    var td = Time.FromTicks(12)
    assert(12, td.Ticks)
    td = Time(hours: 12, minutes: 33, seconds: 3)
    assert(12, td.Hours)
    assert(33, td.Minutes)
    assert(3, td.Seconds)
    td = Time(milliseconds: 1405)
    assert(405, td.Milliseconds)
    assert(1, td.Seconds)
#endregion

#region "Time: equality"
    let x = Time(minutes: 3, seconds: 12)
    let y = Time(minutes: 1, seconds: 45)
    let z = Time(minutes: 3, seconds: 12)
    assert(true, x == z)
    assert(false, x == y)
    assert(true, x != y)
#endregion

#region "Time: comparison"
    let x = Time(minutes: 3, seconds: 12)
    let y = Time(minutes: 1, seconds: 45)
    let z = Time(minutes: 3, seconds: 12)
    assert(true, x > y)
    assert(true, x >= z)
    assert(false, y > z)
    assert(true, y < z)
    assert(true, y <= z)
    assert(true, x <= z)
#endregion

#region "Time: casting"
    let td = TimeDelta.FromTicks(1409)
    assert(1409, td as Integer)
#endregion

#region "Time: ToString 1"
    let td = Time(hours: 12, minutes: 3, seconds: 12)
    assert("12:03:12.00", td.ToString())
    assert("03-12-12", td.ToString(format: "mm-hh-ss"))
#endregion

#region "Time: ToString 2"
    let td = Time(hours: 12, minutes: 3, seconds: 12)
    assert("03+12+12", td.ToString(format: "mm\\+hh\\+ss"))
#endregion

#region "Time: Min, Max, Default"
    assert(Integer.Min(), Time.Min().TotalTicks)
    assert(Integer.Max(), Time.Max().TotalTicks)
    assert(0, Time.Default().TotalTicks)
#endregion

#region "Time: Parse"
    assert("00:12:34", Time.Parse("00:12:34", "hh:mm:ss").ToString("hh:mm:ss"))
    assert("00:12:34", Time.Parse("00--12--34", "hh--mm--ss").ToString("hh:mm:ss"))
#endregion

#region "Date: GetType"
    let td = Date(year: 2012, month: 12, day: 12)
    assert(Date, td.GetType())
    assert("Date", td.GetType().name)
#endregion

#region "Date: construction"
    var td = Date(year: 2012, month: 12, day: 3)
    assert(2012, td.Year)
    assert(12, td.Month)
    assert(3, td.Day)
#endregion

#region "Date: equality"
    let x = Date(year: 2012, month: 12, day: 3)
    let y = Date(year: 2012, month: 12, day: 1)
    let z = Date(year: 2012, month: 12, day: 3)
    assert(true, x == z)
    assert(false, x == y)
    assert(true, x != y)
#endregion

#region "Date: comparison"
    let x = Date(year: 2012, month: 12, day: 3)
    let y = Date(year: 2012, month: 12, day: 1)
    let z = Date(year: 2012, month: 12, day: 3)
    assert(true, x > y)
    assert(true, x >= z)
    assert(false, y > z)
    assert(true, y < z)
    assert(true, y <= z)
    assert(true, x <= z)
#endregion

#region "Date: casting"
    let td = Date(year: 2012, month: 12, day: 3)
    assert(734839, td as Integer)
#endregion

#region "Date: ToString 1"
    let td = Date(year: 2012, month: 12, day: 3)
    assert("2012-12-03", td.ToString())
    assert("03-12-12", td.ToString(format: "dd-MM-yy"))
#endregion

#region "Date: ToString 2"
    let td = Date(year: 2012, month: 12, day: 3)
    assert("03+12+12", td.ToString(format: "dd\\+MM\\+yy"))
#endregion

#region "Date: Min, Max, Default"
    assert(0, Date.Min() as Integer)
    assert(3652058, Date.Max() as Integer)
    assert(0, Time.Default() as Integer)
#endregion

#region "Date: Parse"
    assert("2024-03-12", Date.Parse("12:03:2024", "dd:MM:yyyy").ToString())
    assert("03/12/24", Date.Parse("12--03--2024", "dd--MM--yyyy").ToString("MM/dd/yy"))
#endregion

#region "Date: AddMonths, AddDays, AddYears"
    var dt = Date(year: 2022, month: 1, day: 30)
    dt = dt.AddMonths(1)
    assert("2022-02-28", dt.ToString())
    dt = dt.AddMonths(1)
    assert("2022-03-28", dt.ToString())
    dt = dt.AddDays(3)
    assert("2022-03-31", dt.ToString())
#endregion