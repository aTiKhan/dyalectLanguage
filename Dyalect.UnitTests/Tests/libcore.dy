#region "Initialize"
    import core
#endregion

#region "StringBuilder: GetType"
    let sb = StringBuilder()
    assert(StringBuilder, sb.GetType())
    assert("StringBuilder", sb.GetType().name)
#endregion

#region "StringBuilder: Append, AppendLine"
    let sb = StringBuilder()
    sb.Append("one")
    sb.Append(',')
    sb.Append("two")
    sb.AppendLine()
    sb.Append("three")
    assert("one,two\nthree", sb.ToString())
#endregion

#region "StringBuilder: Constructor, Length"
    let sb = StringBuilder(1, 2, 3)
    assert(3, sb.Length())
    assert(got: sb == StringBuilder("123"))
#endregion

#region "StringBuilder: Insert"
    let sb = StringBuilder(true)
    sb.Insert(1, false)
    assert("tfalserue", sb.ToString())
#endregion

#region "StringBuilder: Replace"
    let sb = StringBuilder("Hello, user! How do you do?")
    sb.Replace(value: "user", other: "John Doe")
    assert("Hello, John Doe! How do you do?", sb)
#endregion

#region "Result: GetType"
    assert(Result, Result.Success(true).GetType())
    assert("Result", Result.Success(true).GetType().name)
#endregion

#region "Result: Length and indexer"
    let x = Result.Success(42)
    assert(1, x.Length())
    assert(42, x.Value())
    assert(42, x.value)
    assert(42, x[0])
#endregion

#region "Result: matching 1"
    let x = Result.Success(42)
    match x {
        Result.Success(x) => assert(42, x),
        _ => assert(got: false)
    }
#endregion

#region "Result: matching 2"
    let x = Result.Success(42)
    if x is (42,) {
        assert(got: true)
    } else {
        assert(got: false)
    }
    assert(got: x is (xx,))
    assert(42, xx)
    let y = Result.Failure("fail")
    if y is Result.Failure(str) {
        assert("fail", str)
    } else {
        assert(got: false)
    }
#endregion

#region "Guid: GetType"
    let g = Guid()
    assert(Guid, g.GetType())
    assert("Guid", g.GetType().name)
#endregion

#region "Guid: Parse"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    assert("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}", g.ToString())
#endregion

#region "Guid: ToByteArray"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    let ba = g.ToByteArray()
    assert("{0x37,0xC0,0xFB,0x8B,0x9C,0x4F,0xCB,0x4F,0x9D,0xA0,0x47,0x07,0x0F,0xE0,0x5E,0xCD}", ba.ToString())
#endregion

#region "Guid: FromByteArray"
    let g = Guid.Parse("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}")
    let ba = g.ToByteArray()
    assert("{8BFBC037-4F9C-4FCB-9DA0-47070FE05ECD}", Guid.FromByteArray(ba).ToString())
#endregion

#region "Guid: Empty, Default"
    let g = Guid.Empty()
    assert(Guid.Default(), g)
    assert("{00000000-0000-0000-0000-000000000000}", g.ToString())
#endregion