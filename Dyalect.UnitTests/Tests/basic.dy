func mathTest1() {
    var x = 12 * 3 - 4 + 6
    assert(38, x)
}

func mathTest2() { //1.5919117647058822
    var x = 22 % 4 - 3.33 / 8.16
    assert(1.5919117647058822, x)
}

func mathTest3() { //6.6129032258064528
    var x = 12.3 / (0.64 + 1.22)
    assert(6.6129032258064528, x)
}

func mathTest4() { //11.256
    var x = 23.456 % 12.2
    assert(11.256, x)
}

func mathTest5() { //0.0099999999999997868
   var x = 12.4 - 0.39 - 12.0
   assert(0.0099999999999997868, x)
}

func mathTest6() { //783.59999999999991
   var x = 12.0 * 65.3
   assert(783.59999999999991, x)
}

func mathTest7() {
    var x = 188.123 - 12.0004 * 5.667 - (12.2 / 0.134)
    assert(29.071957080597016, x)
}

func mathTest8() {
    var x = -12 - 14.6
    assert(-26.6, x)
}

func mathTest9() {
    var x = 199 % 44.12 * 2
    assert(45.04000000000002, x)
}

func mathTest10() {
    var x = +16 - -22
    assert(38, x)
}

func mathTest12() {
    var x = 2.0 / 0
    assert(true, x == Float.inf())
}

func mathTest13() {
    var x = .0 / 0
    assert(true, x.isNaN())
}

func logicalTest1() {
    const x = 144
    var res = x / 12 > 100 || x / 6 == 24
    assert(true, res)
}

func logicalTest2() {
    const x = 144
    var res = x / 12 > 100 && x / 6 != 24
    assert(false, res)
}

func comparisonTest1() {
    var res = 12 > 11 && 12 <= 12 && 12 != 12.01 && 12 >= 12
    assert(true, res)
}

func comparisonTest2() {
    assert(true, "string1" != "string2" && "string1" == "string1")
}

func comparisonTest3() {
    const x = 12
    const y = 9
    assert(false, !(x >= 12 && y <= 10 || x < -12))
}

func comparisonTest4() {
    assert(true, 12.0 == 12)
    assert(true, 12 == 12.0)
}

func comparisonTest5() {
    assert(true, 12.2 > 12)
    assert(true, 12 < 12.2)
}

func comparisonTest6() {
    var str1 = "x"
    var str2 = ""
    assert(true, str1 == true)
    assert(false, str2 == true)
    assert(true, str2 == false)
}

func comparisonTest7() {
    assert(true, "".toString == "".toString)
    assert(false, "".toString == '\0'.toString)
}

func coalesceTest1() {
    var z = nil
    var foo = "foo"
    var obj = false
    assert("foo", z ?? foo)
    assert("foo", obj ?? z ?? foo)
}

func coalesceTest2() { //#306
    var x = 2
    var y
    x ??= 3
    y ??= 133
    assert((2, 133),(x,y))
}

func toStringTest1() {
    var res = (1,2,3).toString()
    assert("(1, 2, 3)", res)
}

func toStringTest2() {
    var res = [12.2, "string", true].toString()
    assert("[12.2, \"string\", true]", res)
}

func toStringTest3() {
    var res = (x=42,y="foo").toString()
    assert("(x = 42, y = \"foo\")", res)
}

func toStringTest4() {
    func foo(args..., quotes=12) {}
    const pat = "foo(args..., quotes = 12)";
    assert(pat, foo.toString())
}

func baseTest1() {
    const x = 2
    func inner() {
        const x = 4
        base.x
    }
    assert(2, inner())
}

func baseTest2() {
    const x = 2
    func inner() {
        const x = 4
        if x == 4 {
            var x = 8
            base.x
        }
    }
    assert(2, inner())
}

func floatLiteralTest() {
    var res = 1.234e-17
    assert(0.00000000000000001234, res)
}

func integerLiteralTest() {
    var res = 0x40 + 0x20
    assert(96, res)
}

func memberCheckTest1() {
    assert(true, "string".len?)
    assert(false, 42.fooBar?)
}

func memberCheckTest2() { //#270
    assert(true, String.join?)
    assert(false, String.foo?)
    assert(true, "".split?)
    assert(false, "".join?)
}

func memberCheckTest3() { //#271
    var nm = "split"
    assert(true, "".has(nm))
    assert(true, "".split?)
    assert(true, "".has("split"))
}

func memberCheckTest4() { //#272
    assert(true, String.has("join"))
    assert(false, String.has("split"))
    assert(false, String.has("id"))
    assert(false, String.has("name"))
}

func nameofTest() {
    assert("nameofTest", nameof(nameofTest))
    assert("toString", nameof("".toString))
    var tup = (x= 12)
    assert("x", nameof(tup.x))
}

func parseTest() {
    var res = parse("[1,2,3,('c',true,23.4),nil]")
    assert([1,2,3,('c',true,23.4),nil], res)
}

func cloneTest() {
    var xs = [1,2,3]
    assert(true, xs == xs)
    assert(false, xs.clone() == xs)
}

func compositionTest1() {
    func sum(x, y) {
        x + y
    }
    func fmt(res) {
        "result= \(res)"
    }
    const fun = Function.compose(sum, fmt)
    var res = fun(13, 14)
    assert(res, "result= 27")
}

func compositionTest2() {
    func sum(x, y) {
        x + y
    }
    func fmt(res) {
        "result= \(res)"
    }
    const fun = sum.compose(with= fmt)
    var res = fun(13, 14)
    assert(res, "result= 27")
}

func getTypeTest1() {
    assert(true, 42.getType() == Integer)
    assert(true, "".getType() == String)
    assert(true, 42.01.getType() == Float)
    assert(true, '\s'.getType() == Char)
}

func getTypeTest2() {
    var x = 42
    assert(true, x.getType() == Integer)
    var t = x.getType()
    assert(1, t:id)
    assert("Integer", t:name)
}

func getTypeTest3() {
    var x = 42
    assert(true, TypeInfo(x) == Integer)
    var t = TypeInfo(x)
    assert(1, t:id)
    assert("Integer", t:name)
}

func hasTest1() {
    var t = (1,2,3)
    assert(false, t.has("foo"))
    var foo = "foo"
    assert(false, t.has(foo))
    assert(true, t.has("keys"))
    var keys = "keys"
    assert(true, t.has(keys))
}

func hasTest2() {
    var t = [1,2,3]
    assert(false, t.has("foo"))
    var foo = "foo"
    assert(false, t.has(foo))
    assert(true, t.has("indices"))
    var indices = "indices"
    assert(true, t.has(indices))
}

func typeConstantsTest1() {
    assert(9223372036854775807, Integer.max())
    assert(-9223372036854775807, Integer.min() + 1)
}

func typeConstantsTest2() {
    assert(1.7976931348623157E+308, Float.max())
    assert(-1.7976931348623157E+308, Float.min())
    var d = Float.inf() + (-Float.inf())
    assert(true, d.isNaN())
}

func typeConstantsTest3() {
    assert('\0', Char.min())
    assert('\uffff', Char.max())
}

func floatTest1() {
    assert(12.2, Float(12.2))
    assert(12.0, Float(12))
    assert(5.0, Float('5'))
}

func floatTest2() {
    assert(0.0, Float.default())
}

func integerTest1() {
    assert(12, Integer(12.2))
    assert(1222, Integer(1222))
    assert(5, Integer('5'))
}

func integerTest2() {
    assert(0, Integer.default())
}

func nilTest1() {
    var x
    assert(nil, x)
    assert(nil, Nil())
    assert(true, nil == nil)
}

func nilTest2() {
    assert(nil, Nil.default())
}

func boolTest1() {
    assert(true, Bool(12))
    assert(false, Bool(0))
    assert(true, Bool("str"))
    assert(false, Bool(""))
    assert(false, Bool(nil))
}

func boolTest2() {
    assert(false, Bool.default())
}

func guardsTest1() {
    func safeDiv(x, y) {
        return -1 when y == 0
        return x / y
    }
    var x = safeDiv(4, 2)
    var y = safeDiv(2, 0)
    assert(2, x)
    assert(-1, y)
}

func guardsTest2() {
    var x = 0
    x += 1 when x < 1
    assert(1, x)
}

func guardsTest3() {
    var x = 0
    x += 1 when x < 0
    assert(0, x)
}

func guardsTest4() {
    func safeDiv(x, y) {
        return when y == 0
        return x / y
    }
    var res = safeDiv(10, 0)
    assert(nil, res)
}

func returnTest() {//Issue 266
    func foo() {
        return 2
    }
    func bar() {
        return
        22
    }
    assert(2, foo())
    assert(nil, bar())
}

func evalTest() { //Issue 269
    var z = eval("x + y", (x= 2, y= 3) )
    assert(5, z)
}
