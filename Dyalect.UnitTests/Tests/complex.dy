func fizzbuzzTest() {
    var n = 1
    var acc = ""
    while n < 11 {
        if n % 15 == 0 {
            acc = acc + "fizzbuzz"
        } else if n % 3 == 0 {
            acc = acc + "fizz"
        } else if n % 5 == 0 {
            acc = acc + "buzz"
        } else {
            acc = acc + n
        }
        n = n + 1
    }
    assert(acc, "12fizz4buzzfizz78fizzbuzz")
}

func factTest() {
    func fact(n) {
        if n == 1 {
            1
        } else {
            n * fact(n - 1)
        }
    }
    var res = fact(20)
    assert(2432902008176640000, res)
}

func powerTest() {
    func pow(basis, exponent) {
        if exponent == 1 {
            basis
        } else if exponent == 0 {
            1
        } else {
            basis * pow(basis, exponent - 1)
        }
    }
    var x = pow(10, 3)
    assert(x, 1000)
}

func binaryConversionTest() {
    var acc = ""
    func bin(num) {
        if num != 0 {
            const bin = (num % 2) + 10 * bin(num / 2)
            acc += bin
            0
        } else {
            0
        }
    }
    bin(157)
    assert("10011101", acc)
}

func fibTest1() {
    func fib(n) {
        if n == 0 || n == 1 {
            return n
        }
        fib(n - 1) + fib(n - 2)
    }
    var x = fib(11)
    assert(x, 89)
}

func fibTest2() {
    func fib(accum,a,b,nums) {
        if nums > 0 {
            accum =
                if accum {
                    accum + " " + a
                } else {
                    a.toString()
                }
            fib(accum, b, a + b, nums - 1)
        } else {
            accum
        }
    }
    var res = fib(nil, 0, 1, 11)
    assert("0 1 1 2 3 5 8 13 21 34 55", res)
}

func phoneParserTest() {
    func digit(c) {
           c == '0'
        || c == '1'
        || c == '2'
        || c == '3'
        || c == '4'
        || c == '5'
        || c == '6'
        || c == '7'
        || c == '8'
        || c == '9'
    }
    func parse(str) {
        var max = str.len()
        var i = 0;
        var res = "";
        while i < max {
            const c = str[i]
            if c == '+' {
                i += 2
                continue
            }
            if digit(c) {
                res += c
            }
            i += 1
        }
        res
    }
    var res = parse("+7 (964) 506-11-12")
    assert("9645061112", res)
}

func calcETest() { //2.71828182845905
    const epsilon = 1.0e-15
    func abs(n) {
        if n < 0 {
            -n
        } else {
            n
        }
    }
    var fact = 1
    var e = 2.0
    var e0
    var n = 2
    while true {
        e0 = e
        fact *= n
        n += 1
        e += 1.0 / fact

        if abs(e - e0) < epsilon {
            break
        }
    }
    assert(2.7182818284590455, e)
}

func dammTest() {
    const table = [
        [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
        [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
        [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
        [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
        [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
        [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
        [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
        [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
        [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
        [2, 5, 8, 1, 4, 3, 6, 7, 9, 0]
    ]
    func damm(num) {
        var interim = 0
        for c in num.toString() {
            interim = table[interim][Integer(c)];
        }
        interim == 0
    }
    var numbers = [5724, 5727, 112946, 112949]
    var results = []
    for num in numbers {
        var isValid = damm(num)
        if isValid {
            results.add("yes")
        } else {
            results.add("no")
        }
    }
    var str = ""
    for e in results {
        str += e
    }
    assert("yesnoyesno", str)
}

func eulerTest() {
    const T0 = 100.0
    const TR = 20.0
    const k = 0.07
    const n = 100
    func newtonCooling(t) {
        -k * (t - TR)
    }
    func euler(fn, y, n, h) {
        var values = []
        var x = 0
        while x <= n {
            values.add(x + "=" + round(y))
            y += h * fn(y)
            x += h
        }
        values
    }
    const arr = euler(newtonCooling, T0, n, 10.0)
    var str = ""
    for e in arr {
        str += e + ";"
    }
    assert("0=100;10=44;20=27.2;30=22.16;40=20.65;50=20.19;60=20.06;70=20.02;80=20.01;90=20;100=20;", str)
}

func gcdTest() {
    func gcd(a, b) {
        if a != 0 && b != 0 {
            if a > b {
                a %= b
                a
            } else {
                b %= a
                b
            }
        } else if a {
            a
        } else  {
            b
        }
    }
    var x = gcd(24, 36)
    assert(12, x)
}

func lcmTest() {
    func gcd(a, b) {
        if a != 0 && b != 0 {
            if a > b {
                a %= b
                a
            } else {
                b %= a
                b
            }
        } else if a {
            a
        } else  {
            b
        }
    }
    func lcm(a, b) {
        a * b / gcd(a, b)
    }
    var x = lcm(10, 135)
    assert(270, x)
}

func ackTest() {
    func ack(m, n) {
        if m > 0 {
            if n > 0 {
                ack(m - 1, ack(m, n - 1))
            } else if n == 0 {
                ack(m - 1, 1)
            } else {
                "OutOfRange"
            }
        }
        else if m == 0 && n > 0 {
            n + 1
        } else {
            "OutOfRange"
        }
    }
    var x = ack(3, 4)
    assert(125, x)
}

func foldTest() {
    func fold(xs, fn) {
        var accum = 0
        for x in xs {
            accum = fn(accum, x)
        }
        accum
    }
    var x = fold([1,2,3,4,5,6], (acc,x) => acc + x)
    assert(21, x)
}

func factorsTest1() {
    func factors(num) {
        const arr = []
        var x = 1
        while x <= num {
            if num % x == 0 {
                arr.add(x)
            }
            x += 1
        }
        arr
    }
    var x = factors(27)
    assert([1, 3, 9, 27], x)
}

func factorsTest2() {
    func Iterator.where(pred) {
        for x in this when pred(x) {
            yield x
        }
    }
    func Integer.factors() {
        (1..this).where(this % $0 == 0)
    }
    var arr = []
    for x in 45.factors() {
        arr.add(x)
    }
    Iterator.__deleteMember("where")
    Integer.__deleteMember("factors")
    assert([1,3,5,9,15,45],arr)
}

func antiprimeTest() {
    func countDivisors(n) {
        if n < 2 {
            return 1
        }
        var count = 2
        var i = 2
        while i <= n / 2 {
            if n % i == 0 {
                count += 1
            }
            i += 1
        }
        count
    }
    var x = countDivisors(20)
    assert(6, x)
}

func namesOfGodTest() {
    var cache = [[1]]
    func min(x, y) {
        if x < y {
            x
        } else {
            y
        }
    }
    func namesOfGod(n) {
        for l in cache.len()..n {
            var r = [0]
            for x in 1..l {
                r.add(r[r.len() - 1] + cache[l - x][min(x, l-x)])
            }
            cache.add(r)
        }
        return cache[n]
    }
    func row(n) {
        const r = namesOfGod(n)
        var returnArray = []
        for i in 0..(n - 1) {
            returnArray.add(r[i + 1] - r[i])
        }
        return returnArray
    }
    var res = row(10)
    assert([1, 5, 8, 9, 7, 5, 3, 2, 1, 1], res)
}

func powTest() {
    func pow(a, b) {
        var y = 1

        while true {
            if (b & 1) != 0 {
                y = a*y
            }
            b = b >> 1
            if b == 0 {
                return y
            }
            a *= a
        }
    }
    var res = pow(12, 4)
    assert(20736, res)
}

func binaryToString() {
    func Integer.toString() {
        var s = ""
        for x in 31..0 {
            if this & (1 << x) != 0 {
                s += "1"
            } else if s != "" {
                s += "0"
            }
        }
        s
    }
    assert("10001100101000", 9000.toString())
    Integer.__deleteMember("toString")
}

func bubbTest() {
    var res =
        for i in 2..Integer.max {
            if i * i % 1000000 == 269696 {
                break i
            }
        }
    assert(25264, res)
}

func rot13Test() {
    func Char.rot13() {
        if ('a' <= this && this <= 'm' || 'A' <= this && this <= 'M') {
            return Char(this.order() + 13)
        }
        if ('n' <= this && this <= 'z' || 'N' <= this && this <= 'Z') {
            return Char(this.order() - 13);
        }
        return this
    }
    func String.rot13() {
        var cs = []
        for c in this {
            cs.add(c.rot13())
        }
        String.concat(values: cs)
    }
    var res = "ABJURER nowhere".rot13()
    assert("NOWHERE abjurer", res)
}

func caesarCypherTest() {
    func Char.encrypt(code) {
        if !this.isLetter() {
            return this
        }
        var offset = (if this.isUpper() {'A'} else {'a'}).order()
        return Char((this.order() + code - offset) % 26 + offset)
    }
    func String.encrypt(code) {
        var xs = []
        for c in this {
            xs.add(c.encrypt(code))
        }
        return String.concat(values: xs)
    }
    func String.decrypt(code) {
        this.encrypt(26 - code);
    }
    var str = "Pack my box with five dozen liquor jugs."
    var enc = str.encrypt(5)
    var dec = enc.decrypt(5)
    Char.__deleteMember("encrypt")
    String.__deleteMember("encrypt")
    String.__deleteMember("decrypt")
    assert("Ufhp rd gtc bnym knaj itejs qnvztw ozlx.", enc)
    assert("Pack my box with five dozen liquor jugs.", dec)
}

func countCoinsTest() {
    func countCoins(coins, n) {
        var xs = Array.empty(n + 1, 0)
        xs[0] = 1
        for c in coins {
            var cj = c
            while cj <= n {
                xs[cj] += xs[cj - c]
                cj += 1
            }
        }
        return xs[n]
    }
    var coins = [1, 5, 10, 25]
    var res = countCoins(coins, 100)
    assert(242, res)
}

func consolidationTest() {
    func max(x, y) {
        if x > y {
            x
        } else {
            y
        }
    }
    func min(x, y) {
        if x < y {
            x
        } else {
            y
        }
    }
    func overlap(left, right) {
        if max(left.s, left.e) > max(right.s, right.e) {
            max(right.s, right.e) >= min(left.s, left.e)
        } else {
            max(left.s, left.e) >= min(right.s, right.e)
        }
    }
    func consolidate(left, right) {
        (s: min(min(left.s, left.e), min(right.s, right.e)), e: max(max(left.s, left.e), max(right.s, right.e)))
    }
    func normalize(range) {
        (s: min(range.s, range.e), e: max(range.s, range.e))
    }
    for list in [
        [ (s: 6.1, e: 7.2), (s: 7.2, e: 8.3) ]
    ] {
        var z = list.len()-1
        while z >= 1 {
            for y in (z - 1)..0 {
                if overlap(list[z], list[y]) {
                    list[y] = consolidate(list[z], list[y])
                    list.removeAt(z)
                    break
                }
            }
            z -= 1
        }
        var ys = []
        for x in list {
            ys.add(normalize(x))
        }
        assert(6.1, ys[0].s)
        assert(8.3, ys[0].e)
    }
}