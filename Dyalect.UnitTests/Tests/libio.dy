#region "Initialize"
    import io
#endregion

#region "File: GetType"
    assert("File", File.name)
#endregion

#region "File: Exists"
    let b = File.Exists("../Dyalect.UnitTests/Tests/data/foo.txt")
    assert(true, b)
#endregion

#region "File: ReadText"
    let str = File.ReadText("../Dyalect.UnitTests/Tests/data/foo.txt")
    assert(true, str.StartsWith("First line"))
#endregion

#region "File: ReadLines"
    let lines = File.ReadLines("../Dyalect.UnitTests/Tests/data/foo.txt")
    assert("First line", lines[0])
    assert("Second line", lines[1])
#endregion

#region "File: Create and Delete"
    let file = "../Dyalect.UnitTests/Tests/data/file.tmp"
    File.Create(file)
    assert(true, File.Exists(file))
    File.Delete(file)
    assert(false, File.Exists(file))
#endregion

#region "File: Copy"
    let file1 = "../Dyalect.UnitTests/Tests/data/foo.txt"
    let file2 = "../Dyalect.UnitTests/Tests/data/foo2.txt"
    assert(false, File.Exists(file2))
    File.Copy(file1, file2)
    assert(true, File.Exists(file2))
    File.Delete(file2)
    assert(false, File.Exists(file2))
#endregion

#region "File: Move"
    let file1 = "../Dyalect.UnitTests/Tests/data/foo2.txt"
    let file2 = "../Dyalect.UnitTests/Tests/data/new_foo.txt"
    File.Create(file1)
    assert(true, File.Exists(file1))
    assert(false, File.Exists(file2))
    File.Move(file1, file2)
    assert(false, File.Exists(file1))
    assert(true, File.Exists(file2))
    File.Delete(file2)
#endregion

#region "Path: GetType"
    assert("Path", Path.name)
#endregion

#region "Path: GetDirectory"
    let p = Path.GetDirectory("c:\\folder\\file.txt")
    assert("c:\\folder", p)
#endregion

#region "Path: GetExtension"
    let p = Path.GetExtension("c:\\folder\\file.txt")
    assert(".txt", p)
#endregion

#region "Path: GetFileName"
    let p = Path.GetFileName("c:\\folder\\file.txt")
    assert("file.txt", p)
#endregion

#region "Path: GetFileNameWithoutExtension"
    let p = Path.GetFileNameWithoutExtension("c:\\folder\\file.txt")
    assert("file", p)
#endregion

#region "Path: GetPathRoot"
    let p = Path.GetPathRoot("c:\\folder\\file.txt")
    assert("c:\\", p)
#endregion

#region "Path: Combine"
    let p = Path.Combine("c:\\folder", "sub1\\sub2\\file.txt")
    assert("c:\\folder\\sub1\\sub2\\file.txt", p)
#endregion

#region "Path: Exists"
    var b = Path.Exists("../Dyalect.UnitTests/Tests/data/")
    assert(true, b)
    b = Path.Exists("../Dyalect.UnitTests/Tests/data/foo.txt")
    assert(true, b)
#endregion

#region "Path: EnumerateFiles 1"
    var arr = Path.EnumerateFiles("../Dyalect.UnitTests/Tests/refs/").ToArray()
    assert("libtest.dy", Path.GetFileName(arr[0]))
    assert("libtest1.dy", Path.GetFileName(arr[1]))
#endregion

#region "Path: EnumerateFiles 2"
    var arr = Path.EnumerateFiles("../Dyalect.UnitTests/Tests/data/", "*.txt").ToArray()
    assert("foo.txt", Path.GetFileName(arr[0]))
#endregion

#region "Path: EnumerateDirectories"
    var arr = Path.EnumerateDirectories("../Dyalect.UnitTests/Tests/").ToArray()
    assert("data", Path.GetFileName(arr[0]))
    assert("refs", Path.GetFileName(arr[1]))
#endregion

#region "Directory: GetType"
    assert("Directory", Directory.name)
#endregion

#region "Directory: Exists"
    var b = Directory.Exists("../Dyalect.UnitTests/Tests/data/")
    assert(true, b)
    b = Directory.Exists("../Dyalect.UnitTests/Tests/data/foo.txt")
    assert(false, b)
#endregion

#region "Directory: Create and Delete"
    let dir = "../Dyalect.UnitTests/Tests/data/temp"
    Directory.Create(dir)
    assert(true, Directory.Exists(dir))
    Directory.Delete(dir)
    assert(false, Directory.Exists(dir))
#endregion

#region "Drive: GetType"
    assert("Drive", Drive.name)
#endregion

#region "Drive: GetDrives"
    let xs = Drive.GetDrives()
    assert(true, xs is Array)
    assert(true, xs.Length() > 0)
#endregion

#region "Drive: properties"
    let drv = Drive.GetDrives().Iterate().First()
    assert(true, drv.TotalSize > 0)
    assert(true, drv.TotalFreeSpace > 0)
    assert(true, drv.AvailableFreeSpace is Integer)
    assert(true, drv.Format is String)
    assert(true, drv.Label is String)
    assert(true, drv.Root is String)
    assert(true, drv.Type is String)
    assert(true, drv.IsReady is true or false)
#endregion