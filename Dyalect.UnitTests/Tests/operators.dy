#test "Simple math"
    var x = 12 + 3 - 4 + 6
    assert(17, x)
    x = 12 + 3 - (4 + 6)
    assert(5, x)
    x = 12 * 3 - 4 + 6
    assert(38, x)
    x = 12 * (3 - 4 + 6)
    assert(60, x)
    x = 64 / 5
    assert(12, x)
#endtest

#test "Float math 1"
    var x = 12.4 - 0.39 - 12.0
    assert(0.0099999999999997868, x)
    x = 12.4 - (0.39 - 12.0)
    assert(24.009999999999998, x)
    x = 12.0 - 65.3
    assert(-53.3, x)
#endtest

#test "Float math 2"
    var x = 22 % 4 - 3.33 / 8.16
    assert(1.5919117647058822, x)
    x = 12.3 / (0.64 + 1.22)
    assert(6.6129032258064528, x)
    x = 12.3 / 0.64 + 1.22
    assert(20.43875, x)
    x = 23.456 % 12.2
    assert(11.256, x)
    x = 12.0 * 65.3
    assert(783.59999999999991, x)
    x = 188.123 - 12.0004 * 5.667 - (12.2 / 0.134)
    assert(29.071957080597016, x)
    x = (188.123 - 12.0004) * 5.667 - 12.2 / 0.134
    assert(907.04199808059684, x)
#endtest

#test "Math with formatting"
    var x = 2
        + 3
        + 5
        + 6
    assert(16, x)
    var y = 12
        + 
        -44
    assert(-32, y)
    var z = 12
        + -3
        --12
        -44
    assert(-23, z)
#endtest

#test "Math with unary"
    var x = -12 - 14.6
    assert(-26.6, x)
    x = 199 % 44.12 * 2
    assert(45.04000000000002, x)
    x = +16 - -22
    assert(38, x)
#endtest

#test "Inf"
    var x = 2.0 / 0
    assert(true, x == Float.inf())
#endtest

#test "NaN"
    var x = .0 / 0
    assert(true, x.isNaN())
#endtest

#test "Logical Or"
    let x = 144
    var res = x / 12 > 100 || x / 6 == 24
    assert(true, res)
#endtest

#test "Logical And"
    let x = 144
    var res = x / 12 > 100 && x / 6 != 24
    assert(false, res)
#endtest

#test "Comparison"
    let res = 12 > 11 && 12 <= 12 && 12 != 12.01 && 12 >= 12
    assert(true, res)
    assert(true, "string1" != "string2" && "string1" == "string1")
    let x = 12
    let y = 9
    assert(false, !(x >= 12 && y <= 10 || x < -12))
#endtest

#test "Comparison and coersion"
    assert(true, 12.0 == 12)
    assert(true, 12 == 12.0)
    assert(true, 12.2 > 12)
    assert(true, 12 < 12.2)
#endtest

#test "Comparison and bool"
    let str1 = "x"
    let str2 = ""
    assert(true, str1 == true)
    assert(false, str2 == true)
    assert(true, str2 == false)
#endtest

#test "Function comparison"
    assert(true, "".toString == "".toString)
    assert(false, "".toString == '\0'.toString)
#endtest

#test "Coalesce"
    let z = nil
    let foo = "foo"
    let obj = false
    assert("foo", z ?? foo)
    assert("foo", obj ?? z ?? foo)
    var x = 2
    var y
    x ??= 3
    y ??= 133
    assert((2, 133),(x,y))
#endtest

#test "Member check 1"
    assert(true, "string" is .len)
    assert(false, 42 is .fooBar)
    assert(true, String is .join)
    assert(false, String is .foo)
    assert(true, "" is .split)
    assert(false, "" is .join)
#endtest

#test "nameof"
    func nameofTest() { }
    assert("nameofTest", nameof(nameofTest))
    assert("toString", nameof("".toString))
    var tup = (x: 12)
    assert("x", nameof(tup.x))
    assert("Integer", nameof(Integer))
#endtest

#test "has 1"
    let nm = "split"
    assert(true, "".has(nm))
    assert(true, "" is .split)
    assert(true, "".has("split"))
    assert(true, String.has("join"))
    assert(false, String.has("split"))
    assert(true, String.has("id"))
    assert(true, String.has("name"))
#endtest

#test "has 2"
    var t = (1,2,3)
    assert(false, t.has("foo"))
    var foo = "foo"
    assert(false, t.has(foo))
    assert(true, t.has("keys"))
    var keys = "keys"
    assert(true, t.has(keys))
#endtest

#test "has 3"
    var t = [1,2,3]
    assert(false, t.has("foo"))
    var foo = "foo"
    assert(false, t.has(foo))
    assert(true, t.has("indices"))
    var indices = "indices"
    assert(true, t.has(indices))
#endtest

#test "Ternary"
    var x = 0
    var res = x > 0 ? x
        : x < 0 ? -x : 42
    assert(42, res)
    func fib(n) =>
        n < 2 ? n : fib(n - 1) + fib(n - 2)
    assert(89, fib(11))
#endtest

#test "Unary minus"
    let x = - 42 //with space
    assert(0 - 42, x)
#endtest

#test "In 1" 
    var xs = [1..10]
    assert(true, 1 in xs)
    assert(true, 10 in xs)
    assert(false, 101 in xs)
    xs = (1..10)
    assert(true, 1 in xs)
    assert(true, 10 in xs)
    assert(false, 101 in xs)
    xs = yields {1..10}
    assert(true, 1 in xs)
    assert(true, 10 in xs)
    assert(false, 101 in xs)
#endtest

#test "In 2"
    var xs = (x: 12, y: 24)
    assert(true, "x" in xs)
    assert(true, "y" in xs)
    assert(false, "z" in xs)
    xs = Dictionary.fromTuple(xs)
    assert(true, "x" in xs)
    assert(true, "y" in xs)
    assert(false, "z" in xs)
#endtest