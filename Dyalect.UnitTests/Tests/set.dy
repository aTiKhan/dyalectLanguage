func setTest1() {
    let xs = Set()
    xs.add(4)
    xs.add(1)
    xs.add(2)
    xs.add(2)
    assert(3, xs.len())
    assert([4,1,2], xs.toArray())
}

func setTest2() {
    let xs = Set()
    xs.add(5)
    xs.add(6)
    xs.remove(5)
    xs.remove(8) //non-existent
    assert([6], xs.toArray())
}

func setTest3() {
    let xs = Set()
    xs.add(5)
    xs.add(6)
    assert(true, xs.contains(5))
    assert(true, xs.contains(6))
    xs.clear()
    assert(false, xs.contains(5))
    assert(false, xs.contains(6))
}

func setTest4() {
    let xs = Set(1, 2, 3, 4, 5)
    assert([1,2,3,4,5], xs.toArray())
    let ys = Set(1, 2, 2, 3)
    assert([1,2,3], ys.toArray())
    assert((1,2,3), ys.toTuple())
}

func setTest5() {
    let xs = Set(1,2,3,4,5)
    let ys = Set(1,2,3,4,5)
    assert(true, xs == ys)
    assert(5, xs.len())
    assert(5, ys.len())
    assert(false, xs != ys)
}

func intersectTest() {
    let xs = Set(values: [1..10])
    let ys = Set(values: [5..15])
    xs.intersect(with: ys)
    assert([5,6,7,8,9,10], xs.toArray())
}

func unionTest() {
    let xs = Set(values: [1..3])
    let ys = Set(values: [4..6])
    xs.union(with: ys)
    assert([1,2,3,4,5,6], xs.toArray())
}

func exceptTest() {
    let xs = Set(values: [1..10])
    let ys = Set(values: [4..7])
    xs.except(with: ys)
    assert([1,2,3,8,9,10], xs.toArray())
}

func overlapsTest() {
    let xs = Set(values: [1..10])
    var ys = Set(values: [5..15])
    assert(true, xs.overlaps(with: ys))
    ys = Set(values: [11..15])
    assert(false, xs.overlaps(with: ys))
}

func isSubsetTest() {
    let xs = Set(values: [5..10])
    var ys = Set(values: [1..20])
    assert(false, ys.isSubset(of: xs))
    assert(true, xs.isSubset(of: ys))
}

func isSupersetTest() {
    let xs = Set(values: [5..10])
    var ys = Set(values: [1..20])
    assert(false, xs.isSuperset(of: ys))
    assert(true, ys.isSuperset(of: xs))
}