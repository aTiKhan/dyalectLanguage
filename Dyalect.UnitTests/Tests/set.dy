#region "Constructor"
    let xs = Set(1, 2, 3)
    assert([1,2,3], xs.ToArray())
#endregion

#region "Methods: Clone"
    let xs = Set()
    assert(true, xs == xs)
    assert(true, xs.Clone() == xs)
#endregion

#region "Methods: GetType"
    let x = Set()
    assert(true, TypeInfo(x) == Set)
    assert(true, x.GetType() == Set)
    var t = TypeInfo(x)
    assert("Set", typeName(t))
#endregion

#region "Methods: Add, Len"
    let xs = Set()
    xs.Add(4)
    xs.Add(1)
    xs.Add(2)
    xs.Add(2)
    assert(3, xs.Length())
    assert([4,1,2], xs.ToArray())
#endregion

#region "Methods: Add, Remove"
    let xs = Set()
    xs.Add(5)
    xs.Add(6)
    xs.Remove(5)
    xs.Remove(8) //non-existent
    assert([6], xs.ToArray())
#endregion

#region "Methods: Add, Clear, Contains"
    let xs = Set()
    xs.Add(5)
    xs.Add(6)
    assert(true, xs.Contains(5))
    assert(true, xs.Contains(6))
    xs.Clear()
    assert(false, xs.Contains(5))
    assert(false, xs.Contains(6))
#endregion

#region "Methods: ToArray, ToTuple"
    let xs = Set(1, 2, 3, 4, 5)
    assert([1,2,3,4,5], xs.ToArray())
    let ys = Set(1, 2, 2, 3)
    assert([1,2,3], ys.ToArray())
    assert((1,2,3), ys.ToTuple())
#endregion

#region "Equality test"
    let xs = Set(1,2,3,4,5)
    let ys = Set(1,2,3,4,5)
    assert(true, xs == ys)
    assert(5, xs.Length())
    assert(5, ys.Length())
    assert(false, xs != ys)
#endregion

#region "Methods: IntersectWith"
    let xs = Set(values: [1..10])
    let ys = Set(values: [5..15])
    xs.IntersectWith(ys)
    assert([5,6,7,8,9,10], xs.ToArray())
#endregion

#region "Methods: UnionWith"
    let xs = Set(values: [1..3])
    let ys = Set(values: [4..6])
    xs.UnionWith(ys)
    assert([1,2,3,4,5,6], xs.ToArray())
#endregion

#region "Methods: ExceptOf"
    let xs = Set(values: [1..10])
    let ys = Set(values: [4..7])
    xs.ExceptOf(ys)
    assert([1,2,3,8,9,10], xs.ToArray())
#endregion

#region "Methods: OverlapsWith"
    let xs = Set(values: [1..10])
    var ys = Set(values: [5..15])
    assert(true, xs.OverlapsWith(ys))
    ys = Set(values: [11..15])
    assert(false, xs.OverlapsWith(ys))
#endregion

#region "Methods: IsSubsetOf"
    let xs = Set(values: [5..10])
    var ys = Set(values: [1..20])
    assert(false, ys.IsSubsetOf(xs))
    assert(true, xs.IsSubsetOf(ys))
#endregion

#region "Methods: IsSupersetOf"
    let xs = Set(values: [5..10])
    var ys = Set(values: [1..20])
    assert(false, xs.IsSupersetOf(ys))
    assert(true, ys.IsSupersetOf(xs))
#endregion

#region "Methods: ToString"
    let xs = Set(1, 2, 3)
    assert("Set(1, 2, 3)", xs.ToString())
#endregion

#region "Methods: ToLiteral"
    let xs = Set(1, 'a', "foo")
    assert("Set(1, 'a', \"foo\")", xs.ToLiteral())
#endregion

#region "Conversion: as"
    let xs = Set(1, 2, 3)
    assert([1,2,3], xs as Array)
    assert((1,2,3), xs as Tuple)
    assert(true, xs as Bool)
#endregion

#region "Set and vararg function"
    var str = String(Set('a', 'b', 'c'))
    assert("Set(a, b, c)", str)
    str = String(values: Set('a', 'b', 'c'))
    assert("abc", str)
#endregion