#warning disable 302
#warning disable 303

func matchTest1() {
    var res = match (1,2) {
        (2, x) => "wrong1",
        (x, y, z) => "wrong2",
        (1, _, _) => "wrong3",
        [1, 2, 3] => "wrong4",
        2 => "wrong5",
        (1, x) => x
    }
    assert(2, res)
}

func matchTest2() {
    var res = match (1,2,"str") {
        (1, 2, "strs") => "wrong",
        [1, 2, "str"] => "right?",
        (1, 2, "str") => "right!"
    }
    assert("right?", res)
}

func matchTest3() {
    var res = match (1,2,"str") {
        (1, 2, "strs") => "wrong",
        Array && [1, 2, "str"] => "right?",
        (1, 2, "str") xs => xs
    }
    assert((1,2,"str"), res)
}

func matchTest4() {
    var res = match (1,2) {
        "clear fake" => "wrong1",
        (x, 2) xs when xs.fst() == 1 => xs
    }
    assert((1,2), res)
}

func matchTest5() {
    func typeName(x) {
        match x {
            Integer => "Integer",
            Float => "Float",
            String => "String",
            Char => "Char",
            Bool => "Bool",
            Nil => "Nil",
            Tuple => "Tuple",
            Array => "Array",
            Function => "Function",
            _ => "Unknown"
        }
        var xs = [
            typeName(0),
            typeName(.0),
            typeName([]),
            typeName((1,2)),
            typeName(typeName),
            typeName([].iter()),
            typeName(false),
            typeName(""),
            typeName('\s'),
            typeName(nil)
        ]
        var expected = [
            "Integer",
            "Float",
            "Array",
            "Tuple",
            "Function",
            "Unknown",
            "Bool",
            "String",
            "Char",
            "Nil"
        ]
        assert(expected, xs)
    }
}

func matchTest6() {
    var res = match 12 {
        "24" || 24 x => x,
        "12" || 12 x => x
    }
    assert(12, res)
}

func matchTest7() {
    var res = match [1, 2, ('f', 'F', [34, 42.2]), "end"] {
        [1, 2] xs when xs.len() <= 3 => "wrong",
        [1, 2, (_, _, [34, x])] when x > 42 => x
    }
    assert(42.2, res)
}

func matchTest8() {
    var res = match (x = 12, y = 24) {
        (x = 13, y = y) => y,
        (x = x, y = 24) => x
    }
    assert(12, res)
}

func matchTest9() {
    var arr = []
    match [1..5] {
        [1, 3, x] => nil,
        [1, 2, 3, 4, 5, x] => nil,
        [1, x, 3, y] => {
            arr.add(x)
            arr.add(y)
        }
    }
    assert([2,4], arr)
}

func matchTest10() {
    var res = match (42, 12) {
        ((x, y) && (43, _)) || ((x, y) && (_, 12)) when x > 10 => x
    }
    assert(42, res)
}

func matchTest11() {
    var res = match (42, 12) {
        (42, x) when x > 15 => false,
        (42, x) when x == 12 => true
    }
    assert(true, res)
}

func matchTest12() {
    var res = match (42, 12) {
        (x, y) && (_, 12) when x > y => x + y
    }
    assert(54, res)
}

func matchTest13() {
    var n = nil //Bug #178
    var res = match n {
        nil => true
    }
    assert(true, res)
}

func matchTest14() {
    var res = match (x = 12,) {
        (x = 13,) => 13,
        (x = x,) => x
    }
    assert(12, res)
}


func forMatchTest1() {
    var arr = []
    for (1, x) in [(1, 2), (2, 'F'), (3, 'S'), (1, 3), (1, 4), (1.01, true)] {
        arr.add(x)
    }
    assert([2, 3, 4], arr)
}

func forMatchTest2() {
    var arr = []
    for Char c in ['a', "str", 'b', 'c', 12] {
        arr.add(c)
    }
    assert(['a','b','c'], arr)
}

func forMatchTest3() {
    var arr = []
    for Char in ['a', "str", 'b', 'c', 12] {
        arr.add(0)
    }
    assert(3, arr.len())
}

func forMatchTest4() {
    var arr = []
    for (1, x) xs in [(1, 2), (2, 'F'), (3, 'S'), (1, 3), (1, 4), (1.01, true)] {
        arr.add(xs)
    }
    assert([(1,2), (1,3), (1,4)], arr)
}

func forMatchTest5() {
    var arr = []
    for x in [1,2,3,4,5,6,7,8,9,10] when x % 2 == 0 {
        arr.add(x)
    }
    assert([2,4,6,8,10], arr)
}

func rangeMatchTest1() {
    var x = 5
    var res = match x {
        1..4 => false,
        3..10 => true
    }
    assert(true, res)
}

func rangeMatchTest2() {
    var x = 'c'
    var res = match x {
        'd'..'z' => 0,
        'b'..'f' => 144
    }
    assert(144, res)
}

func hasMatchTest1() {
    var res = match 12 {
        .foo? => false,
        .op_mul? => true
    }
    assert(true, res)
}

func hasMatchTest2() {
    var res = match (12,3) {
        .foo? => false,
        .keys? => true
    }
    assert(true, res)
}

func setMatchTest1() {
    var x = 1
    var y = 2
    set (x, y) = (y, x)
    assert(2, x)
    assert(1, y)
}

func setMatchTest2() {
    var x
    set [1, ('a', 'b'), x, 33] = [1, ('a', 'b'), 42, 33, 88]
    assert(42, x)
}

func setMatchTest3() {
    func foo() {
        (41, 2, 3)
    }
    var x
    var res = try {
        set (x, 2) = foo()
    } catch e {
        e
    }
    assert("Match failed.", res)
}

func varMatchTest1() {
    set (x, y) = (1, 11)
    assert(1, x)
    assert(11, y)
}

func varMatchTest2() {
    var [1, ('a', 'b'), x, 33, y] = [1, ('a', 'b'), 42, 33, 88]
    assert(42, x)
    assert(88, y)
}

func varMatchTest3() {
    func foo() {
        (41, 2, 3)
    }
    var res = try {
        var (x, 2) = foo()
    } catch e {
        e
    }
    assert("Match failed.", res)
}

func ctorMatchTest1() {
    const Array(x, y, z) = [1, 2, 3]
    assert(6, x + y + z)
}

func ctorMatchTest2() {
    const Tuple(x, y, z) = (1, 2, 3)
    assert(6, x + y + z)
}

func ctorMatchTest3() {
    var res = match 42 {
        Integer() => true
    }
    assert(true, res)
}

func ctorMatchTest4() {
    const String(x, y, z) = "abc"
    assert(['a','b','c'], [x,y,z])
}

func isTest1() {
    var xs = (1, 2)
    assert(true, xs is Tuple)
    assert(false, xs is Array)
    var b = xs is Tuple t
    assert(true, b)
    assert((1,2), t)
}

func isTest2() {
    var xs = (1, 2, 3, ['a', 'b'])
    var res
    if xs is (1, _, 3, ['a', x]) {
        res = true
    }
    assert(true, res)
    var res1 = xs is (1, _, 3, ['a', x])
    assert(true, res1)
    assert('b', x)
}

func isTest3() {
    var xs = (1, 2, 3)
    var res = xs is (1, _, 3, ['a', x])
    assert(false, res)
    assert(nil, x)
}

func isTest4() {
    func calcIt(xs) {
        if xs is (x, y, z) {
            x + y + z
        } else {
            0
        }
    }
    var xs = (1, 2, 3)
    var ys = (1, 2)
    assert(6, calcIt(xs))
    assert(0, calcIt(ys))
}

func bindingMatch1() {
    var (x,y) = (12, 2)
    assert(14, x + y)
    var (_, z) = (12, 222)
    assert(222, z)
}

func bindingMatch2() {
    var [x,y] = [12, 2]
    assert(14, x + y)
    var [_, z] = [12, 222]
    assert(222, z)
}

func bindingMatch3() {
    var (x,y) = [12, 2]
    assert(14, x + y)
    var (_, z) = [12, 222]
    assert(222, z)
}