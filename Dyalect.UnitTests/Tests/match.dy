#test init
    #warning disable 302
    #warning disable 303
#endtest

#test "Patterns: tuple"
    var res = match (1,2) {
        (2, x) => "wrong1",
        (x, y, z) => "wrong2",
        (1, _, _) => "wrong3",
        [1, 2, 3] => "wrong4",
        2 => "wrong5",
        (1, x) => x
    }
    assert(2, res)
#endtest

#test "Patterns: tuple, array"
    var res = match (1,2,"str") {
        (1, 2, "strs") => "wrong",
        [1, 2, "str"] => "right?",
        (1, 2, "str") => "right!"
    }
    assert("right?", res)
#endtest

#test "Patterns: tuple, array, type"
    var res = match (1,2,"str") {
        (1, 2, "strs") => "wrong",
        Array and [1, 2, "str"] => "right?",
        (1, 2, "str") xs => xs
    }
    assert((1,2,"str"), res)
#endtest

#test "Guards 1"
    var res = match (1,2) {
        "clear fake" => "wrong1",
        (x, 2) xs when xs.First() == 1 => xs
    }
    assert((1,2), res)
#endtest

#test "Patterns: type test"
    func typeName(x) {
        match x {
            Integer => "Integer",
            Float => "Float",
            String => "String",
            Char => "Char",
            Bool => "Bool",
            Nil => "Nil",
            Tuple => "Tuple",
            Array => "Array",
            Function => "Function",
            _ => "Unknown"
        }
        var xs = [
            typeName(0),
            typeName(.0),
            typeName([]),
            typeName((1,2)),
            typeName(typeName),
            typeName([].Iterate()),
            typeName(false),
            typeName(""),
            typeName('\s'),
            typeName(nil)
        ]
        var expected = [
            "Integer",
            "Float",
            "Array",
            "Tuple",
            "Function",
            "Unknown",
            "Bool",
            "String",
            "Char",
            "Nil"
        ]
        assert(expected, xs)
    }
#endtest

#test "Patterns: or"
    var res = match 12 {
        "24" or 24 => 24,
        "12" or 12 => 12
    }
    assert(12, res)
#endtest

#test "Patterns: array with guards"
    var res = match [1, 2, ('f', 'F', [34, 42.2]), "end"] {
        [1, 2] xs when xs.Length() <= 3 => "wrong",
        [1, 2, (_, _, [34, x])] when x > 42 => x
    }
    assert(42.2, res)
#endtest

#test "Patterns: record 1"
    var res = match (x: 12, y: 24) {
        (x: 13, y: y) => y,
        (x: x, y: 24) => x
    }
    assert(12, res)
#endtest

#test "Patterns: record 2"
    var res = match (x: 12) {
        (x: 13) => 13,
        (x: x) => x
    }
    assert(12, res)
#endtest

#test "Match range"
    var arr = []
    match [1..5] {
        [1, 3, x] => nil,
        [1, 2, 3, 4, 5, x] => nil,
        [1, x, 3, y] => {
            arr.Add(x)
            arr.Add(y)
        }
    }
    assert([2,4], arr)
#endtest

#test "Patterns: and 1"
    var res = match (42, 12) {
        (x, y) and (_, 12) when x > 10 => x
    }
    assert(42, res)
#endtest

#test "Guards 2"
    var res = match (42, 12) {
        (42, x) when x > 15 => false,
        (42, x) when x == 12 => true
    }
    assert(true, res)
#endtest

#test "Patterns: and 2"
    var res = match (42, 12) {
        (x, y) and (_, 12) when x > y => x + y
    }
    assert(54, res)
#endtest

#test "Patterns: nil"
    var n = nil //Bug #178
    var res = match n {
        nil => true
    }
    assert(true, res)
#endtest

#test "Patterns: record 3"
    var res = match (x: 12,) {
        (x: 13,) => 13,
        (x: x,) => x
    }
    assert(12, res)
#endtest

#test "Pattern in cycle 1"
    var arr = []
    for (1, x) in [(1, 2), (2, 'F'), (3, 'S'), (1, 3), (1, 4), (1.01, true)] {
        arr.Add(x)
    }
    assert([2, 3, 4], arr)
#endtest

#test "Pattern in cycle 2"
    var arr = []
    for Char c in ['a', "str", 'b', 'c', 12] {
        arr.Add(c)
    }
    assert(['a','b','c'], arr)
#endtest

#test "Pattern in cycle 3"
    var arr = []
    for Char in ['a', "str", 'b', 'c', 12] {
        arr.Add(0)
    }
    assert(3, arr.Length())
#endtest

#test "Pattern in cycle 4"
    var arr = []
    for (1, x) xs in [(1, 2), (2, 'F'), (3, 'S'), (1, 3), (1, 4), (1.01, true)] {
        arr.Add(xs)
    }
    assert([(1,2), (1,3), (1,4)], arr)
#endtest

#test "Pattern in cycle 5"
    var arr = []
    for x in [1,2,3,4,5,6,7,8,9,10] when x % 2 == 0 {
        arr.Add(x)
    }
    assert([2,4,6,8,10], arr)
#endtest

#test "Patterns: range 1"
    var x = 5
    var res = match x {
        1..4 => false,
        3..10 => true
    }
    assert(true, res)
#endtest

#test "Patterns: range 2"
    var x = 'c'
    var res = match x {
        'd'..'z' => 0,
        'b'..'f' => 144
    }
    assert(144, res)
#endtest

#test "Patterns: member check 3"
    var res = match 12 {
        .foo => false,
        .__op_mul => true
    }
    assert(true, res)
#endtest

#test "Patterns: member check 2"
    var res = match (12,3) {
        .foo => false,
        .Keys => true
    }
    assert(true, res)
#endtest

#test "Patterns: member check 3"
    let xs = []
    let res = xs is .Iterate and .ToString and .Has
    assert(true, res)
#endtest

#test "Match in set 1"
    var x = 1
    var y = 2
    set (x, y) = (y, x)
    assert(2, x)
    assert(1, y)
#endtest

#test "Match in set 2"
    var x
    set [1, ('a', 'b'), x, 33] = [1, ('a', 'b'), 42, 33, 88]
    assert(42, x)
#endtest

#test "Match and exception 1"
    func foo() {
        (41, 2, 3)
    }
    var x
    var res = try {
        set (x, 2) = foo()
    } catch e {
        e.detail
    }
    assert("Match failed.", res)
#endtest

#test "Match in set 3"
    set (x, y) = (1, 11)
    assert(1, x)
    assert(11, y)
#endtest

#test "Match in var 1"
    var [1, ('a', 'b'), x, 33, y] = [1, ('a', 'b'), 42, 33, 88]
    assert(42, x)
    assert(88, y)
#endtest

#test "Match in var 2"
    var (x,y) = (12, 2)
    assert(14, x + y)
    var (_, z) = (12, 222)
    assert(222, z)
#endtest

#test "Match in var 3"
    var [x,y] = [12, 2]
    assert(14, x + y)
    var [_, z] = [12, 222]
    assert(222, z)
#endtest

#test "Match in var 4"
    var (x,y) = [12, 2]
    assert(14, x + y)
    var (_, z) = [12, 222]
    assert(222, z)
#endtest

#test "Match and exception 2"
    func foo() {
        (41, 2, 3)
    }
    var res = try {
        var (x, 2) = foo()
    } catch e {
        e.detail
    }
    assert("Match failed.", res)
#endtest

#test "Match in let 1"
    let Array and (x, y, z) = [1, 2, 3]
    assert(6, x + y + z)
    let Array and [xx, yy, zz] = [1, 2, 3, 4, 5]
    assert(6, xx + yy + zz)
#endtest

#test "Match in let 2"
    let Tuple and (x, y, z) = (1, 2, 3)
    assert(6, x + y + z)
#endtest

#test "Match as an expression"
    var res = match 42 {
        Integer => true
    }
    assert(true, res)
#endtest

#test "Match in let 3"
    let String and (x, y, z) = "abc"
    assert(['a','b','c'], [x,y,z])
#endtest

#test "Match in is 1"
    var xs = (1, 2)
    assert(true, xs is Tuple)
    assert(false, xs is Array)
    var b = xs is Tuple t
    assert(true, b)
    assert((1,2), t)
#endtest

#test "Match in is 2"
    var xs = (1, 2, 3, ['a', 'b'])
    var res
    if xs is (1, _, 3, ['a', x]) {
        res = true
    }
    assert(true, res)
    var res1 = xs is (1, _, 3, ['a', x])
    assert(true, res1)
    assert('b', x)
#endtest

#test "Match in is 3"
    var xs = (1, 2, 3)
    var res = xs is (1, _, 3, ['a', x])
    assert(false, res)
    assert(nil, x)
#endtest

#test "Match in is 4"
    func calcIt(xs) {
        if xs is (x, y, z) {
            x + y + z
        } else {
            0
        }
    }
    var xs = (1, 2, 3)
    var ys = (1, 2)
    assert(6, calcIt(xs))
    assert(0, calcIt(ys))
#endtest

#test "Match in is 5"
    var x = 1
    var y = 1.2
    var res1 = false
    var res2 = false
    if x is Integer {
        res1 = true
    }
    assert(true, res1)
    if y is Float {
        res2 = true
    }
    assert(true, res2)
    if y is Float f {
        assert(1.2, f)
    }
#endtest

#test "Custom type check"
    type TypeInMatch()

    var t = TypeInMatch()
    var res = false
    if t is TypeInMatch {
        res = true
    }
    assert(true, res)
#endtest

#test "Match in for with guard"
    let tup = (
        (1, 2),
        (2, 4),
        (3, 6),
        (4, 8),
        (5, 10)
    )
    let xs = []
    for (x, y) in tup when x % 2 == 0 {
        xs.Add(y)
    }
    assert([4, 8], xs)
#endtest

#test "Match in let 4"
    let xs = [42]
    xs is Array arr
    assert([42], xs)
    xs is Array or Array arr2
    assert(nil, arr2)
#endtest

#test "Match in let 5"
    let xs = []
    if xs is [x] || xs is Array {
        assert(nil, x)
    } else {
        assert(true, false)
    }
#endtest

#test "Match in let 6"
    let xs = []
    match xs {
        [x] or Array => assert(nil, x),
        _ => assert(true, false)
    }
#endtest

#test "Patterns: not"
    let x = nil
    assert(true, x is nil)
    assert(false, x is not nil)
    assert(true, x is not (1,2,3))
    let y = [1,2,3]
    assert(true, y is not [1,2,3,4])
    assert(true, y is [1,2,3])
    if y is not [a,b,c,4] {
        assert(true, a is nil)
        assert(true, b is nil)
        assert(true, c is nil)
    }
    assert(false, y is not Array)
    assert(true, y is not Tuple)
    assert(true, y is not Tuple and not Dictionary)
#endtest

#test "Patterns: comparison"
    let (x, y) = (1, 2)
    var res = x is >0
    assert(true, res)
    res = x is >0 and <2
    assert(true, res)
    res = y is 5 || x is >=1
    assert(true, res)
    res = y is <=1 or >5
    assert(false, res)
#endtest
