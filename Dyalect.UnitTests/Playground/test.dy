func rot(n, p, rx, ry) {
    if ry == 0 {
        if rx == 1 {
            p["x"] = n - 1 - p["x"]
            p["y"] = n - 1 - p["y"]
        }
        var t  = p["x"]
        p["x"] = p["y"]
        p["y"] = t
    }
}

func d2pt(n, d) {
    var x = 0
    var y = 0
    var t = d
    var s = 1
    while s < n {
        var rx = 1 & (t / 2)
        var ry = 1 & (t ^ rx)
        var p = (x, y)
        rot(s, p, rx, ry)
        x = p["x"] + s * rx
        y = p["y"] + s * ry
        t /= 4
        s *= 2
    }
    (x, y)
}

func genArray(size, e) {
    var arr = []
    var i = 0
    while i < size {
        arr.add(e)
        i += 1
    }
    arr
}

func fromTo(from, to) {
    var i = from
    while i < to {
        yield i
        i += 1
    }
}
 
func runIt() {
    var n = 32
    var k = 3
    var pts = genArray(n * k, genArray(n * k, ' '))
    var prev = (x: 0, y: 0)
    pts[0][0] = '.'

    for d in fromTo(1, n * n) {
        var curr = d2pt(n, d)
        var cx = curr["x"] * k
        var cy = curr["y"] * k
        var px = prev["x"] * k
        var py = prev["y"] * k
        pts[cx][cy] = '.'
        if cx == px {
            if (py < cy) {
                for y in fromTo(py + 1, cy) { 
                    pts[cx][y] = '|' 
                }
            } else {
                for y in fromTo(cy + 1, py) {
                    pts[cx][y] = '|'
                }
            }
        }
        else {
            if px < cx {
                for x in fromTo(px + 1, cx) {
                    pts[x][cy] = '_'
                }
            } else {
                for x in fromTo(cx + 1, px) {
                    pts[x][cy] = '_'
                }
            }
        }
        prev = curr
    }
    for i in fromTo(0, n * k) {
        var str = ""
        for j in fromTo(0, n * k) {
            str += pts[j][i]
        }
        print(str)
    }
}

runIt()