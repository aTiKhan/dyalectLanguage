func catchTest1() {
    var x
    try {
        x = 2
    } catch e {
        x = 22
    }
    //catch should be ignored
    assert(2, x)
}

func catchTest2() {
    var res =
        try {
            2 / 0
        } catch e {
            42
        }
    assert(42, res)
}

func catchTest3() {
    var res =
        try {
            try {
                2 / 0
            }
            catch e {
                142
            }
        } catch e {
            42
        }
    assert(142, res)
}

func catchTest4() {
    var res =
        try {
            throw "Error!"
        } catch e {
            e
        }
    assert("Error!", res)
}

func catchTest5() {
    var res =
        try {
            try {
                throw "Oops!"
            }
            catch e {
                throw e
            }
        } catch e {
            "caught:" + e
        }
    assert("caught:Oops!", res)
}

func catchTest6() {
    var res =
        try {
            try {
                throw 42
            }
            catch {
                0 => 0,
                1 => 1,
                2 => 2
            }
        } catch e {
            e
        }
    assert(42, res)
}

func catchTest7() {
    func errorMaker() {
        throw nameof(errorMaker)
    }
    func caller2() {
        errorMaker()
    }
    func caller1() {
        caller2()
    }
    func caller0(){
        try {
            caller1()
        } catch e {
            e
        }
    }
    var res = caller0()
    assert("errorMaker", res)
}

func catchTest8() {
    func foo(x, y, z) { (x,y,z) }
    var e = try {
            foo(1, 2, 3, 4)
        } catch e {
            "foo"
        }
    assert("foo", e)
}

func catchTest9() {
    func sorter(x, y) {
        if x > 10 {
            throw "No!"
        }
        x - y
    }
    var arr = [1..11]
    var ex
    try {
        arr.sort(sorter)
    } catch e {
        ex = e
    }
    assert("No!", ex)
}

func catchMatchTest1() {
    func foo() { throw ("err", 22) }
    var e = try {
            foo()
        } catch {
            ("err", 22, 1) => false,
            ("err", 23) => false,
            ("err", 22) => true
        }
    assert(true, e)
}

func catchMatchTest2() {
    func foo() { throw ("err", 231) }
    var e
    e = try {
        e = try {
                foo()
            } catch {
                ("err", 22, 1) => false,
                ("err", 23) => false,
                ("err", 22) => true
            }
    } catch e {
        142
    }
    assert(142, e)
}
