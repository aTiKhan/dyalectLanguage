///////////////////////////////////////////////
func whileTest1() {
    var n = 100
    var x = while n > 0 {
        if n == 33 {
            break n
        }
        n = n - 1
    }
    assert(33, x)
}

func whileTest2() {
    var n = 100
    var x = while n > 0 {
        if n == 33 {
            break
        }
        n = n - 1
    }
    if !x {
        x = 42
    }
    assert(42, x)
}

func fizzbuzzTest() {
    var n = 1
    var acc = ""
    while n < 11 {
        if n % 15 == 0 {
            acc = acc + "fizzbuzz"
        } else if n % 3 == 0 {
            acc = acc + "fizz"
        } else if n % 5 == 0 {
            acc = acc + "buzz"
        } else {
            acc = acc + n
        }
        n = n + 1
    }
    assert(acc, "12fizz4buzzfizz78fizzbuzz")
}

func recursionTest() {
    var acc = 0
    func iter(n) {
        if n == 0 {
            0
        } else {
            acc = acc + 1;
            iter(n - 1)
        }
    }
    iter(10)
    assert(acc, 10)
}

func factTest() {
    func fact(n) {
        if n == 1 {
            1
        } else {
            n * fact(n - 1)
        }
    }
    var res = fact(20)
    assert(2432902008176640000, res)
}

func powerTest() {
    func pow(basis, exponent) {
        if exponent == 1 {
            basis
        } else if exponent == 0 {
            1
        } else {
            basis * pow(basis, exponent - 1)
        }
    }
    var x = pow(10, 3)
    assert(x, 1000)
}

func binaryConversionTest() {
    var acc = ""
    func bin(num) {
        if num != 0 {
            const bin = (num % 2) + 10 * bin(num / 2)
            acc += bin
            0
        } else {
            0
        } 
    }
    bin(157)
    assert("10011101", acc)
}

func fibTest1() {
    func fib(n) {
        if n == 0 || n == 1 {
            return n
        }
        fib(n - 1) + fib(n - 2)
    }
    var x = fib(11)
    assert(x, 89)
}

func fibTest2() {
    func fib(accum,a,b,nums) {
        if nums > 0 {
            accum = 
                if accum {
                    accum + " " + a
                } else {
                    a.toString()
                }
            fib(accum, b, a + b, nums - 1)
        } else {
            accum
        }
    }
    var res = fib(nil, 0, 1, 11)
    assert("0 1 1 2 3 5 8 13 21 34 55", res)
}

func phoneParserTest() {
    func digit(c) {
           c == "0"
        || c == "1"
        || c == "2"
        || c == "3"
        || c == "4"
        || c == "5"
        || c == "6"
        || c == "7"
        || c == "8"
        || c == "9"
    }
    func parse(str) {
        var max = str.len()
        var i = 0;
        var res = "";
        while i < max {
            const c = str[i]
            if c == "+" {
                i += 2
                continue
            }
            if digit(c) {
                res += c
            }
            i += 1
        }
        res
    }
    var res = parse("+7 (964) 506-11-12")
    assert("9645061112", res)
}

func iteratorTest1() {
    func foo(token) {
        yield 1
        yield 3
        yield 44.2
        if token {
            return
        }
        yield 68.6
    }
    var it = foo(false)
    var res = it() + it() + it() + it()
    assert(116.8, res)
}

func iteratorTest2() {
    var arr = [1,2,3,4,5,6,7,8]
    func sum(arr) {
        var acc = 0
        for x in arr {
            acc += x
        }
        acc
    }
    var res = sum(arr)
    assert(36, res)
}

func iteratorTest3() {
    var arr = [1,2,3,4,5,6,7,8]
    func filter(arr, pred) {
        for x in arr {
            if pred(x) {
                yield x
            }
        }
    }
    func sum(arr) {
        var acc = 0
        for x in arr {
            acc += x
        }
        acc
    }
    var filtered = filter(arr, x => x % 2 == 0)
    var res = sum(filtered)
    assert(20, res)
}

func iteratorTest4() {
    func reverse(arr) {
        var newArr = []
        newArr.addRange(arr) //hack
        var len = newArr.len()
        var counter = 1
        for x in arr {
            newArr[len - counter] = x
            counter += 1
        }
        newArr
    }
    func makeString(arr) {
        var str = ""
        for x in arr {
            str += x
        }
        str
    }
    const arr = reverse("Hello")
    var res = makeString(arr)
    assert("olleH", res)
}

func iteratorTest5() {
    func filter(arr, pred) {
        for x in arr {
            if pred(x) {
                yield x
            }
        }
    }
    func toArray(seq) {
        var arr = []
        for x in seq {
            arr.add(x)
        }
        arr
    }
    const arr = toArray( filter("hello", x => x == 'l') )
    var res = arr[0] + arr[1]
    assert("ll", res)
}

func iteratorTest6() {
    var arr = [1,3,5,8]
    var x = 
        for x in arr {
            if x % 2 == 0 {
                break x
            }
        }
    assert(8, x)
}

func iteratorTest7() {
    func Integer.iter() {
        var i = 0
        if this < 0 {
            while i > this {
                yield i
                i -= 1
            }
        } else {
            while i < this {
                yield i
                i += 1
            }
        }
    }

    var res = 5.iter().toArray()
    assert([0,1,2,3,4], res)
}

func calcETest() { //2.71828182845905
    const epsilon = 1.0e-15
    func abs(n) {
        if n < 0 {
            -n
        } else {
            n
        }
    }
    var fact = 1
    var e = 2.0
    var e0
    var n = 2
    while true {
        e0 = e
        fact *= n
        n += 1
        e += 1.0 / fact

        if abs(e - e0) < epsilon {
            break
        }
    }
    assert(2.7182818284590455, e)
}

func dammTest() {
    const table = [
        [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
        [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
        [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
        [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
        [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
        [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
        [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
        [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
        [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
        [2, 5, 8, 1, 4, 3, 6, 7, 9, 0]
    ] 
    func damm(num) {
        var interim = 0
        for c in num.toString() {
            interim = table[interim][convertToNumber(c)];
        }
        interim == 0
    }
    var numbers = [5724, 5727, 112946, 112949]
    var results = []
    for num in numbers {
        var isValid = damm(num)
        if isValid {
            results.add("yes")
        } else {
            results.add("no")
        }
    }
    var str = ""
    for e in results {
        str += e
    }
    assert("yesnoyesno", str)
}

func eulerTest() {
    const T0 = 100.0
    const TR = 20.0
    const k = 0.07
    const n = 100
    func newtonCooling(t) {
        -k * (t - TR)
    } 
    func euler(fn, y, n, h) {
        var values = []
        var x = 0
        while x <= n {
            values.add(x + "=" + y)
            y += h * fn(y)
            x += h
        }
        values
    }
    const arr = euler(newtonCooling, T0, n, 10.0)
    var str = ""
    for e in arr {
        str += e + ";"
    }
    assert("0=100;10=44;20=27.2;30=22.16;40=20.648;50=20.1944;60=20.05832;70=20.017496;80=20.0052488;90=20.00157464;100=20.000472392;", str)
}

func gcdTest() {
    func gcd(a, b) {
        if a != 0 && b != 0 {
            if a > b {
                a %= b
            } else {
                b %= a
            }
        } else if a {
            a
        } else  {
            b
        }
    }
    var x = gcd(24, 36)
    assert(12, x)
}

func lcmTest() {
    func gcd(a, b) {
        if a != 0 && b != 0 {
            if a > b {
                a %= b
            } else {
                b %= a
            }
        } else if a {
            a
        } else  {
            b
        }
    }
    func lcm(a, b) {
        a * b / gcd(a, b)
    }
    var x = lcm(10, 135)
    assert(270, x)
}

func ackTest() {
    func ack(m, n) {
        if m > 0 {
            if n > 0 {
                ack(m - 1, ack(m, n - 1))
            } else if n == 0 {
                ack(m - 1, 1)
            } else {
                "OutOfRange"
            }
        }
        else if m == 0 && n > 0 {
            n + 1
        } else {
            "OutOfRange"
        }
    }
    var x = ack(3, 4)
    assert(125, x)
}

func foldTest() {
    func fold(xs, fn) {
        var accum = 0
        for x in xs {
            accum = fn(accum, x)
        }
        accum
    }
    var x = fold([1,2,3,4,5,6], (acc,x) => acc + x)
    assert(21, x)
}

func factorsTest() {
    func factors(num) {
        const arr = []
        var x = 1
        while x <= num {
            if num % x == 0 {
                arr.add(x)
            }
            x += 1
        }
        arr
    }
    var x = factors(27)
    assert([1, 3, 9, 27], x)
}

func antiprimeTest() {
    func countDivisors(n) {
        if n < 2 {
            return 1
        }
        var count = 2
        var i = 2
        while i <= n / 2 {
            if n % i == 0 {
                count += 1
            }
            i += 1
        }
        count
    }
    var x = countDivisors(20)
    assert(6, x)
}

func variadicTest1() {
    func takeItAll(x, y, args...) {
        var str = "x=" + y + ";y=" + y + ";other=["
        var count = 0
        for x in args {
            if count > 1 {
                str += ","
            }
            str += x
            count += 1
        }
        str += "]"
    }
    var x = takeItAll(12, 33.4, "oops", true, [1], (x: 0.33, y: 1))
    assert("x=33.4;y=33.4;other=[oopstrue,[1],(x: 0.33, y: 1)]", x)
}

func variadicTest2() {
    func take(args...) {
        args.toString()
    }
    var x = take(1,2,44.42)
    assert("(1, 2, 44.42)", x)
}

func variadicTest3() {
    func take(x, args...) {
        var str = "x=" + x
        str += args
    }
    var x = take(14)
    assert("x=14()", x)
}

func complexToStringTest1() {
    func Integer.toString() {
        if this % 2 == 0 {
            "even"
        } else {
            "odd"
        }
    }
    assert("even", 12.toString())
    Integer.__deleteMember("toString")
}

func complexToStringTest2() {
    func Nil.toString() {
        "null"
    }
    var x = "foo" + nil
    assert("foonull", x)
}

func methodTest1() {
    func Integer +(other) {
        this * other
    }
    var res = 3 + 3 == 3 * 3
    Integer.__deleteMember("+")
    assert(true, res)
}

func methodTest2() {
    func Float +(other) {
        this + " + " + other
    }
    var res = 12.2 + 0.4
    Float.__deleteMember("+")
    assert("12.2 + 0.4", res)
}

func functionTest1() {
    func sum(x,y) {
        if y == 2 {
            x + y
        } else {
            var z = sum(y, 2)
            x -= 1
            x + z
        }
    }
    var res = sum(2, 4)
    assert(7, res)
}

func functionTest2() {
    func test(x, y, z) {
        (x, y, z)
    }
    var res = test(z: 12, x: 3, y: 1)
    assert((3, 1, 12), res)
}

func functionTest3() {
    func test(x, x1 = 144, y, z, z1 = -3) {
        (x, x1, y, z, z1)
    }
    var res = test(z: 12, x: 3, y: 1)
    assert((3, 144, 1, 12, -3), res)
}

func functionTest4() {
    func test(args..., separator = ",", terminator = "\n") {
        [args, separator, terminator]
    }
    assert( [(1,2), ",", "\n"], test(1,2) )
    assert( [(1,2), ",", "\r"], test(1,2, terminator: "\r") )
    assert( [(1,2), ";", "\r"], test(1,2, terminator: "\r", separator: ";") )
}

func functionTest5() {
    func test(optional = "foo") {
        optional
    }
    assert("foo", test())
    var arg = "bar"
    assert(arg, test(arg))
}
