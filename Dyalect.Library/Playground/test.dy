/*func test1() {
    func sorter(x, y) {
        if x > 10 {
            throw "No!"
        }
        x - y
    }
    var arr = [1..11]
    var ex
    try {
        arr.sort(sorter)
    } catch e {
        ex = e
    }
    assert("No!", ex)
}

test1()


func sigma(n) { 
    if n == 1 { return 0 }          // definition of aliquot sum
 
    var result = 1
    const root = sqrt(n)
 
    for div in 2..root {
        if n % div == 0 {
            result += div + n/div
        }
    }
    if root*root == n { result -= root }
 
    return (result)
}
 
func amicables (upTo) {
    var aliquot = Array.empty(upTo+1, 0)
 
    for i in 1 .. upTo {           // fill lookup array
        aliquot[i] = sigma(i)
    }
 
 for i in 1 .. upTo {
        const a = aliquot[i]
        if a > upTo {continue}      //second part of pair out-of-bounds
 
        if a == i {continue}        //skip perfect numbers
 
        if i == aliquot[a] {
            print("\((i, a))")
            aliquot[a] = upTo+1     //prevent second display of pair
        }
    }
}
 
amicables(20000)
*/

var xs = [1..2]
var seq = xs.iter()
var x = seq()
xs.addRange({3, 4, 5})
x = seq()
x + x